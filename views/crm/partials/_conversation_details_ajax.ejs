<!-- هذا الملف الجزئي (Partial) يعرض تفاصيل المحادثة والرسائل -->
<!-- تعريف متغيرات المستخدم عالمياً -->
<script>
  // تعريف معلومات المستخدم كمتغيرات عامة
  window.currentUserId = "<%= typeof user !== 'undefined' && user ? user._id : 'system' %>";
  window.currentUsername = "<%= typeof user !== 'undefined' && user ? user.username : 'مستخدم النظام' %>";

  // تعريف الدوال العالمية للتفاعل مع الرسائل
  // دالة لعرض منتقي التفاعلات
  window.showReactionPicker = function(messageId, externalId, buttonElement) {
    if (!messageId) return;
    
    console.log('تنفيذ دالة showReactionPicker مع المعرف:', messageId);
    
    // العثور على الرسالة التي سيتم إضافة التفاعل لها
    const messageElem = buttonElement.closest('.message');
    if (!messageElem) {
      console.error('لم يتم العثور على عنصر الرسالة!');
      return;
    }
    
    // إنشاء أو تحديث منتقي التفاعلات
    let reactionPicker = document.getElementById('reactionPicker');
    
    if (!reactionPicker) {
      reactionPicker = document.createElement('div');
      reactionPicker.id = 'reactionPicker';
      reactionPicker.className = 'reaction-picker';
      
      const reactions = ['👍', '❤️', '😂', '😮', '😢', '👏'];
      
      let buttonsHTML = '';
      reactions.forEach(emoji => {
        buttonsHTML += `<button class="reaction-emoji-btn" data-emoji="${emoji}">${emoji}</button>`;
      });
      
      reactionPicker.innerHTML = buttonsHTML;
      document.body.appendChild(reactionPicker);
      
      // إضافة أحداث للأزرار
      reactionPicker.querySelectorAll('.reaction-emoji-btn').forEach(btn => {
        btn.addEventListener('click', function() {
          const emoji = this.getAttribute('data-emoji');
          window.sendReaction(messageId, emoji, externalId);
          reactionPicker.remove();
        });
      });
      
      // إغلاق عند النقر في أي مكان آخر
      document.addEventListener('click', function closeReactionPicker(e) {
        if (!reactionPicker.contains(e.target) && 
            !e.target.classList.contains('reaction-btn') && 
            !e.target.closest('.reaction-btn')) {
          reactionPicker.remove();
          document.removeEventListener('click', closeReactionPicker);
        }
      });
    }
    
    // تحديد موقع منتقي التفاعلات بالنسبة للرسالة
    const rect = buttonElement.getBoundingClientRect();
    const isRTL = document.dir === 'rtl';
    
    if (isRTL) {
      reactionPicker.style.right = `${rect.right}px`;
    } else {
      reactionPicker.style.left = `${rect.left}px`;
    }
    
    reactionPicker.style.top = `${rect.bottom + window.scrollY + 5}px`;
  };
  
  // دالة لإرسال تفاعل
  window.sendReaction = function(messageId, emoji, externalId) {
    if (!messageId || !emoji) return;
    
    console.log('إرسال تفاعل:', messageId, emoji);
    
    // الحصول على معرف المحادثة
    const conversationId = document.getElementById('conversationId')?.value;
    if (!conversationId) {
      console.error('معرف المحادثة غير موجود!');
      return;
    }
    
    // إرسال التفاعل إلى الخادم
    fetch(`/crm/conversations/${conversationId}/reaction`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-Requested-With': 'XMLHttpRequest'
      },
      body: JSON.stringify({
        messageId: messageId,
        externalMessageId: externalId,
        emoji: emoji,
        senderId: window.currentUserId,
        senderName: window.currentUsername
      })
    })
    .then(response => {
      if (!response.ok) throw new Error('فشل إرسال التفاعل');
      return response.json();
    })
    .then(data => {
      console.log('تم إرسال التفاعل بنجاح:', data);
    })
    .catch(error => {
      console.error('خطأ في إرسال التفاعل:', error);
      window.showToast && window.showToast('فشل في إرسال التفاعل، يرجى المحاولة مرة أخرى.', 'danger');
    });
  };
  
  // دالة لعرض نموذج الرد على رسالة معينة
  window.showReplyForm = function(messageId, externalId, messageElem) {
    if (!messageElem || !messageId) {
      console.error('بيانات غير كافية لعرض نموذج الرد:', { messageId, messageElem });
      return;
    }
    
    console.log('تنفيذ دالة showReplyForm مع المعرف:', messageId);
    
    // تخزين معرف الرسالة للرد عليها
    window.currentReplyToId = messageId;
    
    // عرض مؤشر الرد
    let replyIndicator = document.getElementById('replyIndicator');
    
    if (!replyIndicator) {
      replyIndicator = document.createElement('div');
      replyIndicator.id = 'replyIndicator';
      replyIndicator.className = 'reply-indicator alert alert-info d-flex justify-content-between align-items-center py-2 mb-2';
      
      // الحصول على محتوى الرسالة للعرض
      const messageContent = messageElem.querySelector('.message-bubble').textContent.trim().substring(0, 50);
      
      replyIndicator.innerHTML = `
        <div>
          <i class="fas fa-reply me-1"></i>
          <small>رد على: ${messageContent}${messageContent.length > 50 ? '...' : ''}</small>
        </div>
        <button type="button" class="btn btn-sm text-secondary cancel-reply-btn">
          <i class="fas fa-times"></i>
        </button>
      `;
      
      // إضافة المؤشر قبل حقل الإدخال
      const replyForm = document.getElementById('replyForm');
      if (replyForm) {
        replyForm.insertBefore(replyIndicator, replyForm.firstChild);
      }
      
      // إضافة حدث إلغاء الرد
      const cancelButton = replyIndicator.querySelector('.cancel-reply-btn');
      if (cancelButton) {
        cancelButton.addEventListener('click', function() {
          window.clearReplyIndicator();
        });
      }
    } else {
      // تحديث المحتوى إذا كان موجوداً
      const messageContent = messageElem.querySelector('.message-bubble').textContent.trim().substring(0, 50);
      replyIndicator.querySelector('small').innerHTML = `رد على: ${messageContent}${messageContent.length > 50 ? '...' : ''}`;
    }
    
    // التركيز على حقل الإدخال
    const replyMessage = document.getElementById('replyMessage');
    if (replyMessage) {
      replyMessage.focus();
    }
  };
  
  // دالة لإزالة مؤشر الرد
  window.clearReplyIndicator = function() {
    const replyIndicator = document.getElementById('replyIndicator');
    if (replyIndicator) {
      replyIndicator.remove();
    }
    window.currentReplyToId = null;
  };

  // إنشاء وظيفة عامة لإعادة تعيين مستمعات الأحداث بعد التحميل
  window.attachConversationEventListeners = function() {
    console.log('بدء تطبيق مستمعات الأحداث للمحادثة...');
    
    // الحصول على الإشارات إلى عناصر DOM
    const replyForm = document.getElementById('replyForm');
    const replyMessage = document.getElementById('replyMessage');
    const sendButton = document.getElementById('sendButton');
    const sendingIndicator = document.getElementById('sendingIndicator');
    const conversationId = document.getElementById('conversationId')?.value;
    
    if (!conversationId) {
      console.error('معرف المحادثة غير موجود! replyForm:', replyForm, 'conversationId element:', document.getElementById('conversationId'));
      return;
    }
    
    console.log('تهيئة النموذج للمحادثة:', conversationId);
    
    // متغيرات للرد على رسالة
    let currentReplyToId = null;  // معرف الرسالة التي يتم الرد عليها
    let currentReplyMessageElem = null;  // عنصر الرسالة
    
    // إضافة مستمعات الأحداث للرسائل الموجودة حالياً
    console.log('إضافة مستمعات الأحداث للرسائل...');
    const allMessages = document.querySelectorAll('.message');
    allMessages.forEach(message => {
      setupMessageActions(message);
    });
    
    // حدث إرسال نموذج الرد
    if (replyForm) {
      replyForm.addEventListener('submit', function(e) {
        e.preventDefault(); // منع السلوك الافتراضي للنموذج
        
        // التحقق من إدخال المستخدم
        if (!replyMessage.value.trim()) {
          alert('يرجى إدخال نص الرسالة');
          return;
        }
        
        // إظهار مؤشر الإرسال وتعطيل زر الإرسال
        sendButton.disabled = true;
        sendingIndicator.style.display = 'inline-block';
        
        // إنشاء كائن البيانات
        const messageData = {
          content: replyMessage.value.trim(),
          replyToMessageId: currentReplyToId
        };
        
        // إرسال الرسالة للخادم باستخدام AJAX
        sendMessage(messageData);
        
        // إعادة تعيين النموذج
        replyMessage.value = '';
        
        // إزالة مؤشر الرد
        clearReplyIndicator();
      });
      
      // استخدام مفتاح Enter لإرسال الرسالة
      replyMessage.addEventListener('keydown', function(e) {
        if (e.key === 'Enter' && !e.shiftKey) {
          e.preventDefault(); // منع السلوك الافتراضي
          
          // إرسال النموذج إذا كان هناك محتوى
          if (replyMessage.value.trim()) {
            replyForm.dispatchEvent(new Event('submit'));
          }
        }
      });
    }
    
    // دالة إرسال الرسالة
    function sendMessage(messageData) {
      // إرسال الرسالة للخادم
      fetch(`/crm/conversations/${conversationId}/reply`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'X-Requested-With': 'XMLHttpRequest'
        },
        body: JSON.stringify(messageData)
      })
      .then(response => {
        if (!response.ok) throw new Error('فشل إرسال الرسالة');
        return response.json();
      })
      .then(data => {
        console.log('تم إرسال الرسالة بنجاح:', data);
        
        // إعادة تمكين نموذج الإرسال
        sendButton.disabled = false;
        sendingIndicator.style.display = 'none';
      })
      .catch(error => {
        console.error('خطأ في إرسال الرسالة:', error);
        
        // إعادة تمكين نموذج الإرسال
        sendButton.disabled = false;
        sendingIndicator.style.display = 'none';
        
        // عرض رسالة خطأ
        window.showToast && window.showToast('فشل في إرسال الرسالة، يرجى المحاولة مرة أخرى.', 'danger');
      });
    }
    
    // دالة لإزالة مؤشر الرد
    function clearReplyIndicator() {
      const replyIndicator = document.getElementById('replyIndicator');
      if (replyIndicator) {
        replyIndicator.remove();
      }
    }
    
    // دالة لإعداد أحداث التفاعل مع الرسائل
    function setupMessageActions(messageElem) {
      if (!messageElem) return;
      
      console.log('إعداد أحداث الرسالة للعنصر:', messageElem);
      
      // زر الرد
      const replyButton = messageElem.querySelector('.reply-btn');
      if (replyButton) {
        console.log('تم العثور على زر الرد:', replyButton);
        
        // إزالة أي مستمعات سابقة لتجنب التكرار
        replyButton.removeEventListener('click', handleReplyClick);
        
        // إضافة مستمع جديد
        replyButton.addEventListener('click', handleReplyClick);
      } else {
        console.warn('لم يتم العثور على زر الرد في الرسالة');
      }
      
      // زر التفاعل
      const reactionButton = messageElem.querySelector('.reaction-btn');
      if (reactionButton) {
        console.log('تم العثور على زر التفاعل:', reactionButton);
        
        // إزالة أي مستمعات سابقة لتجنب التكرار
        reactionButton.removeEventListener('click', handleReactionClick);
        
        // إضافة مستمع جديد
        reactionButton.addEventListener('click', handleReactionClick);
      } else {
        console.warn('لم يتم العثور على زر التفاعل في الرسالة');
      }
      
      // دالة معالجة حدث النقر على زر الرد
      function handleReplyClick(event) {
        console.log('تم النقر على زر الرد');
        const messageId = messageElem.getAttribute('data-message-id');
        const externalId = messageElem.getAttribute('data-external-id');
        window.showReplyForm(messageId, externalId, messageElem);
      }
      
      // دالة معالجة حدث النقر على زر التفاعل
      function handleReactionClick(event) {
        console.log('تم النقر على زر التفاعل');
        const messageId = messageElem.getAttribute('data-message-id');
        const externalId = messageElem.getAttribute('data-external-id');
        window.showReactionPicker(messageId, externalId, event.target);
      }
    }
    
    // لا حاجة لتكرار إضافة أحداث للأزرار هنا، لأننا أضفناها في بداية الدالة بالفعل
    
    // دالة لعرض نموذج الرد على رسالة معينة
    // moved to global scope
    
    // دالة لعرض منتقي التفاعلات
    // moved to global scope
  };
  
  // تشغيل الوظيفة عند تحميل المحتوى
  window.attachConversationEventListeners();
</script>

<div class="card">
    <div class="card-header d-flex justify-content-between align-items-center">
      <h5 class="mb-0">
        <i class="fas fa-comments me-1"></i>
        المحادثة مع <%= conversation.customerName || conversation.phoneNumber %>
      </h5>
      <span class="badge bg-primary"><%= messages.length %> رسالة</span>
    </div>
    <div class="card-body p-0" id="messageContainer" style="max-height: 500px; overflow-y: auto;">
      <% if (messages && messages.length) { %>
        <% messages.forEach((msg, index) => { %>
          <div class="message <%= msg.direction %>"
               data-message-id="<%= msg._id %>"
               data-status="<%= msg.status %>"
               <% if (msg.externalMessageId) { %> data-external-id="<%= msg.externalMessageId %>" <% } %>>
            
            <% if (msg.replyToMessageId) { %>
              <!-- عرض الرسالة المقتبسة في حالة وجود رد -->
              <div class="replied-message">
                <% const repliedMsg = messages.find(m => m.externalMessageId === msg.replyToMessageId); %>
                <% if (repliedMsg) { %>
                  <div class="replied-content">
                    <i class="fas fa-reply"></i>
                    <span><%= repliedMsg.content.length > 50 ? repliedMsg.content.substring(0, 50) + '...' : repliedMsg.content %></span>
                  </div>
                <% } else { %>
                  <div class="replied-content text-muted">
                    <i class="fas fa-reply"></i>
                    <span>رد على رسالة غير موجودة</span>
                  </div>
                <% } %>
              </div>
            <% } %>
            
            <div class="message-bubble <%= msg.direction === 'incoming' ? 'incoming-bubble' : 'outgoing-bubble' %>">
              <%= msg.content %>
              <div class="message-time">
                <%= new Date(msg.timestamp).toLocaleString('ar-LY') %>
                
                <% if (msg.direction === 'outgoing') { %>
                  <span class="message-status">
                    <% if (msg.status === 'sending') { %>
                      <i class="fas fa-clock text-secondary" title="جاري الإرسال..."></i>
                    <% } else if (msg.status === 'sent') { %>
                      <i class="fas fa-check text-silver" title="تم الإرسال"></i>
                    <% } else if (msg.status === 'delivered') { %>
                      <i class="fas fa-check-double text-silver" title="تم التسليم"></i>
                    <% } else if (msg.status === 'read') { %>
                      <i class="fas fa-check-double text-primary" title="تم القراءة"></i>
                    <% } else if (msg.status === 'failed') { %>
                      <i class="fas fa-exclamation-triangle text-danger" title="فشل الإرسال"></i>
                    <% } %>
                  </span>
                <% } %>
              </div>
            </div>
            
            <!-- عرض التفاعلات على الرسالة -->
            <% if (msg.reactions && msg.reactions.length > 0) { %>
              <div class="message-reactions">
                <% msg.reactions.forEach(function(reaction) { %>
                  <span class="reaction-emoji" title="تفاعل من <%= reaction.sender %>">
                    <%= reaction.emoji %>
                  </span>
                <% }); %>
              </div>
            <% } %>
            
            <!-- قائمة خيارات الرسالة -->
            <div class="message-actions">
              <button type="button" class="btn btn-sm text-muted message-action-btn reaction-btn" title="تفاعل" onclick="window.showReactionPicker('<%= msg._id %>', '<%= msg.externalMessageId %>', this)">
                <i class="far fa-smile"></i>
              </button>
              <button type="button" class="btn btn-sm text-muted message-action-btn reply-btn" 
                      data-message-id="<%= msg._id %>" 
                      data-external-id="<%= msg.externalMessageId %>" 
                      title="رد" onclick="window.showReplyForm('<%= msg._id %>', '<%= msg.externalMessageId %>', this.closest('.message'))">
                <i class="fas fa-reply"></i>
              </button>
            </div>
          </div>
          <div class="clear-both"></div>
          
          <% if (index < messages.length - 1 && 
                  new Date(messages[index+1].timestamp) - new Date(msg.timestamp) > 3600000) { %>
            <div class="message-internal-note text-muted my-2" style="font-size: 0.85rem;">
              <i class="fas fa-clock me-1"></i>
              مرت <%= Math.round((new Date(messages[index+1].timestamp) - new Date(msg.timestamp)) / 3600000) %> ساعة
            </div>
          <% } %>
        <% }) %>
      <% } else { %>
        <div class="text-center text-muted py-3">
          <i class="fas fa-comment-dots mb-3" style="font-size: 3rem; opacity: 0.2;"></i>
          <p>لا توجد رسائل في هذه المحادثة.</p>
        </div>
      <% } %>
    </div>
  </div>
  
  <!-- نموذج إرسال الرد (إذا كانت المحادثة غير مغلقة) -->
  <% if (conversation.status !== 'closed') { %>
    <!-- تعريف دالة الإرسال أولاً -->
    <script>
      // دالة إرسال الرد
      function sendReply(event) {
        if (event) event.preventDefault();
        
        const replyMessage = document.getElementById('replyMessage');
        const sendButton = document.getElementById('sendButton');
        const sendingIndicator = document.getElementById('sendingIndicator');
        const conversationId = document.getElementById('conversationId').value;
        
        // التحقق من الإدخال
        if (!replyMessage.value.trim()) {
          alert('يرجى كتابة نص الرسالة');
          return;
        }
        
        // تعطيل الزر وإظهار مؤشر التحميل
        sendButton.disabled = true;
        sendingIndicator.style.display = 'inline-block';
        
        // إرسال الرسالة للخادم
        fetch(`/crm/conversations/${conversationId}/reply`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'X-Requested-With': 'XMLHttpRequest'
          },
          body: JSON.stringify({
            content: replyMessage.value.trim(),
            replyToMessageId: window.currentReplyToId || null
          })
        })
        .then(response => {
          if (!response.ok) throw new Error('فشل إرسال الرسالة');
          return response.json();
        })
        .then(data => {
          console.log('تم إرسال الرسالة بنجاح:', data);
          
          // مسح النص من النموذج
          replyMessage.value = '';
          
          // إعادة تمكين زر الإرسال وإخفاء المؤشر
          sendButton.disabled = false;
          sendingIndicator.style.display = 'none';
          
          // إزالة مؤشر الرد إن وجد
          const replyIndicator = document.getElementById('replyIndicator');
          if (replyIndicator) replyIndicator.remove();
          
          // إعادة تعيين متغير الرد
          window.currentReplyToId = null;
          
          // تحديث المحادثة
          if (window.refreshConversationDetails) window.refreshConversationDetails();
        })
        .catch(error => {
          console.error('خطأ في إرسال الرسالة:', error);
          
          // إعادة تمكين زر الإرسال وإخفاء المؤشر
          sendButton.disabled = false;
          sendingIndicator.style.display = 'none';
          
          // عرض رسالة خطأ
          window.showToast && window.showToast('فشل في إرسال الرسالة، يرجى المحاولة مرة أخرى.', 'danger');
        });
      }
      
      // تعريف متغير عالمي للرد على رسالة محددة
      window.currentReplyToId = null;
    </script>
    
    <!-- النموذج بعد تعريف الدالة -->
    <form id="replyForm" class="mt-3" onsubmit="sendReply(event)">
      <input type="hidden" id="conversationId" value="<%= conversation._id %>">
      <div class="mb-3">
        <label for="replyMessage" class="form-label">إرسال رد</label>
        <textarea class="form-control" id="replyMessage" name="content"
                  rows="3" required placeholder="اكتب رسالتك... (Enter للإرسال)" 
                  onkeydown="if(event.key === 'Enter' && !event.shiftKey) { event.preventDefault(); sendReply(event); }"></textarea>
      </div>
      <div class="d-flex justify-content-between align-items-center">
        <span class="sending-indicator" id="sendingIndicator" style="display: none;">
          <i class="fas fa-circle-notch fa-spin"></i> جاري الإرسال...
        </span>
        <button type="button" class="btn btn-outline-secondary" onclick="document.getElementById('replyMessage').value = ''">مسح</button>
        <button type="submit" class="btn btn-primary" id="sendButton">
          <i class="fas fa-paper-plane me-1"></i> إرسال
        </button>
      </div>
    </form>
    
    <!-- إضافة كود JavaScript مباشر وبسيط -->
    <script>
      // دالة للرد على رسالة محددة
      // moved to global scope
      
      // إضافة مستمعات أحداث للرد على الرسائل
      function setupReplyButtons() {
        document.querySelectorAll('.reply-btn').forEach(button => {
          button.onclick = function() {
            const messageId = this.getAttribute('data-message-id');
            const externalId = this.getAttribute('data-external-id');
            const messageElem = this.closest('.message');
            window.showReplyForm(messageId, externalId, messageElem);
          };
        });
      }
      
      // تنفيذ إعداد الأزرار
      setupReplyButtons();
      
      // عند تحميل المستند بالكامل
      document.addEventListener('DOMContentLoaded', setupReplyButtons);
    </script>
  <% } else { %>
    <div class="alert alert-secondary mt-3">
      <i class="fas fa-lock me-1"></i>
      المحادثة مغلقة، لا يمكن الرد.
    </div>
  <% } %>

<!-- يجب إضافة CSS إضافي في الملفين conversations_split_ajax.ejs و المصدر الرئيسي -->
<style>
  .message {
    position: relative;
    margin-bottom: 15px;
    clear: both;
    max-width: 75%;
  }
  
  .message.incoming {
    float: left;
  }
  
  .message.outgoing {
    float: right;
  }
  
  .message-bubble {
    padding: 8px 12px;
    border-radius: 15px;
    position: relative;
    word-wrap: break-word;
  }
  
  .incoming-bubble {
    background-color: #e9ecef;
    border-bottom-left-radius: 5px;
  }
  
  .outgoing-bubble {
    background-color: #d4edda;
    border-bottom-right-radius: 5px;
  }
  
  .message-time {
    font-size: 0.7rem;
    color: #6c757d;
    margin-top: 3px;
    text-align: right;
  }
  
  .message-actions {
    position: absolute;
    right: 5px;
    bottom: -20px;
    opacity: 0;
    transition: opacity 0.2s;
    background: rgba(255, 255, 255, 0.8);
    border-radius: 15px;
    padding: 0 5px;
    display: flex;
  }
  
  .message.incoming .message-actions {
    left: 5px;
    right: auto;
  }
  
  .message:hover .message-actions {
    opacity: 1;
  }
  
  .message-action-btn {
    padding: 0.1rem 0.3rem;
  }
  
  .replied-message {
    margin-bottom: 5px;
    padding: 5px;
    background-color: rgba(0,0,0,0.03);
    border-radius: 10px;
    font-size: 0.85rem;
  }
  
  .clear-both {
    clear: both;
  }
  
  .message-reactions {
    position: absolute;
    bottom: -15px;
    right: 10px;
    background: white;
    padding: 2px 5px;
    border-radius: 10px;
    box-shadow: 0 1px 3px rgba(0,0,0,0.1);
  }
  
  .message.incoming .message-reactions {
    left: 10px;
    right: auto;
  }
  
  .message-internal-note {
    text-align: center;
    padding: 5px;
    border-radius: 15px;
    clear: both;
  }
  
  .sending-indicator {
    color: #6c757d;
    display: none;
  }
  
  .sending-indicator i {
    animation: spin 1s linear infinite;
  }
  
  @keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
  }
</style>