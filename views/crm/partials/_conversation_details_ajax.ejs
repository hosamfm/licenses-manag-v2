<!-- هذا الملف الجزئي (Partial) يعرض تفاصيل المحادثة والرسائل -->
<!-- تعريف متغيرات المستخدم عالمياً -->
<script>
  // تعريف معلومات المستخدم كمتغيرات عامة
  window.currentUserId = "<%= typeof user !== 'undefined' && user ? user._id : 'system' %>";
  window.currentUsername = "<%= typeof user !== 'undefined' && user ? user.username : 'مستخدم النظام' %>";
</script>


<!-- دوال مساعدة محلية -->
<script>
  // دالة لتنسيق الوقت بشكل مقروء
  function formatTime(timestamp) {
    if (!timestamp) return '';
    
    const date = new Date(timestamp);
    return date.toLocaleString('ar-LY', { 
      hour: '2-digit', 
      minute: '2-digit',
      year: 'numeric',
      month: 'short',
      day: 'numeric'
    });
  }
  
  // دالة لعرض نص حالة الرسالة
  function getStatusText(status) {
    switch (status) {
      case 'sending':
        return 'جاري الإرسال...';
      case 'sent':
        return 'تم الإرسال';
      case 'delivered':
        return 'تم التسليم';
      case 'read':
        return 'تم القراءة';
      case 'failed':
        return 'فشل الإرسال';
      default:
        return status || 'غير معروف';
    }
  }
</script>

<div class="card shadow-sm border-0">
    <div class="card-header d-flex justify-content-between align-items-center">
      <h5 class="mb-0 d-flex align-items-center">
        <i class="fas fa-comments me-2 text-primary"></i>
        <span>المحادثة مع <%= conversation.customerName || conversation.phoneNumber %></span>
        <% if (conversation.status === 'closed') { %>
          <span class="badge bg-secondary ms-2 conversation-status-badge"><i class="fas fa-lock me-1"></i> مغلقة</span>
        <% } else if (conversation.status === 'assigned') { %>
          <span class="badge bg-info ms-2 conversation-status-badge"><i class="fas fa-user-check me-1"></i> مسندة</span>
        <% } else { %>
          <span class="badge bg-success ms-2 conversation-status-badge"><i class="fas fa-door-open me-1"></i> مفتوحة</span>
        <% } %>
      </h5>
      <div class="conversation-actions">
        <% if (conversation.status !== 'closed') { %>
          <button class="btn btn-danger close-conversation-btn" 
                  data-conversation-id="<%= conversation._id %>" 
                  title="إغلاق المحادثة">
            <i class="fas fa-lock me-1"></i> إغلاق
          </button>
        <% } else { %>
          <button class="btn btn-success reopen-conversation-btn" 
                  data-conversation-id="<%= conversation._id %>" 
                  title="إعادة فتح المحادثة">
            <i class="fas fa-lock-open me-1"></i> إعادة فتح
          </button>
        <% } %>
        <span class="badge bg-primary ms-2"><i class="fas fa-comments me-1"></i> <%= messages.length %> رسالة</span>
      </div>
    </div>
    <div class="card-body p-0" id="messageContainer" style="max-height: 500px; overflow-y: auto;">
      <% if (conversation.status === 'closed') { %>
        <div class="alert alert-info m-3 text-center">
          <i class="fas fa-info-circle me-1"></i> هذه المحادثة مغلقة.
          <br>
          <small>سيتم إعادة فتحها تلقائيًا إذا أرسل العميل رسالة جديدة.</small>
        </div>
      <% } %>
      <div class="message-container-wrapper">
        <% if (messages && messages.length) { %>
            <% messages.forEach(function(message) { %>
              <div class="message <%= message.direction %>" 
                  data-message-id="<%= message._id %>" 
                  data-status="<%= message.status || 'sent' %>"
                  data-is-monitored="false"
                  <%= message.externalMessageId ? `data-external-id="${message.externalMessageId}"` : '' %>>
                
                <% if (message.replyToMessageId) { 
                  // البحث عن الرسالة المرد عليها
                  let repliedMsg = null;
                  for (let i = 0; i < messages.length; i++) {
                    if (messages[i]._id.toString() === message.replyToMessageId.toString() || 
                        (messages[i].externalMessageId && messages[i].externalMessageId === message.replyToMessageId)) {
                      repliedMsg = messages[i];
                      break;
                    }
                  }
                %>
                  <div class="replied-message">
                    <div class="replied-content">
                      <i class="fas fa-reply"></i>
                      <span><%= repliedMsg ? 
                        (repliedMsg.content ? repliedMsg.content.substring(0, 50) + (repliedMsg.content.length > 50 ? '...' : '') : 'محتوى وسائط') : 
                        `رد على رسالة محذوفة` %></span>
                    </div>
                  </div>
                <% } %>
                
                <div class="message-bubble <%= message.direction === 'incoming' ? 'incoming-bubble' : (message.direction === 'internal' ? 'internal-note-bubble' : 'outgoing-bubble') %> <%= message.mediaType ? 'message-with-media' : '' %>">
                  <% if (message.direction === 'internal') { %>
                    <%- include('_internal_note', { note: message }) %>
                  <% } else { %>
                    <% if (message.direction === 'outgoing') { %>
                    <!-- إضافة اسم المرسل فقط للرسائل الصادرة -->
                    <div class="message-sender">
                      <%= message.metadata && message.metadata.senderInfo 
                        ? message.metadata.senderInfo.username || message.metadata.senderInfo.full_name || 'مستخدم غير معروف'
                        : message.sentByUsername || 'مستخدم غير معروف' %>
                    </div>
                    <% } %>
                    
                    <!-- عرض الوسائط -->
                    <% if (message.mediaType) { %>
                      <%- include('_message_media', { message: message }) %>
                    <% } %>
                    
                    <% if (message.content && message.content.trim() !== '') { %>
                      <div class="message-text <%= message.mediaType ? 'with-media' : '' %>">
                        <%= message.content %>
                      </div>
                    <% } %>
                    
                    <div class="message-meta">
                      <span class="message-time" title="<%= new Date(message.timestamp || message.createdAt).toLocaleString() %>">
                        <%= new Date(message.timestamp || message.createdAt).toLocaleString('ar-LY', { hour: '2-digit', minute: '2-digit' }) %>
                      </span>
                      
                      <% if (message.direction === 'outgoing') { %>
                        <span class="message-status" title="حالة الرسالة: <%= message.status || 'sent' %>">
                          <% if (message.status === 'sent') { %>
                            <i class="fas fa-check text-secondary"></i>
                          <% } else if (message.status === 'delivered') { %>
                            <i class="fas fa-check-double text-secondary"></i>
                          <% } else if (message.status === 'read') { %>
                            <i class="fas fa-check-double text-primary"></i>
                          <% } else if (message.status === 'failed') { %>
                            <i class="fas fa-exclamation-circle text-danger"></i>
                          <% } else { /* sending or undefined */ %>
                            <i class="fas fa-clock text-secondary"></i>
                          <% } %>
                        </span>
                      <% } %>
                    </div>
                  <% } %>
                </div>
                
                <% if (message.reactions && message.reactions.length > 0 && message.direction !== 'internal') { %>
                  <div class="message-reactions">
                    <% message.reactions.forEach(function(reaction) { %>
                      <span class="reaction-emoji" title="تفاعل من <%= reaction.sender %>">
                        <%= reaction.emoji %>
                      </span>
                    <% }); %>
                  </div>
                <% } %>
                
                <!-- أزرار التفاعل مع الرسالة (باستثناء الملاحظات الداخلية) -->
                <% if (message.direction !== 'internal') { %>
                  <div class="message-actions">
                    <button type="button" class="btn btn-sm text-muted message-action-btn reaction-btn" 
                            title="تفاعل" 
                            data-message-id="<%= message._id %>"
                            data-external-id="<%= message.externalMessageId || '' %>">
                      <i class="far fa-smile"></i>
                    </button>
                    <button type="button" class="btn btn-sm text-muted message-action-btn reply-btn" 
                            data-message-id="<%= message._id %>" 
                            data-external-id="<%= message.externalMessageId || '' %>" 
                            title="رد">
                      <i class="fas fa-reply"></i>
                    </button>
                    <% if (message.direction === 'outgoing') { %>
                    <button type="button" class="btn btn-sm text-muted message-action-btn delete-btn" 
                            data-message-id="<%= message._id %>" 
                            data-external-id="<%= message.externalMessageId || '' %>" 
                            title="حذف">
                      <i class="fas fa-trash-alt"></i>
                    </button>
                    <% } %>
                    <% if (message.direction === 'incoming') { %>
                    <button type="button" class="btn btn-sm text-muted message-action-btn readers-btn" 
                            data-message-id="<%= message._id %>" 
                            data-external-id="<%= message.externalMessageId || '' %>" 
                            data-bs-toggle="dropdown"
                            aria-expanded="false"
                            title="من قرأ الرسالة">
                      <i class="fas fa-eye"></i>
                    </button>
                    <ul class="dropdown-menu readers-list" aria-labelledby="readersDropdown">
                      <li class="dropdown-header">قرأ هذه الرسالة</li>
                      <% if (message.readBy && message.readBy.length > 0) { %>
                        <% message.readBy.forEach(function(reader) { %>
                          <li class="dropdown-item">
                            <div class="reader-item">
                              <span class="reader-name"><%= reader.username %></span>
                              <span class="reader-time" title="<%= new Date(reader.readAt).toLocaleString() %>">
                                <%= new Date(reader.readAt).toLocaleString('ar-LY', { hour: '2-digit', minute: '2-digit' }) %>
                              </span>
                            </div>
                          </li>
                        <% }); %>
                      <% } else { %>
                          <li class="dropdown-item no-readers">لم يقرأها أحد بعد</li>
                      <% } %>
                    </ul>
                    <% } %>
                  </div>
                <% } %>
              </div>
            <% }); %>
        <% } else { %>
          <div class="text-center p-5">
            <div class="empty-conversation">
              <i class="far fa-comments"></i>
              <p>لا توجد رسائل في هذه المحادثة حتى الآن.</p>
            </div>
          </div>
        <% } %>
      </div>
    </div>
  </div>
  
  <!-- نموذج إرسال الرد (إذا كانت المحادثة غير مغلقة) -->
  <% if (conversation.status !== 'closed') { %>
    <!-- النموذج مع الاعتماد على دالة sendReply المتوفرة من ملف conversation-utils.js -->
    <form id="replyForm" class="mt-3" onsubmit="window.sendReply(event)">
      <input type="hidden" id="conversationId" value="<%= conversation._id %>">
      <div class="mb-3">
        <label for="replyMessage" class="form-label">إرسال رد</label>
        <div class="position-relative message-input-container">
          <textarea class="form-control message-input" id="replyMessage" name="content"
                rows="3" placeholder="اكتب رسالتك... (Enter للإرسال)" 
                onkeydown="if(event.key === 'Enter' && !event.shiftKey) { event.preventDefault(); window.sendReply(event); }"></textarea>
          <div class="message-input-actions">
            <button type="button" class="btn btn-link text-secondary" id="attachMediaBtn" title="إرفاق ملف">
              <i class="fas fa-paperclip"></i>
            </button>
            <input type="file" class="d-none" id="mediaFile" name="mediaFile">
          </div>
        </div>
      </div>

      <div id="mediaPreview" class="media-preview mt-2" style="display: none;">
        <div class="card">
          <div class="card-body">
            <div class="d-flex align-items-center">
              <i class="fas fa-paperclip me-2"></i>
              <span id="mediaFileName">اسم الملف</span>
              <input type="hidden" id="mediaId" name="mediaId">
              <input type="hidden" id="mediaType" name="mediaType">
              <input type="hidden" id="uploadMediaType" name="mediaType" value="auto">
              <input type="hidden" id="uploadConversationId" name="conversationId" value="<%= conversation._id %>">
              <button type="button" class="btn btn-sm btn-danger ms-auto" onclick="window.clearMediaAttachment()">
                <i class="fas fa-times"></i>
              </button>
            </div>
            <div class="upload-progress mt-2" style="display: none;">
              <div class="progress">
                <div class="progress-bar" role="progressbar" style="width: 0%;" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100">0%</div>
              </div>
            </div>
          </div>
        </div>
      </div>
      <div class="d-flex justify-content-between align-items-center">
        <span class="sending-indicator" id="sendingIndicator" style="display: none;">
          <i class="fas fa-circle-notch fa-spin"></i> جاري الإرسال...
        </span>
        <div class="reply-form-actions">
          <button type="button" class="btn btn-outline-secondary" onclick="document.getElementById('replyMessage').value = ''">مسح</button>
          <button type="submit" class="btn btn-primary" id="sendButton">
            <i class="fas fa-paper-plane me-1"></i> إرسال
          </button>
        </div>
      </div>
    </form>
    
    <!-- نافذة معاينة الوسائط -->
    <div id="mediaPreviewModal" class="modal fade" tabindex="-1">
      <div class="modal-dialog modal-lg">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title">معاينة الوسائط</h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="إغلاق"></button>
          </div>
          <div class="modal-body text-center" id="mediaPreviewContent">
            <!-- سيتم إضافة محتوى الوسائط هنا ديناميكياً -->
          </div>
          <div class="modal-footer">
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">إغلاق</button>
            <a href="#" class="btn btn-primary" id="downloadMediaBtn" download>تنزيل</a>
          </div>
        </div>
      </div>
    </div>
  <% } else { %>
    <div class="alert alert-secondary mt-3">
      <i class="fas fa-lock me-1"></i>
      المحادثة مغلقة، لا يمكن الرد.
    </div>
  <% } %>
  
  <!-- جافاسكريبت لعمل التصفح بالصفحات -->
  <script>
    $(document).ready(function() {
      // استدعاء للصفحة التالية من الرسائل
      $('.load-more-messages').click(function() {
        const $button = $(this);
        const conversationId = $('.conversation-detail-wrapper').data('conversation-id');
        const currentPage = parseInt($button.data('current-page'));
        const nextPage = currentPage + 1;
        
        // تغيير حالة الزر
        $button.prop('disabled', true).html('<i class="fa fa-spinner fa-spin"></i> جاري التحميل...');
        
        // طلب الصفحة التالية من الرسائل
        $.ajax({
          url: `/crm/conversations/ajax/details/${conversationId}?page=${nextPage}`,
          type: 'GET',
          success: function(response) {
            // استخراج الرسائل الجديدة فقط من الاستجابة
            const $newResponse = $(response);
            const $newMessages = $newResponse.find('.message');
            
            // إضافة الرسائل الجديدة في بداية قائمة الرسائل (لأنها الأقدم)
            $('#messageContainer').prepend($newMessages);
            
            // تحديث زر التحميل أو إخفائه إذا وصلنا لنهاية الرسائل
            const hasMore = $newResponse.find('.load-more-messages').length > 0;
            if (hasMore) {
              $button
                .prop('disabled', false)
                .html(`تحميل المزيد من الرسائل (${nextPage}/${$button.data('total-pages')})`)
                .data('current-page', nextPage);
            } else {
              $button.parent().remove(); // إزالة الزر إذا وصلنا للنهاية
            }
            
            // تفعيل المشغلات للوسائط الجديدة
            if (window.setupAudioPlayers) {
              window.setupAudioPlayers();
            }
            
            // تفعيل مراقبة الرسائل الجديدة
            initMessageVisibilityObserver();
            
            // تفعيل معالجات الأحداث للأزرار
            setupMessageActionHandlers();
          },
          error: function() {
            $button.prop('disabled', false).html('حدث خطأ أثناء التحميل. حاول مرة أخرى.');
          }
        });
      });
      
      // تهيئة مراقب ظهور الرسائل
      initMessageVisibilityObserver();
      
      // تفعيل القوائم المنسدلة
      new bootstrap.Dropdown('.readers-btn');
      
      // تفعيل معالجات الأحداث للأزرار
      setupMessageActionHandlers();
      
      // الاستماع لأحداث تحديث حالة الرسائل
      window.socketConnection && window.socketConnection.on('message-status-update', function(data) {
        if (data.readBy && data.readBy.length > 0) {
          updateReadersDropdown(data.externalId, data.readBy);
        }
      });
    });
    
    // إعداد معالجات الأحداث للأزرار
    function setupMessageActionHandlers() {
      // أزرار التفاعل
      $('.reaction-btn').off('click').on('click', function() {
        const messageId = $(this).data('message-id');
        const externalId = $(this).data('external-id');
        if (window.showReactionPicker) {
          window.showReactionPicker(messageId, externalId, this);
        }
      });
      
      // أزرار الرد
      $('.reply-btn').off('click').on('click', function() {
        const messageId = $(this).data('message-id');
        const externalId = $(this).data('external-id');
        if (window.showReplyForm) {
          window.showReplyForm(messageId, externalId, $(this).closest('.message')[0]);
        }
      });
      
      // أزرار الحذف
      $('.delete-btn').off('click').on('click', function() {
        const messageId = $(this).data('message-id');
        const externalId = $(this).data('external-id');
        if (window.confirmDeleteMessage) {
          window.confirmDeleteMessage(messageId, externalId);
        }
      });
    }
    
    // تحديث قائمة القراء
    function updateReadersDropdown(messageId, readers) {
      const message = document.querySelector(`.message[data-external-id="${messageId}"]`);
      if (!message) return;
      
      const dropdown = message.querySelector('.readers-list');
      if (!dropdown) return;
      
      // مسح القائمة الحالية باستثناء العنوان
      const header = dropdown.querySelector('.dropdown-header');
      dropdown.innerHTML = '';
      dropdown.appendChild(header);
      
      // إضافة القراء الجدد
      if (readers && readers.length > 0) {
        readers.forEach(reader => {
          const listItem = document.createElement('li');
          listItem.className = 'dropdown-item';
          
          const readerItem = document.createElement('div');
          readerItem.className = 'reader-item';
          
          const nameSpan = document.createElement('span');
          nameSpan.className = 'reader-name';
          nameSpan.textContent = reader.username;
          
          const timeSpan = document.createElement('span');
          timeSpan.className = 'reader-time';
          const date = new Date(reader.readAt);
          timeSpan.title = date.toLocaleString();
          timeSpan.textContent = date.toLocaleString('ar-LY', { hour: '2-digit', minute: '2-digit' });
          
          readerItem.appendChild(nameSpan);
          readerItem.appendChild(timeSpan);
          listItem.appendChild(readerItem);
          dropdown.appendChild(listItem);
        });
      } else {
        const listItem = document.createElement('li');
        listItem.className = 'dropdown-item no-readers';
        listItem.textContent = 'لم يقرأها أحد بعد';
        dropdown.appendChild(listItem);
      }
    }
    
    // تهيئة مراقبة ظهور الرسائل
    function initMessageVisibilityObserver() {
      // التحقق من دعم IntersectionObserver
      if (!('IntersectionObserver' in window)) {
        console.warn('المتصفح لا يدعم IntersectionObserver، لن يتم تتبع قراءة الرسائل');
        return;
      }
      
      const messageContainer = document.getElementById('messageContainer');
      if (!messageContainer) return;
      
      // إعداد المراقب
      const options = {
        root: messageContainer,
        rootMargin: '0px',
        threshold: 0.5 // يعتبر المحتوى مرئيًا عندما يكون 50% منه ظاهرًا على الأقل
      };
      
      // إنشاء المراقب
      const observer = new IntersectionObserver((entries, observer) => {
        // تجميع الرسائل الواردة المرئية التي لم يتم تتبعها بعد
        const visibleIncomingMessages = entries
          .filter(entry => entry.isIntersecting && 
                 entry.target.classList.contains('incoming') &&
                 entry.target.getAttribute('data-is-monitored') === 'false')
          .map(entry => ({
            element: entry.target,
            id: entry.target.dataset.messageId || entry.target.dataset.externalId
          }));
        
        if (visibleIncomingMessages.length > 0) {
          // وضع علامة على الرسائل المرئية
          visibleIncomingMessages.forEach(msg => {
            msg.element.setAttribute('data-is-monitored', 'true');
          });
          
          // استخراج معرفات الرسائل
          const messageIds = visibleIncomingMessages.map(msg => msg.id);
          
          // إرسال طلب لتحديث حالة القراءة
          markMessagesAsRead(messageIds);
        }
      }, options);
      
      // تتبع كل الرسائل الواردة في الحاوية
      const incomingMessages = messageContainer.querySelectorAll('.message.incoming');
      incomingMessages.forEach(message => {
        if (message.getAttribute('data-is-monitored') !== 'true') {
          observer.observe(message);
        }
      });
    }
    
    // تحديث حالة القراءة للرسائل
    function markMessagesAsRead(messageIds) {
      if (!messageIds || messageIds.length === 0) return;
      
      const conversationId = document.getElementById('conversationId').value;
      
      // إرسال طلب لتحديث حالة القراءة
      $.ajax({
        url: `/crm/conversations/${conversationId}/mark-as-read`,
        type: 'POST',
        dataType: 'json',
        contentType: 'application/json',
        data: JSON.stringify({ messageIds }),
        success: function(response) {
          console.log('تم تحديث حالة قراءة الرسائل', response);
        },
        error: function(error) {
          console.error('فشل تحديث حالة قراءة الرسائل', error);
        }
      });
    }
  </script>

<!-- أنماط خاصة بهذه الصفحة -->
<style>
.message-container {
  min-height: 150px;
  max-height: 400px;
  overflow-y: auto;
  scroll-behavior: smooth;
  position: relative;
}

.clear-both {
  clear: both;
}

/* أنماط للقراء */
.readers-list {
  min-width: 200px;
  max-width: 300px;
  padding: 0.5rem 0;
}

.readers-list .dropdown-header {
  font-weight: bold;
  color: #475569;
  padding: 0.5rem 1rem;
  font-size: 0.875rem;
}

.reader-item {
  display: flex;
  justify-content: space-between;
  align-items: center;
  width: 100%;
}

.reader-name {
  font-weight: 500;
}

.reader-time {
  font-size: 0.75rem;
  color: #64748b;
}

.no-readers {
  color: #94a3b8;
  font-style: italic;
}
</style>