<script>
  if (typeof window.currentUserId === 'undefined') {
    window.currentUserId = "<%= typeof user !== 'undefined' && user ? user._id : 'system' %>";
  }
  if (typeof window.currentUsername === 'undefined') {
    window.currentUsername = "<%= typeof user !== 'undefined' && user ? user.username : 'مستخدم النظام' %>";
  }

  // التأكد من أن وظيفة openInternalNoteModal معرفة (ستستخدم الإصدار المعرف في conversation-notes-utils.js)
  if (typeof window.openInternalNoteModal !== 'function') {
    // تعريف نسخة مؤقتة حتى يتم تحميل النسخة الكاملة
    window.openInternalNoteModal = function() {
    };
  }
</script>

<!-- دوال مساعدة محلية -->
<script>
  // دالة لعرض نص حالة الرسالة
  function getStatusText(status) {
    switch (status) {
      case 'sending':
        return 'جاري الإرسال...';
      case 'sent':
        return 'تم الإرسال';
      case 'delivered':
        return 'تم التسليم';
      case 'read':
        return 'تم القراءة';
      case 'failed':
        return 'فشل الإرسال';
      default:
        return status || 'غير معروف';
    }
  }
</script>

<!-- حاوية المحادثة الرئيسية مع تنسيق جديد -->
<div class="conversation-main-container">
  <!-- رأس المحادثة المحسن -->
  <div class="conversation-header">
    <!-- معلومات العميل/المحادثة -->
    <div class="customer-info">
      <div class="avatar-container">
        <div class="customer-avatar">
          <i class="fas fa-user"></i>
        </div>
      </div>
      <div class="customer-details">
        <h5 class="customer-name">
          <% 
            // استخدام منطق مشابه للدالة المساعدة ContactHelper.getServerDisplayName
            let customerName = '';
            // تفضيل اسم جهة الاتصال إذا كان موجودًا
            if (conversation.contactId && typeof conversation.contactId === 'object' && conversation.contactId.name) {
              customerName = conversation.contactId.name;
            } 
            // استخدام customerName كخيار ثاني
            else if (conversation.customerName) {
              customerName = conversation.customerName;
            } 
            // استخدام رقم الهاتف كخيار أخير
            else {
              customerName = conversation.phoneNumber || 'رقم غير معروف';
            }
          %>
          <%= customerName %>
        </h5>
        <div class="conversation-meta">
          <% if (conversation.status === 'closed') { %>
            <span class="badge bg-secondary conversation-status-badge"><i class="fas fa-lock me-1"></i> مغلقة</span>
          <% } else if (conversation.status === 'assigned') { %>
            <span class="badge bg-info conversation-status-badge">
              <i class="fas fa-user-check me-1"></i> مسندة
              <% 
                // إضافة اسم المسند إليه هنا إذا كان متاحاً عند تحميل الصفحة الأولي
                let assigneeNameText = '';
                let assigneeUser = conversation.assignedTo && typeof conversation.assignedTo === 'object' ? conversation.assignedTo : null;
                if (assigneeUser) { 
                  assigneeNameText = assigneeUser.full_name || assigneeUser.username || 'غير معروف';
              %> 
                <span class="assigned-to-name ms-1">(<%= assigneeNameText %>)</span>
                <script>
                </script>
              <% } else { %>
                 <span class="assigned-to-name ms-1" style="display: none;"></span>
              <% } %>
            </span>
          <% } else { %>
            <span class="badge bg-success conversation-status-badge"><i class="fas fa-door-open me-1"></i> مفتوحة</span>
          <% } %>
          <span class="message-count">
          </span>
        </div>
      </div>
    </div>
    
    <!-- أزرار الإجراءات -->
    <div class="conversation-actions">
      <div class="assignment-dropdown">
        <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" id="assignmentDropdown" data-bs-toggle="dropdown" aria-expanded="false">
          <i class="fas fa-user-check me-1"></i>
          <% if (conversation.assignedTo) { 
            let assigneeUser = typeof conversation.assignedTo === 'object' ? conversation.assignedTo : null;
            let assigneeName = assigneeUser ? (assigneeUser.full_name || assigneeUser.username) : 'غير معروف';
          %>
            <%= assigneeName %>
          <% } else { %>
            غير معين
          <% } %>
        </button>
        <ul class="dropdown-menu" aria-labelledby="assignmentDropdown">
          <% if (conversation.status !== 'closed') { %>
            <% if (!conversation.assignedTo) { %>
              <li>
                <button class="dropdown-item assign-to-me-btn" type="button"
                        data-conversation-id="<%= conversation._id %>"
                        id="assignToMeBtn">
                  <i class="fas fa-user-plus me-1"></i> تعيين لي
                </button>
              </li>
            <% } %>
            <li>
              <button class="dropdown-item change-assignment-btn" type="button"
                      data-conversation-id="<%= conversation._id %>"
                      id="changeAssignmentBtn">
                <i class="fas fa-exchange-alt me-1"></i> تغيير المسؤول
              </button>
            </li>
          <% } %>
        </ul>
      </div>
      
      <% if (conversation.status !== 'closed') { %>
        <button class="btn btn-sm btn-outline-danger close-conversation-btn" 
                data-conversation-id="<%= conversation._id %>" 
                title="إغلاق المحادثة">
          <i class="fas fa-lock me-1"></i> إغلاق
        </button>
      <% } else { %>
        <button class="btn btn-sm btn-outline-success reopen-conversation-btn" 
                data-conversation-id="<%= conversation._id %>" 
                title="إعادة فتح المحادثة">
          <i class="fas fa-lock-open me-1"></i> إعادة فتح
        </button>
      <% } %>
    </div>
  </div>
  
  <!-- منطقة المحادثة المركزية -->
  <div class="messages-container" id="messageContainer" 
       data-current-page="<%= pagination ? pagination.currentPage : 1 %>"
       data-total-pages="<%= pagination ? pagination.totalPages : 0 %>"
       data-total-messages="<%= pagination ? pagination.totalMessages : 0 %>">
    
    <% if (conversation.status === 'closed') { %>
      <div class="alert alert-info conversation-closed-alert">
        <i class="fas fa-info-circle me-1"></i> هذه المحادثة مغلقة.
        <br>
        <small>سيتم إعادة فتحها تلقائيًا إذا أرسل العميل رسالة جديدة.</small>
      </div>
    <% } %>
    
    <div class="message-container-wrapper">
      <% if (pagination && pagination.totalPages > 1) { %>
        <!-- تمت إزالة الزر وحاويته -->
        <% /* %>
        <div class="load-more-btn-container">
          <button id="loadMoreMessagesBtn" class="btn btn-sm btn-outline-primary">
            <i class="fas fa-chevron-up"></i> تحميل المزيد من الرسائل
          </button>
        </div>
        <% */ %>
      <% } %>
      */ %>
      
      <% if (messages && messages.length) { %>
          <% messages.forEach(function(message) { %>
            <div class="message <%= message.direction %>" 
                data-message-id="<%= message._id %>" 
                data-status="<%= message.status || 'sent' %>"
                <%= message.externalMessageId ? `data-external-id="${message.externalMessageId}"` : '' %>>
              
              <% if (message.replyToMessageId) { 
                // البحث عن الرسالة المرد عليها
                let repliedMsg = null;
                for (let i = 0; i < messages.length; i++) {
                  if (messages[i]._id.toString() === message.replyToMessageId.toString() || 
                      (messages[i].externalMessageId && messages[i].externalMessageId === message.replyToMessageId)) {
                    repliedMsg = messages[i];
                    break;
                  }
                }
              %>
                <div class="replied-message">
                  <div class="replied-content">
                    <i class="fas fa-reply"></i>
                    <span><%= repliedMsg ? 
                      (repliedMsg.content ? repliedMsg.content.substring(0, 50) + (repliedMsg.content.length > 50 ? '...' : '') : 'محتوى وسائط') : 
                      `رد على رسالة محذوفة` %></span>
                  </div>
                </div>
              <% } %>
              
              <div class="message-bubble <%= message.direction === 'incoming' ? 'incoming-bubble' : (message.direction === 'internal' ? 'internal-note-bubble' : 'outgoing-bubble') %> <%= message.mediaType ? 'message-with-media' : '' %>">
                <% if (message.direction === 'internal') { %>
                  <%- include('_internal_note', { note: message }) %>
                <% } else { %>
                  <% if (message.direction === 'outgoing') { %>
                  <!-- إضافة اسم المرسل فقط للرسائل الصادرة -->
                  <div class="message-sender">
                    <%= message.metadata && message.metadata.senderInfo 
                      ? message.metadata.senderInfo.username || message.metadata.senderInfo.full_name || 'مستخدم غير معروف'
                      : message.sentByUsername || 'مستخدم غير معروف' %>
                  </div>
                  <% } %>
                  
                  <!-- عرض الوسائط -->
                  <% if (message.mediaType) { %>
                    <%- include('_message_media', { message: message }) %>
                  <% } %>
                  
                  <% if (message.content && message.content.trim() !== '') { %>
                    <div class="message-text <%= message.mediaType ? 'with-media' : '' %>">
                      <%= message.content %>
                    </div>
                  <% } %>
                  
                  <div class="message-meta">
                    <span class="message-time" title="<%= new Date(message.timestamp || message.createdAt).toLocaleString() %>" 
                          data-timestamp="<%= new Date(message.timestamp || message.createdAt).getTime() %>"
                          data-date="<%= new Date(message.timestamp || message.createdAt).toISOString().split('T')[0] %>">
                      <%= new Date(message.timestamp || message.createdAt).toLocaleString('ar-LY', { hour: '2-digit', minute: '2-digit' }) %>
                    </span>
                    
                    <% if (message.direction === 'outgoing') { %>
                      <span class="message-status" title="حالة الرسالة: <%= message.status || 'sent' %>">
                        <% if (message.status === 'sent') { %>
                          <i class="fas fa-check text-secondary"></i>
                        <% } else if (message.status === 'delivered') { %>
                          <i class="fas fa-check-double text-secondary"></i>
                        <% } else if (message.status === 'read') { %>
                          <i class="fas fa-check-double text-primary"></i>
                        <% } else if (message.status === 'failed') { %>
                          <i class="fas fa-exclamation-circle text-danger"></i>
                        <% } else { /* sending or undefined */ %>
                          <i class="fas fa-clock text-secondary"></i>
                        <% } %>
                      </span>
                    <% } %>
                  </div>
                <% } %>
              </div>
              
              <% if (message.reactions && message.reactions.length > 0 && message.direction !== 'internal') { %>
                <div class="message-reactions">
                  <% message.reactions.forEach(function(reaction) { %>
                    <span class="reaction-emoji" title="تفاعل من <%= reaction.sender %>">
                      <%= reaction.emoji %>
                    </span>
                  <% }); %>
                </div>
              <% } %>
              
              <!-- أزرار التفاعل مع الرسالة (باستثناء الملاحظات الداخلية) -->
              <% if (message.direction !== 'internal') { %>
                <div class="message-actions">
                  <button type="button" class="btn btn-sm text-muted message-action-btn reaction-btn" title="تفاعل" 
                          data-message-id="<%= message._id %>"
                          data-external-id="<%= message.externalMessageId || '' %>">
                    <i class="far fa-smile"></i>
                  </button>
                  <button type="button" class="btn btn-sm text-muted message-action-btn reply-btn" 
                          data-message-id="<%= message._id %>" 
                          data-external-id="<%= message.externalMessageId || '' %>" 
                          title="رد">
                    <i class="fas fa-reply"></i>
                  </button>
                </div>
              <% } %>
            </div>
          <% }); %>
      <% } else { %>
        <div class="empty-conversation">
          <i class="far fa-comments"></i>
          <p>لا توجد رسائل في هذه المحادثة حتى الآن.</p>
        </div>
      <% } %>
    </div>
  </div>
  
  <!-- نموذج إرسال الرد (مثبت دائمًا في الأسفل) -->
  <div class="message-input-container">
    <% if (conversation.status !== 'closed') { %>
      <form id="replyForm" onsubmit="window.sendReply(event)">
        <input type="hidden" id="conversationId" value="<%= conversation._id %>">
        
        <div class="reply-form-content">
          <div class="reply-form-controls">
            <!-- أزرار الإرفاق والتعليقات الداخلية -->
            <div class="message-tools">
              <button type="button" class="btn btn-light" id="attachMediaBtn" title="إرفاق ملف">
                <i class="fas fa-paperclip"></i>
              </button>
              <button type="button" class="btn btn-light" 
                      onclick="if(typeof window.openInternalNoteModal === 'function') window.openInternalNoteModal(); else alert('عذراً، ميزة التعليقات الداخلية غير متوفرة حالياً');" 
                      title="ملاحظة داخلية">
                <i class="fas fa-sticky-note"></i>
              </button>
              <input type="file" class="d-none" id="mediaFile" name="mediaFile">
            </div>
            
            <!-- حقل الإدخال -->
            <div class="reply-input-wrapper">
              <textarea class="form-control" id="replyMessage" name="content"
                    rows="1" placeholder="اكتب رسالتك... (Enter للإرسال)" 
                    onkeydown="if(event.key === 'Enter' && !event.shiftKey) { event.preventDefault(); window.sendReply(event); }"></textarea>
            </div>
            
            <!-- زر الإرسال -->
            <div class="send-button-wrapper">
              <button type="submit" class="btn btn-primary" id="sendButton" title="إرسال">
                <i class="fas fa-paper-plane"></i>
              </button>
            </div>
          </div>
          
          <!-- معاينة الملفات المرفقة -->
          <div id="mediaPreview" class="media-preview">
            <div class="card">
              <div class="card-body">
                <div class="media-preview-info">
                  <i class="fas fa-paperclip"></i>
                  <span id="mediaFileName">اسم الملف</span>
                  <input type="hidden" id="mediaId" name="mediaId">
                  <input type="hidden" id="mediaType" name="mediaType">
                  <input type="hidden" id="uploadMediaType" name="mediaType" value="auto">
                  <input type="hidden" id="uploadConversationId" name="conversationId" value="<%= conversation._id %>">
                  <button type="button" class="btn btn-sm btn-danger remove-media-btn" onclick="window.clearMediaAttachment()">
                    <i class="fas fa-times"></i>
                  </button>
                </div>
                <div class="upload-progress" style="display: none;">
                  <div class="progress">
                    <div class="progress-bar" role="progressbar" style="width: 0%;" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100">0%</div>
                  </div>
                </div>
              </div>
            </div>
          </div>
          
          <!-- مؤشر الإرسال -->
          <div id="sendingIndicator" class="sending-indicator" style="display: none;">
            <i class="fas fa-circle-notch fa-spin"></i> جاري الإرسال...
          </div>
        </div>
      </form>
    <% } else { %>
      <div class="conversation-closed-notice">
        <i class="fas fa-lock"></i>
        المحادثة مغلقة، لا يمكن الرد.
      </div>
    <% } %>
  </div>
</div>

<!-- نافذة معاينة الوسائط -->
<div id="mediaPreviewModal" class="modal fade" tabindex="-1">
  <div class="modal-dialog modal-lg">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">معاينة الوسائط</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="إغلاق"></button>
      </div>
      <div class="modal-body text-center" id="mediaPreviewContent">
        <!-- سيتم إضافة محتوى الوسائط هنا ديناميكياً -->
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">إغلاق</button>
        <a href="#" class="btn btn-primary" id="downloadMediaBtn" download>تنزيل</a>
      </div>
    </div>
  </div>
</div>
  
<!-- جافاسكريبت لعمل التصفح بالصفحات -->
<script>
  $(document).ready(function() {
    // تهيئة نظام تحميل الرسائل التزايدي
    if (window.conversationPagination) {
      window.conversationPagination.initialize({
        conversationId: '<%= conversation._id %>'
      });
    }
    
    // التمرير إلى أحدث رسالة
    const messageContainer = document.getElementById('messageContainer');
    if (messageContainer) {
      messageContainer.scrollTop = messageContainer.scrollHeight;
    }
    
    // جعل منطقة النص تتمدد تلقائياً
    const replyMessage = document.getElementById('replyMessage');
    if (replyMessage) {
      replyMessage.addEventListener('input', function() {
        this.style.height = 'auto';
        this.style.height = (this.scrollHeight) + 'px';
        // تحديد حد أقصى للارتفاع
        if (this.scrollHeight > 150) {
          this.style.height = '150px';
          this.style.overflowY = 'auto';
        }
      });
    }
    
    // تفعيل مراقب قراءة الرسائل
    if (typeof window.setupMessageReadObserver === 'function') {
      setTimeout(() => {
        const unreadCount = window.setupMessageReadObserver();
      }, 500);
    }
  });
</script>

<!-- إضافة معالجات الأحداث للأزرار -->
<script>
  // عند تحميل الصفحة
  document.addEventListener('DOMContentLoaded', function() {
    // إضافة معالج حدث للأزرار
    function setupButtonEventListeners() {
      // أزرار التفاعل
      document.querySelectorAll('.reaction-btn').forEach(function(button) {
        if (!button.dataset.listenerAttached) {
          button.addEventListener('click', function() {
            const messageId = this.getAttribute('data-message-id');
            const externalId = this.getAttribute('data-external-id');
            window.showReactionPicker && window.showReactionPicker(messageId, externalId, this);
          });
          button.dataset.listenerAttached = 'true';
        }
      });
      
      // أزرار الرد
      document.querySelectorAll('.reply-btn').forEach(function(button) {
        if (!button.dataset.listenerAttached) {
          button.addEventListener('click', function() {
            const messageId = this.getAttribute('data-message-id');
            const externalId = this.getAttribute('data-external-id');
            window.showReplyForm && window.showReplyForm(messageId, externalId, this.closest('.message'));
          });
          button.dataset.listenerAttached = 'true';
        }
      });
      
      // زر تعيين لي
      const assignToMeBtn = document.getElementById('assignToMeBtn');
      if (assignToMeBtn && !assignToMeBtn.dataset.listenerAttached) {
        assignToMeBtn.addEventListener('click', function() {
          const conversationId = this.getAttribute('data-conversation-id');
          window.assignConversationToMe && window.assignConversationToMe(conversationId);
        });
        assignToMeBtn.dataset.listenerAttached = 'true';
      }
      
      // زر تغيير المسؤول
      const changeAssignmentBtn = document.getElementById('changeAssignmentBtn');
      if (changeAssignmentBtn && !changeAssignmentBtn.dataset.listenerAttached) {
        changeAssignmentBtn.addEventListener('click', function() {
          const conversationId = this.getAttribute('data-conversation-id');
          window.showAssignmentModal && window.showAssignmentModal(conversationId);
        });
        changeAssignmentBtn.dataset.listenerAttached = 'true';
      }
    }
    
    // تنفيذ الربط فور تحميل الصفحة
    setupButtonEventListeners();
    
    // إضافة مستمع للتحميل AJAX للمحادثات
    window.addEventListener('messages-loaded', function() {
      setupButtonEventListeners();
      
      // إعادة تفعيل مراقب قراءة الرسائل بعد تحميل رسائل جديدة
      if (typeof window.setupMessageReadObserver === 'function') {
        const unreadCount = window.setupMessageReadObserver();
      }
    });
    
    // إذا كان هناك دالة قائمة بالفعل لربط أحداث المحادثة، قم بتعديلها
    const originalAttachFunction = window.attachConversationEventListeners;
    if (typeof originalAttachFunction === 'function') {
      window.attachConversationEventListeners = function() {
        originalAttachFunction.call(this);
        setupButtonEventListeners();
        
        // تفعيل مراقب الرسائل المقروءة أيضًا
        if (typeof window.setupMessageReadObserver === 'function') {
          window.setupMessageReadObserver();
        }
      };
    }
  });
</script>

<!-- إضافة دالة لتحديث حالات الرسائل بشكل دوري -->
<script>
  // تنفيذ تحديث حالة الرسائل الصادرة بشكل دوري
  $(document).ready(function() {
    // دالة لتحديث حالة الرسائل الصادرة المعلقة
    function updatePendingOutgoingMessages() {
      // البحث عن جميع الرسائل الصادرة التي لم تصل إلى حالة "تمت القراءة" بعد
      const pendingMessages = document.querySelectorAll('.message.outgoing:not([data-status="read"])');
      if (pendingMessages.length === 0) return;
      
      
      pendingMessages.forEach(messageElem => {
        const messageId = messageElem.getAttribute('data-message-id');
        const externalId = messageElem.getAttribute('data-external-id');
        const currentStatus = messageElem.getAttribute('data-status');
        
        // تحديث الحالة فقط للرسائل التي تم إرسالها بالفعل (لديها معرف عادي، وليس معرفًا مؤقتًا)
        if (messageId && !messageId.startsWith('pending_') && (!currentStatus || currentStatus === 'sent')) {
          // استعلام عن حالة الرسالة من الخادم
          fetch(`/api/messages/${messageId}/status`)
            .then(response => response.ok ? response.json() : Promise.reject('فشل الجلب'))
            .then(data => {
              if (data.success && data.status && data.status !== currentStatus) {
                if (typeof window.updateMessageStatus === 'function') {
                  window.updateMessageStatus(messageId, data.status);
                }
              }
            })
            .catch(err => console.warn(`خطأ في جلب حالة الرسالة ${messageId}:`, err));
        }
      });
    }
    
    // تحديث الرسائل كل دقيقة - تردد منخفض لتجنب الطلبات الزائدة
    let updateInterval = setInterval(updatePendingOutgoingMessages, 60000);
    
    // التأكد من إيقاف التحديث عند مغادرة الصفحة
    window.addEventListener('beforeunload', function() {
      clearInterval(updateInterval);
    });
    
    // تحديث أولي بعد تحميل الصفحة
    setTimeout(updatePendingOutgoingMessages, 5000);
  });
</script>