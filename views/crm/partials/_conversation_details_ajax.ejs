<!-- هذا الملف الجزئي (Partial) يعرض تفاصيل المحادثة والرسائل -->
<!-- تعريف متغيرات المستخدم عالمياً -->
<script>
  // تعريف معلومات المستخدم كمتغيرات عامة
  window.currentUserId = "<%= typeof user !== 'undefined' && user ? user._id : 'system' %>";
  window.currentUsername = "<%= typeof user !== 'undefined' && user ? user.username : 'مستخدم النظام' %>";
</script>

<div class="card">
    <div class="card-header d-flex justify-content-between align-items-center">
      <h5 class="mb-0">
        <i class="fas fa-comments me-1"></i>
        المحادثة مع <%= conversation.customerName || conversation.phoneNumber %>
      </h5>
      <span class="badge bg-primary"><%= messages.length %> رسالة</span>
    </div>
    <div class="card-body p-0" id="messageContainer" style="max-height: 500px; overflow-y: auto;">
      <% if (messages && messages.length) { %>
        <% messages.forEach((msg, index) => { %>
          <div class="message <%= msg.direction %>"
               data-message-id="<%= msg._id %>"
               data-status="<%= msg.status %>"
               <% if (msg.externalMessageId) { %> data-external-id="<%= msg.externalMessageId %>" <% } %>>
            
            <% if (msg.replyToMessageId) { %>
              <!-- عرض الرسالة المقتبسة في حالة وجود رد -->
              <div class="replied-message">
                <% const repliedMsg = messages.find(m => m.externalMessageId === msg.replyToMessageId); %>
                <% if (repliedMsg) { %>
                  <div class="replied-content">
                    <i class="fas fa-reply"></i>
                    <span><%= repliedMsg.content.length > 50 ? repliedMsg.content.substring(0, 50) + '...' : repliedMsg.content %></span>
                  </div>
                <% } else { %>
                  <div class="replied-content text-muted">
                    <i class="fas fa-reply"></i>
                    <span>رد على رسالة غير موجودة</span>
                  </div>
                <% } %>
              </div>
            <% } %>
            
            <div class="message-bubble <%= msg.direction === 'incoming' ? 'incoming-bubble' : 'outgoing-bubble' %>">
              <%= msg.content %>
              <div class="message-time">
                <%= new Date(msg.timestamp).toLocaleString('ar-LY') %>
                
                <% if (msg.direction === 'outgoing') { %>
                  <span class="message-status">
                    <% if (msg.status === 'sending') { %>
                      <i class="fas fa-clock text-secondary" title="جاري الإرسال..."></i>
                    <% } else if (msg.status === 'sent') { %>
                      <i class="fas fa-check text-silver" title="تم الإرسال"></i>
                    <% } else if (msg.status === 'delivered') { %>
                      <i class="fas fa-check-double text-silver" title="تم التسليم"></i>
                    <% } else if (msg.status === 'read') { %>
                      <i class="fas fa-check-double text-primary" title="تم القراءة"></i>
                    <% } else if (msg.status === 'failed') { %>
                      <i class="fas fa-exclamation-triangle text-danger" title="فشل الإرسال"></i>
                    <% } %>
                  </span>
                <% } %>
              </div>
            </div>
            
            <!-- عرض التفاعلات على الرسالة -->
            <% if (msg.reactions && msg.reactions.length > 0) { %>
              <div class="message-reactions">
                <% msg.reactions.forEach(function(reaction) { %>
                  <span class="reaction-emoji" title="تفاعل من <%= reaction.sender %>">
                    <%= reaction.emoji %>
                  </span>
                <% }); %>
              </div>
            <% } %>
            
            <!-- قائمة خيارات الرسالة -->
            <div class="message-actions">
              <button class="btn btn-sm text-muted message-action-btn reaction-btn" title="تفاعل">
                <i class="far fa-smile"></i>
              </button>
              <button class="btn btn-sm text-muted message-action-btn reply-btn" 
                      data-message-id="<%= msg._id %>" 
                      data-external-id="<%= msg.externalMessageId %>" 
                      title="رد">
                <i class="fas fa-reply"></i>
              </button>
            </div>
          </div>
          <div class="clear-both"></div>
          
          <% if (index < messages.length - 1 && 
                  new Date(messages[index+1].timestamp) - new Date(msg.timestamp) > 3600000) { %>
            <div class="message-internal-note text-muted my-2" style="font-size: 0.85rem;">
              <i class="fas fa-clock me-1"></i>
              مرت <%= Math.round((new Date(messages[index+1].timestamp) - new Date(msg.timestamp)) / 3600000) %> ساعة
            </div>
          <% } %>
        <% }) %>
      <% } else { %>
        <div class="text-center text-muted py-3">
          <i class="fas fa-comment-dots mb-3" style="font-size: 3rem; opacity: 0.2;"></i>
          <p>لا توجد رسائل في هذه المحادثة.</p>
        </div>
      <% } %>
    </div>
  </div>
  
  <!-- نموذج إرسال الرد (إذا كانت المحادثة غير مغلقة) -->
  <% if (conversation.status !== 'closed') { %>
    <form id="replyForm" action="/crm/conversations/<%= conversation._id %>/reply" method="POST" class="mt-3">
      <div class="mb-3">
        <label for="replyMessage" class="form-label">إرسال رد</label>
        <textarea class="form-control" id="replyMessage" name="content"
                  rows="3" required placeholder="اكتب رسالتك... (Enter للإرسال)"></textarea>
      </div>
      <div class="d-flex justify-content-between align-items-center">
        <span class="sending-indicator" id="sendingIndicator" style="display: none;">
          <i class="fas fa-circle-notch fa-spin"></i> جاري الإرسال...
        </span>
        <button type="reset" class="btn btn-outline-secondary">مسح</button>
        <button type="submit" class="btn btn-primary" id="sendButton">
          <i class="fas fa-paper-plane me-1"></i> إرسال
        </button>
      </div>
    </form>
  <% } else { %>
    <div class="alert alert-secondary mt-3">
      <i class="fas fa-lock me-1"></i>
      المحادثة مغلقة، لا يمكن الرد.
    </div>
  <% } %>

<!-- يجب إضافة CSS إضافي في الملفين conversations_split_ajax.ejs و المصدر الرئيسي -->
<style>
  .message {
    position: relative;
    margin-bottom: 15px;
    clear: both;
    max-width: 75%;
  }
  
  .message.incoming {
    float: left;
  }
  
  .message.outgoing {
    float: right;
  }
  
  .message-bubble {
    padding: 8px 12px;
    border-radius: 15px;
    position: relative;
    word-wrap: break-word;
  }
  
  .incoming-bubble {
    background-color: #e9ecef;
    border-bottom-left-radius: 5px;
  }
  
  .outgoing-bubble {
    background-color: #d4edda;
    border-bottom-right-radius: 5px;
  }
  
  .message-time {
    font-size: 0.7rem;
    color: #6c757d;
    margin-top: 3px;
    text-align: right;
  }
  
  .message-actions {
    position: absolute;
    right: 5px;
    bottom: -20px;
    opacity: 0;
    transition: opacity 0.2s;
    background: rgba(255, 255, 255, 0.8);
    border-radius: 15px;
    padding: 0 5px;
    display: flex;
  }
  
  .message.incoming .message-actions {
    left: 5px;
    right: auto;
  }
  
  .message:hover .message-actions {
    opacity: 1;
  }
  
  .message-action-btn {
    padding: 0.1rem 0.3rem;
  }
  
  .replied-message {
    margin-bottom: 5px;
    padding: 5px;
    background-color: rgba(0,0,0,0.03);
    border-radius: 10px;
    font-size: 0.85rem;
  }
  
  .clear-both {
    clear: both;
  }
  
  .message-reactions {
    position: absolute;
    bottom: -15px;
    right: 10px;
    background: white;
    padding: 2px 5px;
    border-radius: 10px;
    box-shadow: 0 1px 3px rgba(0,0,0,0.1);
  }
  
  .message.incoming .message-reactions {
    left: 10px;
    right: auto;
  }
  
  .message-internal-note {
    text-align: center;
    padding: 5px;
    border-radius: 15px;
    clear: both;
  }
  
  .sending-indicator {
    color: #6c757d;
    display: none;
  }
  
  .sending-indicator i {
    animation: spin 1s linear infinite;
  }
  
  @keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
  }
</style>

<!-- إضافة JavaScript لتمكين وظائف الرد والتفاعل في الملف الجديد -->
<script>
  document.addEventListener('DOMContentLoaded', function() {
    // إنشاء وظيفة عامة لإعادة تعيين مستمعات الأحداث بعد التحميل
    window.attachConversationEventListeners = function() {
      // الحصول على الإشارات إلى عناصر DOM
      const replyForm = document.getElementById('replyForm');
      const replyMessage = document.getElementById('replyMessage');
      const sendButton = document.getElementById('sendButton');
      const sendingIndicator = document.getElementById('sendingIndicator');
      const conversationId = '<%= conversation._id %>';
      
      // متغيرات للرد على رسالة
      let currentReplyToId = null;  // معرف الرسالة التي يتم الرد عليها
      let currentReplyMessageElem = null;  // عنصر الرسالة
      
      // صف الرسائل المطلوب إرسالها
      let messageQueue = [];
      let isProcessing = false;  // هل نقوم بمعالجة الصف حالياً؟
      
      // التعامل مع إرسال الرد
      if (replyForm) {
        replyForm.addEventListener('submit', function(e) {
          e.preventDefault();
          
          // التأكد من وجود محتوى
          const messageContent = replyMessage.value.trim();
          if (!messageContent) return;
          
          // تغيير حالة الواجهة للإرسال
          sendButton.disabled = true;
          sendingIndicator.style.display = 'inline-block';
          
          // إنشاء بيانات الرسالة
          const messageData = {
            content: messageContent,
            timestamp: new Date().toISOString(),
            direction: 'outgoing',
            status: 'sending',
            _id: 'temp-' + Date.now(),
            externalMessageId: null
          };
          
          // إذا كان هناك رد على رسالة
          if (currentReplyToId) {
            messageData.replyToMessageId = currentReplyToId;
            messageData.replyToMessageElem = currentReplyMessageElem;
          }
          
          // إضافة الرسالة إلى قائمة الانتظار
          messageQueue.push(messageData);
          
          // إضافة رسالة مؤقتة للواجهة
          if (currentReplyToId) {
            addNewMessageWithReply(messageData);
          } else {
            addNewMessage(messageData);
          }
          
          // تمرير للأسفل
          const messageContainer = document.getElementById('messageContainer');
          if (messageContainer) {
            messageContainer.scrollTop = messageContainer.scrollHeight;
          }
          
          // مسح نموذج الإدخال
          replyMessage.value = '';
          
          // إعادة تعيين متغيرات الرد
          resetReplyState();
          
          // معالجة صف الرسائل
          processMessageQueue();
        });
        
        // استخدام Enter للإرسال
        replyMessage.addEventListener('keydown', function(e) {
          if (e.key === 'Enter' && !e.shiftKey) {
            e.preventDefault();
            
            if (replyMessage.value.trim()) {
              replyForm.dispatchEvent(new Event('submit'));
            }
          }
        });
      }
      
      // دالة لمعالجة صف الرسائل
      function processMessageQueue() {
        if (isProcessing || messageQueue.length === 0) return;
        
        isProcessing = true;
        const messageData = messageQueue.shift();
        
        // الحصول على معرف الرسالة التي يتم الرد عليها (إن وجدت)
        const replyToId = messageData.replyToMessageId ? messageData.replyToMessageId : null;
        
        // إرسال الرسالة للخادم
        fetch(`/crm/conversations/<%= conversation._id %>/reply`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'X-Requested-With': 'XMLHttpRequest'
          },
          body: JSON.stringify({
            content: messageData.content,
            replyToMessageId: replyToId,
            tempId: messageData._id
          })
        })
        .then(response => {
          if (!response.ok) throw new Error('فشل إرسال الرسالة');
          return response.json();
        })
        .then(data => {
          console.log('تم إرسال الرسالة بنجاح:', data);
          
          // تحديث حالة الرسالة المؤقتة
          const tempMsgElem = document.querySelector(`.message[data-message-id="${messageData._id}"]`);
          if (tempMsgElem && data.message) {
            // تحديث رقم المعرف بالمعرف الحقيقي من الخادم
            tempMsgElem.setAttribute('data-message-id', data.message._id);
            
            // إذا كان هناك معرف خارجي
            if (data.message.externalMessageId) {
              tempMsgElem.setAttribute('data-external-id', data.message.externalMessageId);
            }
            
            // تحديث الحالة
            tempMsgElem.setAttribute('data-status', 'sent');
            
            // تحديث أيقونة الحالة
            const statusIcon = tempMsgElem.querySelector('.message-status i');
            if (statusIcon) {
              statusIcon.className = 'fas fa-check text-silver';
              statusIcon.title = 'تم الإرسال';
            }
          }
          
          // إنهاء المعالجة والانتقال للرسالة التالية
          isProcessing = false;
          
          // إعادة تمكين نموذج الإرسال
          if (sendButton) sendButton.disabled = false;
          if (sendingIndicator) sendingIndicator.style.display = 'none';
          
          // معالجة الرسالة التالية إن وجدت
          if (messageQueue.length > 0) {
            processMessageQueue();
          }
        })
        .catch(error => {
          console.error('خطأ في إرسال الرسالة:', error);
          
          // تحديث حالة الرسالة للإشارة إلى الفشل
          const tempMsgElem = document.querySelector(`.message[data-message-id="${messageData._id}"]`);
          if (tempMsgElem) {
            tempMsgElem.setAttribute('data-status', 'failed');
            
            // تحديث أيقونة الحالة
            const statusIcon = tempMsgElem.querySelector('.message-status i');
            if (statusIcon) {
              statusIcon.className = 'fas fa-exclamation-triangle text-danger';
              statusIcon.title = 'فشل الإرسال';
            }
          }
          
          // إنهاء المعالجة
          isProcessing = false;
          
          // إعادة تمكين نموذج الإرسال
          if (sendButton) sendButton.disabled = false;
          if (sendingIndicator) sendingIndicator.style.display = 'none';
          
          // عرض رسالة خطأ
          window.showToast && window.showToast('فشل في إرسال الرسالة، يرجى المحاولة مرة أخرى.', 'danger');
          
          // معالجة الرسالة التالية إن وجدت
          if (messageQueue.length > 0) {
            processMessageQueue();
          }
        });
      }
      
      // دالة لإضافة رسالة جديدة إلى واجهة المستخدم
      function addNewMessage(messageData) {
        const messageContainer = document.getElementById('messageContainer');
        if (!messageContainer) return;
        
        const messageDiv = document.createElement('div');
        messageDiv.className = `message ${messageData.direction}`;
        messageDiv.setAttribute('data-message-id', messageData._id || 'temp-' + Date.now());
        messageDiv.setAttribute('data-status', messageData.status || 'sending');
        
        if (messageData.externalMessageId) {
          messageDiv.setAttribute('data-external-id', messageData.externalMessageId);
        }
        
        let statusIcon = '';
        if (messageData.direction === 'outgoing') {
          if (messageData.status === 'sending') {
            statusIcon = '<i class="fas fa-clock text-secondary" title="جاري الإرسال..."></i>';
          } else if (messageData.status === 'sent') {
            statusIcon = '<i class="fas fa-check text-silver" title="تم الإرسال"></i>';
          } else if (messageData.status === 'delivered') {
            statusIcon = '<i class="fas fa-check-double text-silver" title="تم التسليم"></i>';
          } else if (messageData.status === 'read') {
            statusIcon = '<i class="fas fa-check-double text-primary" title="تم القراءة"></i>';
          } else if (messageData.status === 'failed') {
            statusIcon = '<i class="fas fa-exclamation-triangle text-danger" title="فشل الإرسال"></i>';
          }
        }
        
        messageDiv.innerHTML = `
          <div class="message-bubble ${messageData.direction === 'incoming' ? 'incoming-bubble' : 'outgoing-bubble'}">
            ${messageData.content}
            <div class="message-time">
              ${new Date(messageData.timestamp).toLocaleString('ar-LY')}
              ${messageData.direction === 'outgoing' ? `<span class="message-status">${statusIcon}</span>` : ''}
            </div>
          </div>
          
          <div class="message-actions">
            <button class="btn btn-sm text-muted message-action-btn reaction-btn" title="تفاعل">
              <i class="far fa-smile"></i>
            </button>
            <button class="btn btn-sm text-muted message-action-btn reply-btn" 
                    data-message-id="${messageData._id}" 
                    data-external-id="${messageData.externalMessageId || ''}" 
                    title="رد">
              <i class="fas fa-reply"></i>
            </button>
          </div>
        `;
        
        // إضافة الرسالة إلى حاوية الرسائل
        messageContainer.appendChild(messageDiv);
        
        // إضافة عنصر clear-both
        const clearDiv = document.createElement('div');
        clearDiv.className = 'clear-both';
        messageContainer.appendChild(clearDiv);
        
        // إضافة أحداث التفاعل والرد
        setupMessageActions(messageDiv);
      }
      
      // دالة لإضافة رسالة جديدة مع اقتباس رد
      function addNewMessageWithReply(messageData) {
        const messageContainer = document.getElementById('messageContainer');
        if (!messageContainer) return;
        
        const messageDiv = document.createElement('div');
        messageDiv.className = `message ${messageData.direction}`;
        messageDiv.setAttribute('data-message-id', messageData._id);
        messageDiv.setAttribute('data-status', messageData.status || 'sending');
        
        if (messageData.externalMessageId) {
          messageDiv.setAttribute('data-external-id', messageData.externalMessageId);
        }
        
        // الحصول على الرسالة المقتبسة
        let repliedContent = 'رد على رسالة';
        let repliedMessageElem = null;
        
        if (messageData.replyToMessageId) {
          repliedMessageElem = document.querySelector(`.message[data-message-id="${messageData.replyToMessageId}"]`);
          
          if (repliedMessageElem) {
            const contentElem = repliedMessageElem.querySelector('.message-bubble');
            if (contentElem) {
              repliedContent = contentElem.textContent.trim();
              
              // اقتصار طول النص
              if (repliedContent.length > 50) {
                repliedContent = repliedContent.substring(0, 50) + '...';
              }
            }
          }
        }
        
        let statusIcon = '';
        if (messageData.direction === 'outgoing') {
          if (messageData.status === 'sending') {
            statusIcon = '<i class="fas fa-clock text-secondary" title="جاري الإرسال..."></i>';
          } else if (messageData.status === 'sent') {
            statusIcon = '<i class="fas fa-check text-silver" title="تم الإرسال"></i>';
          } else if (messageData.status === 'delivered') {
            statusIcon = '<i class="fas fa-check-double text-silver" title="تم التسليم"></i>';
          } else if (messageData.status === 'read') {
            statusIcon = '<i class="fas fa-check-double text-primary" title="تم القراءة"></i>';
          } else if (messageData.status === 'failed') {
            statusIcon = '<i class="fas fa-exclamation-triangle text-danger" title="فشل الإرسال"></i>';
          }
        }
        
        messageDiv.innerHTML = `
          <div class="replied-message">
            <div class="replied-content">
              <i class="fas fa-reply"></i>
              <span>${repliedContent}</span>
            </div>
          </div>
          
          <div class="message-bubble ${messageData.direction === 'incoming' ? 'incoming-bubble' : 'outgoing-bubble'}">
            ${messageData.content}
            <div class="message-time">
              ${new Date(messageData.timestamp).toLocaleString('ar-LY')}
              ${messageData.direction === 'outgoing' ? `<span class="message-status">${statusIcon}</span>` : ''}
            </div>
          </div>
          
          <div class="message-actions">
            <button class="btn btn-sm text-muted message-action-btn reaction-btn" title="تفاعل">
              <i class="far fa-smile"></i>
            </button>
            <button class="btn btn-sm text-muted message-action-btn reply-btn" 
                    data-message-id="${messageData._id}" 
                    data-external-id="${messageData.externalMessageId || ''}" 
                    title="رد">
              <i class="fas fa-reply"></i>
            </button>
          </div>
        `;
        
        // إضافة الرسالة إلى حاوية الرسائل
        messageContainer.appendChild(messageDiv);
        
        // إضافة عنصر clear-both
        const clearDiv = document.createElement('div');
        clearDiv.className = 'clear-both';
        messageContainer.appendChild(clearDiv);
        
        // إضافة أحداث التفاعل والرد
        setupMessageActions(messageDiv);
      }
      
      // دالة لإعداد أحداث التفاعل مع الرسائل
      function setupMessageActions(messageElem) {
        if (!messageElem) return;
        
        // زر الرد
        const replyButton = messageElem.querySelector('.reply-btn');
        if (replyButton) {
          replyButton.addEventListener('click', function() {
            const messageId = this.getAttribute('data-message-id');
            const externalId = this.getAttribute('data-external-id');
            showReplyForm(messageId, externalId, messageElem);
          });
        }
        
        // زر التفاعل
        const reactionButton = messageElem.querySelector('.reaction-btn');
        if (reactionButton) {
          reactionButton.addEventListener('click', function() {
            const messageId = messageElem.getAttribute('data-message-id');
            const externalId = messageElem.getAttribute('data-external-id');
            showReactionPicker(messageId, externalId);
          });
        }
      }
      
      // إضافة أحداث للأزرار في الرسائل الموجودة
      const allMessages = document.querySelectorAll('.message');
      allMessages.forEach(message => {
        setupMessageActions(message);
      });
      
      // دالة لعرض نموذج الرد على رسالة معينة
      function showReplyForm(messageId, externalId, messageElem) {
        if (!messageElem || !messageId) return;
        
        // تخزين معرف الرسالة للرد عليها
        currentReplyToId = messageId;
        currentReplyMessageElem = messageElem;
        
        // عرض مؤشر الرد
        let replyIndicator = document.getElementById('replyIndicator');
        
        if (!replyIndicator) {
          replyIndicator = document.createElement('div');
          replyIndicator.id = 'replyIndicator';
          replyIndicator.className = 'reply-indicator alert alert-info d-flex justify-content-between align-items-center py-2 mb-2';
          
          // الحصول على محتوى الرسالة للعرض
          const messageContent = messageElem.querySelector('.message-bubble').textContent.trim().substring(0, 50);
          
          replyIndicator.innerHTML = `
            <div>
              <i class="fas fa-reply me-1"></i>
              <small>رد على: ${messageContent}${messageContent.length > 50 ? '...' : ''}</small>
            </div>
            <button type="button" class="btn btn-sm text-secondary cancel-reply-btn">
              <i class="fas fa-times"></i>
            </button>
          `;
          
          // إضافة المؤشر قبل حقل الإدخال
          if (replyForm) {
            replyForm.insertBefore(replyIndicator, replyForm.firstChild);
          }
          
          // إضافة حدث إلغاء الرد
          const cancelButton = replyIndicator.querySelector('.cancel-reply-btn');
          if (cancelButton) {
            cancelButton.addEventListener('click', resetReplyState);
          }
        } else {
          // تحديث المحتوى إذا كان موجوداً
          const messageContent = messageElem.querySelector('.message-bubble').textContent.trim().substring(0, 50);
          replyIndicator.querySelector('small').innerHTML = `رد على: ${messageContent}${messageContent.length > 50 ? '...' : ''}`;
        }
        
        // التركيز على حقل الإدخال
        if (replyMessage) {
          replyMessage.focus();
        }
      }
      
      // دالة لإعادة تعيين حالة الرد
      function resetReplyState() {
        currentReplyToId = null;
        currentReplyMessageElem = null;
        
        // إزالة مؤشر الرد إن وجد
        const replyIndicator = document.getElementById('replyIndicator');
        if (replyIndicator) {
          replyIndicator.remove();
        }
      }
      
      // دالة لعرض منتقي التفاعلات
      function showReactionPicker(messageId, externalId) {
        if (!messageId) return;
        
        // العثور على الرسالة التي سيتم إضافة التفاعل لها
        const messageElem = document.querySelector(`.message[data-message-id="${messageId}"]`);
        if (!messageElem) return;
        
        // إنشاء أو تحديث منتقي التفاعلات
        let reactionPicker = document.getElementById('reactionPicker');
        
        if (!reactionPicker) {
          reactionPicker = document.createElement('div');
          reactionPicker.id = 'reactionPicker';
          reactionPicker.className = 'reaction-picker';
          
          const reactions = ['👍', '❤️', '😂', '😮', '😢', '👏'];
          
          let buttonsHTML = '';
          reactions.forEach(emoji => {
            buttonsHTML += `<button class="reaction-emoji-btn" data-emoji="${emoji}">${emoji}</button>`;
          });
          
          reactionPicker.innerHTML = buttonsHTML;
          document.body.appendChild(reactionPicker);
          
          // إضافة أحداث للأزرار
          reactionPicker.querySelectorAll('.reaction-emoji-btn').forEach(btn => {
            btn.addEventListener('click', function() {
              const emoji = this.getAttribute('data-emoji');
              sendReaction(messageId, emoji, externalId);
              reactionPicker.remove();
            });
          });
          
          // إغلاق عند النقر في أي مكان آخر
          document.addEventListener('click', function closeReactionPicker(e) {
            if (!reactionPicker.contains(e.target) && 
                !e.target.classList.contains('reaction-btn') && 
                !e.target.closest('.reaction-btn')) {
              reactionPicker.remove();
              document.removeEventListener('click', closeReactionPicker);
            }
          });
        }
        
        // تحديد موقع منتقي التفاعلات بالنسبة للرسالة
        const reactionBtn = messageElem.querySelector('.reaction-btn');
        if (reactionBtn) {
          const rect = reactionBtn.getBoundingClientRect();
          const isRTL = document.dir === 'rtl';
          
          if (isRTL) {
            reactionPicker.style.right = `${rect.right}px`;
          } else {
            reactionPicker.style.left = `${rect.left}px`;
          }
          
          reactionPicker.style.top = `${rect.bottom + window.scrollY + 5}px`;
        }
      }
      
      // دالة لإرسال تفاعل
      function sendReaction(messageId, emoji, externalId) {
        if (!messageId || !emoji) return;
        
        // إرسال التفاعل إلى الخادم
        fetch(`/crm/conversations/<%= conversation._id %>/reaction`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'X-Requested-With': 'XMLHttpRequest'
          },
          body: JSON.stringify({
            messageId: messageId,
            externalMessageId: externalId,
            emoji: emoji,
            senderId: window.currentUserId,
            senderName: window.currentUsername
          })
        })
        .then(response => {
          if (!response.ok) throw new Error('فشل إرسال التفاعل');
          return response.json();
        })
        .then(data => {
          console.log('تم إرسال التفاعل بنجاح:', data);
          
          // إضافة التفاعل مؤقتاً للواجهة
          addReactionToMessage(messageId, emoji, window.currentUserId, window.currentUsername);
        })
        .catch(error => {
          console.error('خطأ في إرسال التفاعل:', error);
          window.showToast && window.showToast('فشل في إرسال التفاعل، يرجى المحاولة مرة أخرى.', 'danger');
        });
      }
      
      // دالة لإضافة تفاعل إلى رسالة في الواجهة
      function addReactionToMessage(messageId, emoji, userId, username) {
        const messageElem = document.querySelector(`.message[data-message-id="${messageId}"]`);
        if (!messageElem) return;
        
        // التحقق من وجود حاوية التفاعلات
        let reactionsDiv = messageElem.querySelector('.message-reactions');
        
        if (!reactionsDiv) {
          reactionsDiv = document.createElement('div');
          reactionsDiv.className = 'message-reactions';
          
          // إضافة بعد فقاعة الرسالة
          const bubbleDiv = messageElem.querySelector('.message-bubble');
          if (bubbleDiv) {
            bubbleDiv.insertAdjacentElement('afterend', reactionsDiv);
          } else {
            messageElem.appendChild(reactionsDiv);
          }
        }
        
        // إضافة التفاعل
        const reactionSpan = document.createElement('span');
        reactionSpan.className = 'reaction-emoji';
        reactionSpan.title = `تفاعل من ${username}`;
        reactionSpan.textContent = emoji;
        
        reactionsDiv.appendChild(reactionSpan);
      }
    };
    
    // تشغيل الوظيفة عند تحميل محتوى AJAX
    window.attachConversationEventListeners();
  });
</script>