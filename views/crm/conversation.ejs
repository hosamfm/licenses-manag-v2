<!DOCTYPE html>
<html lang="ar" dir="rtl">
<head>
  <%- include('../partials/_head') %>
  <title><%= title %></title>
  <!-- أنماط خاصة بصفحات CRM -->
  <style>
    .crm-container {
      display: flex;
      min-height: calc(100vh - 60px);
    }
    
    .crm-sidebar {
      width: 250px;
      background-color: #f8f9fa;
      border-left: 1px solid #dee2e6;
      padding: 20px 0;
    }
    
    .crm-content {
      flex: 1;
      padding: 20px;
      background-color: #f5f5f5;
    }
    
    .crm-sidebar-nav {
      list-style: none;
      padding: 0;
      margin: 0;
    }
    
    .crm-sidebar-nav li {
      margin-bottom: 5px;
    }
    
    .crm-sidebar-nav a {
      display: block;
      padding: 10px 20px;
      color: #6c757d;
      text-decoration: none;
      border-right: 3px solid transparent;
      transition: all 0.2s;
    }
    
    .crm-sidebar-nav a:hover {
      background-color: #f0f0f0;
      color: #495057;
      border-right-color: #6c757d;
    }
    
    .crm-sidebar-nav a.active {
      background-color: #e9ecef;
      color: #212529;
      border-right-color: #0d6efd;
    }
    
    .crm-sidebar-nav i {
      width: 20px;
      text-align: center;
      margin-left: 8px;
    }
    
    .page-title {
      color: #495057;
      margin-bottom: 25px;
      border-bottom: 1px solid #dee2e6;
      padding-bottom: 15px;
    }
    
    .message-container {
      max-height: 600px;
      overflow-y: auto;
      padding-right: 10px;
      margin-bottom: 20px;
      background-color: #fff;
      border-radius: 8px;
      box-shadow: 0 2px 5px rgba(0,0,0,0.05);
    }
    
    .message {
      margin-bottom: 15px;
      position: relative;
      max-width: 80%;
      clear: both;
    }
    
    .message-inbound {
      float: left;
    }
    
    .message-outbound {
      float: right;
    }
    
    .message-bubble {
      padding: 10px 15px;
      border-radius: 18px;
      position: relative;
      word-wrap: break-word;
    }
    
    .message-inbound .message-bubble {
      background-color: #f0f2f5;
      border-bottom-right-radius: 0;
    }
    
    .message-outbound .message-bubble {
      background-color: #e6f7ff;
      border-bottom-left-radius: 0;
    }
    
    .message-time {
      color: #aaa;
      font-size: 0.7rem;
      margin-top: 5px;
      display: block;
    }
    
    .message-status {
      margin-left: 5px;
      font-size: 0.8rem;
    }
    
    .message-internal-note {
      background-color: #fff3cd;
      border-radius: 8px;
      padding: 10px 15px;
      margin: 15px 0;
      position: relative;
      clear: both;
      border-left: 3px solid #ffc107;
      text-align: center;
    }
    
    .reply-form {
      background-color: #fff;
      border-radius: 8px;
      padding: 15px;
      box-shadow: 0 2px 5px rgba(0,0,0,0.05);
    }
    
    .conversation-info-card {
      background-color: #fff;
      border-radius: 8px;
      box-shadow: 0 2px 5px rgba(0,0,0,0.05);
      margin-bottom: 20px;
    }
    
    .status-badge {
      font-size: 0.8rem;
      padding: 5px 10px;
      border-radius: 50px;
    }
    
    .status-open {
      background-color: #d1e7dd;
      color: #0f5132;
    }
    
    .status-assigned {
      background-color: #fff3cd;
      color: #856404;
    }
    
    .status-closed {
      background-color: #f8d7da;
      color: #721c24;
    }
    
    .conversation-action-buttons {
      display: flex;
      justify-content: space-between;
      margin-top: 20px;
    }
    
    .conversation-action-buttons .btn {
      margin-left: 10px;
    }
    
    .clear-both {
      clear: both;
      width: 100%;
    }
  </style>
</head>
<body>
  <%- include('../partials/_header') %>
  
  <div class="crm-container">
    <!-- القائمة الجانبية -->
    <div class="crm-sidebar">
      <ul class="crm-sidebar-nav">
        <li>
          <a href="/crm">
            <i class="fas fa-tachometer-alt"></i>
            <span>لوحة التحكم</span>
          </a>
        </li>
        <li>
          <a href="/crm/contacts">
            <i class="fas fa-address-book"></i>
            <span>جهات الاتصال</span>
          </a>
        </li>
        <li>
          <a href="/crm/conversations" class="active">
            <i class="fas fa-comments"></i>
            <span>المحادثات</span>
          </a>
        </li>
        <li>
          <a href="/crm/conversations/my">
            <i class="fas fa-user-circle"></i>
            <span>محادثاتي</span>
          </a>
        </li>
        <li>
          <a href="/crm/stats">
            <i class="fas fa-chart-bar"></i>
            <span>الإحصائيات</span>
          </a>
        </li>
        <!-- يمكن إضافة روابط أخرى هنا في المستقبل -->
        <li class="mt-4">
          <a href="/" class="text-muted">
            <i class="fas fa-arrow-right"></i>
            <span>العودة للرئيسية</span>
          </a>
        </li>
      </ul>
    </div>
    
    <!-- المحتوى الرئيسي -->
    <div class="crm-content">
      <% if (flashMessages && flashMessages.error) { %>
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
          <%= flashMessages.error %>
          <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
      <% } %>
      
      <% if (flashMessages && flashMessages.success) { %>
        <div class="alert alert-success alert-dismissible fade show" role="alert">
          <%= flashMessages.success %>
          <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
      <% } %>
      
      <!-- شريط التنقل السريع -->
      <nav aria-label="breadcrumb">
        <ol class="breadcrumb">
          <li class="breadcrumb-item"><a href="/crm">لوحة التحكم</a></li>
          <li class="breadcrumb-item"><a href="/crm/conversations">المحادثات</a></li>
          <li class="breadcrumb-item active" aria-current="page">
            <%= conversation.customerName || conversation.phoneNumber %>
          </li>
        </ol>
      </nav>
      
      <div class="row">
        <!-- تفاصيل المحادثة والإجراءات -->
        <div class="col-lg-4">
          <div class="conversation-info-card p-3 mb-4">
            <h5 class="card-title pb-2 border-bottom mb-3">تفاصيل المحادثة</h5>
            
            <div class="mb-3">
              <strong>رقم الهاتف:</strong>
              <span dir="ltr"><%= conversation.phoneNumber %></span>
            </div>
            
            <% if (contact) { %>
              <div class="mb-3">
                <strong>جهة الاتصال:</strong>
                <a href="/crm/contacts/<%= contact._id %>"><%= contact.name %></a>
              </div>
            <% } %>
            
            <div class="mb-3">
              <strong>القناة:</strong>
              <%= conversation.channelId ? conversation.channelId.name : 'غير معروفة' %>
            </div>
            
            <div class="mb-3">
              <strong>الحالة:</strong>
              <span class="status-badge status-<%= conversation.status %>">
                <% if (conversation.status === 'open') { %>مفتوحة<% } %>
                <% if (conversation.status === 'assigned') { %>مسندة<% } %>
                <% if (conversation.status === 'closed') { %>مغلقة<% } %>
              </span>
            </div>
            
            <div class="mb-3">
              <strong>تاريخ البدء:</strong>
              <%= new Date(conversation.createdAt).toLocaleString('ar-LY') %>
            </div>
            
            <div class="mb-3">
              <strong>آخر تحديث:</strong>
              <%= new Date(conversation.lastMessageAt || conversation.updatedAt).toLocaleString('ar-LY') %>
            </div>
            
            <% if (conversation.assignedTo) { %>
              <div class="mb-3">
                <strong>مسندة إلى:</strong>
                <%= conversation.assignedTo.full_name || conversation.assignedTo.username %>
              </div>
            <% } %>
            
            <% if (conversation.notes) { %>
              <div class="mb-3">
                <strong>ملاحظات داخلية:</strong>
                <p class="p-2 bg-light rounded mt-1"><%= conversation.notes %></p>
              </div>
            <% } %>
          </div>
          
          <!-- أزرار الإجراءات -->
          <div class="conversation-action-buttons">
            <% if (conversation.status !== 'closed') { %>
              <button type="button" class="btn btn-warning" data-bs-toggle="modal" data-bs-target="#assignModal">
                <i class="fas fa-user-check me-1"></i> إسناد المحادثة
              </button>
              
              <button type="button" class="btn btn-danger" data-bs-toggle="modal" data-bs-target="#closeModal">
                <i class="fas fa-times-circle me-1"></i> إغلاق المحادثة
              </button>
            <% } else { %>
              <button type="button" class="btn btn-success" data-bs-toggle="modal" data-bs-target="#reopenModal">
                <i class="fas fa-door-open me-1"></i> إعادة فتح المحادثة
              </button>
            <% } %>
          </div>
          
          <button type="button" class="btn btn-info w-100 mt-3" data-bs-toggle="modal" data-bs-target="#addNoteModal">
            <i class="fas fa-sticky-note me-1"></i> إضافة ملاحظة داخلية
          </button>
          
          <% if (contact) { %>
            <a href="/crm/contacts/<%= contact._id %>" class="btn btn-outline-primary w-100 mt-3">
              <i class="fas fa-user me-1"></i> عرض بيانات جهة الاتصال
            </a>
          <% } else if (conversation.phoneNumber) { %>
            <a href="/crm/contacts/new?phone=<%= conversation.phoneNumber %>" class="btn btn-outline-success w-100 mt-3">
              <i class="fas fa-user-plus me-1"></i> إضافة جهة اتصال جديدة
            </a>
          <% } %>
        </div>
        
        <!-- الرسائل والرد -->
        <div class="col-lg-8">
          <div class="card mb-4">
            <div class="card-header d-flex justify-content-between align-items-center">
              <h5 class="mb-0">
                <i class="fas fa-comments me-1"></i>
                المحادثة مع <%= conversation.customerName || conversation.phoneNumber %>
              </h5>
              <span class="badge bg-primary"><%= messages.length %> رسالة</span>
            </div>
            
            <div class="card-body p-0">
              <!-- مساحة الرسائل -->
              <div class="message-container p-3">
                <% if (messages && messages.length > 0) { %>
                  <% messages.forEach(function(message, index) { %>
                    <!-- نتأكد من أن الرسائل الواردة تظهر على اليسار والصادرة على اليمين بغض النظر عن توقيت إنشائها -->
                    <div class="message <%= message.direction === 'inbound' ? 'message-inbound' : 'message-outbound' %>">
                      <div class="message-bubble">
                        <%= message.content %>
                        <div class="message-time">
                          <%= new Date(message.timestamp).toLocaleString('ar-LY') %>
                          <% if (message.status) { %>
                            <span class="message-status">
                              <% if (message.status === 'pending') { %>
                                <i class="fas fa-clock text-warning" title="في انتظار الإرسال"></i>
                              <% } else if (message.status === 'sent') { %>
                                <i class="fas fa-check text-success" title="تم الإرسال"></i>
                              <% } else if (message.status === 'failed') { %>
                                <i class="fas fa-exclamation-circle text-danger" title="فشل الإرسال"></i>
                              <% } %>
                            </span>
                          <% } %>
                        </div>
                      </div>
                    </div>
                    <div class="clear-both"></div>
                    
                    <% if (index < messages.length - 1 && 
                           new Date(messages[index+1].timestamp) - new Date(message.timestamp) > 3600000) { %>
                      <div class="message-internal-note">
                        <i class="fas fa-clock me-1"></i>
                        مرت <%= Math.round((new Date(messages[index+1].timestamp) - new Date(message.timestamp)) / 3600000) %> ساعة
                      </div>
                    <% } %>
                  <% }); %>
                <% } else { %>
                  <div class="text-center text-muted py-5">
                    <i class="fas fa-comment-dots mb-3" style="font-size: 3rem; opacity: 0.2;"></i>
                    <p>لا توجد رسائل في هذه المحادثة</p>
                  </div>
                <% } %>
              </div>
            </div>
          </div>
          
          <!-- نموذج الرد -->
          <% if (conversation.status !== 'closed') { %>
            <div class="reply-form">
              <form id="replyForm" action="/crm/conversations/<%= conversation._id %>/reply" method="POST">
                <div class="mb-3">
                  <label for="replyMessage" class="form-label">إرسال رد</label>
                  <textarea class="form-control" id="replyMessage" name="content" rows="3" required placeholder="اكتب رسالتك هنا..."></textarea>
                </div>
                <div class="d-flex justify-content-between">
                  <button type="reset" class="btn btn-outline-secondary">مسح</button>
                  <button type="submit" class="btn btn-primary">
                    <i class="fas fa-paper-plane me-1"></i> إرسال
                  </button>
                </div>
              </form>
            </div>
          <% } else { %>
            <div class="alert alert-secondary">
              <i class="fas fa-lock me-1"></i>
              هذه المحادثة مغلقة. يرجى إعادة فتحها للرد.
            </div>
          <% } %>
        </div>
      </div>
    </div>
  </div>
  
  <!-- نافذة إسناد المحادثة -->
  <div class="modal fade" id="assignModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title">إسناد المحادثة</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          <form action="/crm/conversations/<%= conversation._id %>/assign" method="POST">
            <div class="mb-3">
              <label for="assignedTo" class="form-label">اختر الموظف المسؤول</label>
              <select class="form-select" id="assignedTo" name="assignedTo" required>
                <option value="" selected disabled>-- اختر الموظف --</option>
                <!-- سيتم تعبئة هذه القائمة من خلال AJAX -->
              </select>
            </div>
            <div class="modal-footer">
              <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">إلغاء</button>
              <button type="submit" class="btn btn-primary">إسناد</button>
            </div>
          </form>
        </div>
      </div>
    </div>
  </div>
  
  <!-- نافذة إغلاق المحادثة -->
  <div class="modal fade" id="closeModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title">إغلاق المحادثة</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          <form action="/crm/conversations/<%= conversation._id %>/close" method="POST">
            <div class="mb-3">
              <label for="closeReason" class="form-label">سبب الإغلاق</label>
              <select class="form-select" id="closeReason" name="closeReason">
                <option value="completed">تم حل المشكلة</option>
                <option value="inactive">عدم تفاعل العميل</option>
                <option value="spam">رسائل غير مرغوب فيها</option>
                <option value="other">سبب آخر</option>
              </select>
            </div>
            <div class="mb-3">
              <label for="closeNote" class="form-label">ملاحظة (اختياري)</label>
              <textarea class="form-control" id="closeNote" name="closeNote" rows="3"></textarea>
            </div>
            <div class="modal-footer">
              <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">إلغاء</button>
              <button type="submit" class="btn btn-danger">إغلاق المحادثة</button>
            </div>
          </form>
        </div>
      </div>
    </div>
  </div>
  
  <!-- نافذة إعادة فتح المحادثة -->
  <div class="modal fade" id="reopenModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title">إعادة فتح المحادثة</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          <p>هل أنت متأكد أنك تريد إعادة فتح هذه المحادثة؟</p>
          <form action="/crm/conversations/<%= conversation._id %>/reopen" method="POST">
            <div class="mb-3">
              <label for="reopenNote" class="form-label">ملاحظة (اختياري)</label>
              <textarea class="form-control" id="reopenNote" name="reopenNote" rows="3"></textarea>
            </div>
            <div class="modal-footer">
              <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">إلغاء</button>
              <button type="submit" class="btn btn-success">إعادة فتح المحادثة</button>
            </div>
          </form>
        </div>
      </div>
    </div>
  </div>
  
  <!-- نافذة إضافة ملاحظة داخلية -->
  <div class="modal fade" id="addNoteModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title">إضافة ملاحظة داخلية</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          <form action="/crm/conversations/<%= conversation._id %>/note" method="POST">
            <div class="mb-3">
              <label for="noteContent" class="form-label">الملاحظة</label>
              <textarea class="form-control" id="noteContent" name="noteContent" rows="5" required placeholder="أضف ملاحظة داخلية لا يراها العميل..."></textarea>
            </div>
            <div class="modal-footer">
              <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">إلغاء</button>
              <button type="submit" class="btn btn-primary">إضافة ملاحظة</button>
            </div>
          </form>
        </div>
      </div>
    </div>
  </div>
  
  <%- include('../partials/_footer') %>
  
  <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
  <!-- إضافة مكتبة Socket.io مباشرة في صفحة المحادثة -->
  <script src="https://cdn.socket.io/4.8.1/socket.io.min.js"></script>
  
  <script>
    document.addEventListener('DOMContentLoaded', function() {
      // تهيئة Socket.io محلياً في صفحة المحادثة
      let conversationSocket;
      
      try {
        // الحصول على عنوان الخادم الحالي بدلاً من localhost
        const socketServer = window.location.hostname === 'localhost' 
          ? 'http://localhost:3001'  // استخدام localhost في بيئة التطوير
          : window.location.origin;  // استخدام نفس النطاق الحالي في بيئة الإنتاج
        
        conversationSocket = io(socketServer, {
          withCredentials: true,  // السماح بإرسال الكوكيز للمصادقة
          transports: ['websocket', 'polling']
        });
        
        // عند نجاح الاتصال
        conversationSocket.on('connect', function() {
          console.log('تم الاتصال بنجاح بـ Socket.io في صفحة المحادثة');
          
          // الانضمام إلى غرفة المحادثة
          conversationSocket.emit('join-conversation', '<%= conversation._id %>');
          
          // استقبال الرسائل الجديدة
          conversationSocket.on('new-message', function(message) {
            console.log('استلام رسالة جديدة:', message);
            
            // إضافة الرسالة الجديدة إذا كانت لهذه المحادثة
            if (message) {
              // معالجة هيكل البيانات القادمة من Socket.io لتتوافق مع هيكل دالة إضافة الرسائل
              const formattedMessage = {
                _id: message._id,
                content: message.content || '',
                // تحويل 'incoming' إلى 'inbound' و 'outgoing' إلى 'outbound'
                direction: message.direction === 'incoming' ? 'inbound' : 
                           message.direction === 'outgoing' ? 'outbound' : message.direction,
                timestamp: message.createdAt || message.timestamp || new Date(),
                mediaUrl: message.mediaUrl || '',
                mediaType: message.mediaType || null,
                conversationId: '<%= conversation._id %>'
              };
              
              console.log('الرسالة المنسقة للعرض:', formattedMessage);
              
              // إضافة الرسالة إلى واجهة المحادثة
              addMessageToChat(formattedMessage);
              showAlert('تم استلام رسالة جديدة', 'info');
            }
          });
          
          // استقبال تحديثات المحادثة
          conversationSocket.on('conversation-update', function(update) {
            console.log('تحديث المحادثة:', update);
            
            // معالجة التحديثات المختلفة
            switch (update.type) {
              case 'assigned':
                updateAssignmentStatus(update);
                break;
              case 'status_changed':
                updateConversationStatus(update.status);
                break;
              case 'note_added':
                showAlert('تم إضافة ملاحظة داخلية جديدة', 'success');
                break;
            }
          });
          
          // الاستماع لتحديثات حالة الرسائل
          conversationSocket.on('message_status_update', function(data) {
            console.log('تحديث حالة الرسالة:', data);
            
            // البحث عن الرسالة بمعرف الرسالة الخارجي
            const messageElements = document.querySelectorAll('.message[data-external-id="' + data.externalMessageId + '"]');
            
            if (messageElements.length > 0) {
              // تحديث كل الرسائل التي تحمل نفس المعرف الخارجي
              messageElements.forEach(messageElement => {
                // تحديث حالة الرسالة
                updateMessageStatus(messageElement, data.status);
              });
            } else {
              console.log('لم يتم العثور على الرسالة المراد تحديثها');
            }
          });
        });
        
        // معالجة خطأ الاتصال
        conversationSocket.on('connect_error', function(error) {
          console.error('خطأ في الاتصال بـ Socket.io:', error);
        });
        
        // مغادرة غرفة المحادثة عند مغادرة الصفحة
        window.addEventListener('beforeunload', function() {
          if (conversationSocket && conversationSocket.connected) {
            conversationSocket.emit('leave-conversation', '<%= conversation._id %>');
          }
        });
      } catch (e) {
        console.error('حدث خطأ أثناء تهيئة Socket.io في صفحة المحادثة:', e);
      }
      
      // دالة لجلب قائمة الموظفين المتاحين للإسناد
      function loadSupportUsers() {
        const selectElement = document.getElementById('assignedTo');
        if (!selectElement) return;
        
        // إضافة خيار "إلغاء الإسناد"
        const unassignOption = document.createElement('option');
        unassignOption.value = '';
        unassignOption.textContent = '-- إلغاء الإسناد --';
        selectElement.appendChild(unassignOption);
        
        // جلب قائمة الموظفين من واجهة برمجة التطبيقات
        fetch('/api/users/support')
          .then(response => {
            if (!response.ok) {
              throw new Error('فشل في جلب قائمة الموظفين');
            }
            return response.json();
          })
          .then(data => {
            // إضافة الموظفين إلى القائمة المنسدلة
            if (data.success && data.users && data.users.length > 0) {
              data.users.forEach(user => {
                const option = document.createElement('option');
                option.value = user._id;
                option.textContent = user.full_name || user.username;
                selectElement.appendChild(option);
              });
              
              // تحديد المستخدم المسند حالياً إذا وجد
              const currentAssignedUser = '<%= conversation.assignedTo ? conversation.assignedTo._id : "" %>';
              if (currentAssignedUser) {
                selectElement.value = currentAssignedUser;
              }
            } else {
              const option = document.createElement('option');
              option.disabled = true;
              option.textContent = 'لا يوجد موظفين متاحين';
              selectElement.appendChild(option);
            }
          })
          .catch(error => console.error('خطأ في جلب قائمة الموظفين:', error));
      }
      
      // تحميل الموظفين عند فتح نافذة الإسناد
      const assignModal = document.getElementById('assignModal');
      if (assignModal) {
        assignModal.addEventListener('show.bs.modal', loadSupportUsers);
      }
      
      // توابع المساعدة والوظائف الأخرى
      
      // تنسيق التاريخ
      function formatDate(date) {
        const options = {
          year: 'numeric', month: 'numeric', day: 'numeric',
          hour: '2-digit', minute: '2-digit'
        };
        return new Date(date).toLocaleString('ar-LY', options);
      }
      
      // إضافة رسالة إلى المحادثة
      function addMessageToChat(message) {
        const messagesContainer = document.querySelector('.message-container');
        if (!messagesContainer) {
          console.error('لم يتم العثور على حاوية الرسائل في الصفحة!');
          return;
        }
        
        console.log('إضافة رسالة جديدة للمحادثة:', message);
        
        // إنشاء عنصر الرسالة الجديدة
        const messageElement = document.createElement('div');
        // التحقق من اتجاه الرسالة (inbound للواردة، outbound للصادرة)
        const isOutbound = message.direction === 'outbound';
        
        // إضافة الفئات المناسبة للعنصر
        messageElement.className = `message ${isOutbound ? 'message-outbound' : 'message-inbound'}`;
        messageElement.setAttribute('data-message-id', message._id || '');
        if (message.externalMessageId) {
          messageElement.setAttribute('data-external-id', message.externalMessageId);
        }
        messageElement.setAttribute('data-status', message.status || 'sent');
        
        // التحقق من وجود محتوى الرسالة
        const messageContent = message.content || 'محتوى غير متوفر';
        
        // التحقق من وجود وقت الرسالة وتنسيقه
        const messageTime = message.timestamp ? formatDate(new Date(message.timestamp)) : formatDate(new Date());
        
        // تهيئة محتوى الرسالة
        messageElement.innerHTML = `
          <div class="message-bubble">
            ${messageContent}
            <div class="message-time">
              ${messageTime}
              ${message.direction === 'outgoing' ? '<span class="message-status"></span>' : ''}
            </div>
          </div>
        `;
        
        // إضافة فاصل واضح بعد كل رسالة
        const clearDiv = document.createElement('div');
        clearDiv.className = 'clear-both';
        
        // التحقق من وجود رسالة بنفس المعرف لتجنب التكرار
        const existingMessage = document.querySelector(`.message[data-message-id="${message._id}"]`);
        if (existingMessage && message._id) {
          console.log('الرسالة موجودة بالفعل، لن تتم إضافتها مرة أخرى:', message._id);
          return;
        }
        
        // إضافة الرسالة إلى الحاوية
        messagesContainer.appendChild(messageElement);
        messagesContainer.appendChild(clearDiv);
        
        // التمرير إلى آخر الرسائل
        messagesContainer.scrollTop = messagesContainer.scrollHeight;
        
        // إذا كانت الرسالة صادرة، قم بتعيين حالتها
        if (message.direction === 'outgoing') {
          updateMessageStatus(messageElement, message.status || 'sent');
        }
      }
      
      // دالة تحديث حالة الرسالة في واجهة المستخدم
      function updateMessageStatus(messageElement, status) {
        // التأكد من أن عنصر الرسالة هو للرسائل الصادرة فقط
        if (!messageElement.classList.contains('outgoing')) {
          return;
        }
        
        // البحث عن عنصر الحالة داخل عنصر الرسالة
        const statusElement = messageElement.querySelector('.message-status');
        if (!statusElement) {
          return;
        }
        
        // إزالة جميع أيقونات الحالة السابقة
        statusElement.innerHTML = '';
        
        // إضافة أيقونة الحالة المناسبة
        let statusIcon = '';
        let statusClass = '';
        let statusTitle = '';
        
        if (status === 'sending') {
          statusIcon = 'clock';
          statusClass = 'text-secondary';
          statusTitle = 'جاري الإرسال...';
        } else if (status === 'sent') {
          statusIcon = 'check';
          statusClass = 'text-info';
          statusTitle = 'تم الإرسال';
        } else if (status === 'delivered') {
          statusIcon = 'check-double';
          statusClass = 'text-primary';
          statusTitle = 'تم التسليم';
        } else if (status === 'read') {
          statusIcon = 'check-double';
          statusClass = 'text-success';
          statusTitle = 'تم القراءة';
        } else if (status === 'failed') {
          statusIcon = 'exclamation-triangle';
          statusClass = 'text-danger';
          statusTitle = 'فشل الإرسال';
        }
        
        // إضافة أيقونة الحالة الجديدة
        const iconElement = document.createElement('i');
        iconElement.className = `fas fa-${statusIcon} ${statusClass}`;
        iconElement.title = statusTitle;
        statusElement.appendChild(iconElement);
        
        // تحديث بيانات سمة الحالة في عنصر الرسالة
        messageElement.setAttribute('data-status', status);
      }
      
      // دالة تحديث حالة المحادثة
      function updateConversationStatus(status) {
        const statusBadge = document.getElementById('conversation-status');
        if (!statusBadge) return;
        
        if (status === 'open') {
          statusBadge.textContent = 'مفتوحة';
          statusBadge.className = 'badge bg-success';
          
          document.getElementById('close-conversation-btn')?.classList.remove('d-none');
          document.getElementById('reopen-conversation-btn')?.classList.add('d-none');
        } else if (status === 'closed') {
          statusBadge.textContent = 'مغلقة';
          statusBadge.className = 'badge bg-danger';
          
          document.getElementById('close-conversation-btn')?.classList.add('d-none');
          document.getElementById('reopen-conversation-btn')?.classList.remove('d-none');
        }
      }
      
      // دالة تحديث حالة الإسناد
      function updateAssignmentStatus(data) {
        const assignmentStatus = document.getElementById('assignment-status');
        if (!assignmentStatus) return;
        
        if (data.assignedTo) {
          fetch(`/api/users/${data.assignedTo}/info`)
            .then(response => response.json())
            .then(userData => {
              if (userData.success) {
                assignmentStatus.textContent = `مسندة إلى: ${userData.user.full_name || userData.user.username}`;
                assignmentStatus.classList.remove('text-warning');
                assignmentStatus.classList.add('text-success');
              }
            })
            .catch(error => console.error('خطأ في جلب معلومات المستخدم:', error));
        } else {
          assignmentStatus.textContent = 'غير مسندة';
          assignmentStatus.classList.remove('text-success');
          assignmentStatus.classList.add('text-warning');
        }
      }
      
      // دالة عرض تنبيه
      function showAlert(message, type = 'info') {
        const alertsContainer = document.getElementById('alerts-container') || document.createElement('div');
        if (!document.getElementById('alerts-container')) {
          alertsContainer.id = 'alerts-container';
          alertsContainer.className = 'position-fixed top-0 start-50 translate-middle-x mt-3 z-index-1050';
          document.body.appendChild(alertsContainer);
        }
        
        const alertId = 'alert-' + new Date().getTime();
        const alert = document.createElement('div');
        alert.className = `alert alert-${type} alert-dismissible fade show`;
        alert.id = alertId;
        alert.innerHTML = `
          ${message}
          <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        `;
        
        alertsContainer.appendChild(alert);
        setTimeout(() => {
          const alertElement = document.getElementById(alertId);
          if (alertElement) {
            alertElement.classList.remove('show');
            setTimeout(() => alertElement.remove(), 150);
          }
        }, 5000);
      }
      
      // إرسال نموذج الرد باستخدام AJAX
      document.addEventListener('DOMContentLoaded', function() {
        const replyForm = document.getElementById('replyForm');
        
        if (replyForm) {
          replyForm.addEventListener('submit', function(event) {
            event.preventDefault();
            
            // الحصول على قيمة الرسالة
            const messageInput = document.getElementById('replyMessage');
            const content = messageInput.value.trim();
            
            if (!content) {
              showAlert('يرجى إدخال نص الرسالة', 'warning');
              return;
            }
            
            // تعطيل زر الإرسال أثناء العملية
            const submitButton = replyForm.querySelector('button[type="submit"]');
            const originalButtonText = submitButton.innerHTML;
            submitButton.disabled = true;
            submitButton.innerHTML = '<i class="fas fa-spinner fa-spin"></i> جاري الإرسال...';
            
            // إنشاء عنصر الرسالة مؤقتًا في واجهة المستخدم
            const tempMessage = {
              _id: 'temp-' + new Date().getTime(),
              content: content,
              direction: 'outgoing',
              timestamp: new Date(),
              status: 'sending'
            };
            
            // إضافة الرسالة المؤقتة إلى المحادثة
            addMessageToChat(tempMessage);
            
            // إرسال الرسالة إلى الخادم باستخدام fetch API
            fetch(replyForm.action, {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
                'X-Requested-With': 'XMLHttpRequest'
              },
              body: JSON.stringify({ content })
            })
            .then(response => {
              if (!response.ok) {
                throw new Error('حدث خطأ أثناء إرسال الرسالة');
              }
              return response.json();
            })
            .then(data => {
              console.log('استجابة الخادم:', data);
              
              // إزالة الرسالة المؤقتة
              const tempMessageElement = document.querySelector(`.message[data-message-id="${tempMessage._id}"]`);
              if (tempMessageElement) {
                tempMessageElement.remove();
                // إزالة العنصر التالي أيضًا (وهو عنصر div.clear-both)
                const nextElement = tempMessageElement.nextElementSibling;
                if (nextElement && nextElement.classList.contains('clear-both')) {
                  nextElement.remove();
                }
              }
              
              if (data.success) {
                // إضافة الرسالة الحقيقية بعد استلام الرد من الخادم
                if (data.message) {
                  // تنسيق الرسالة بالشكل المطلوب
                  const formattedMessage = {
                    _id: data.message._id,
                    content: data.message.content,
                    direction: data.message.direction,
                    timestamp: data.message.timestamp,
                    status: data.message.status || 'sent'
                  };
                  
                  // إضافة الرسالة المستلمة من الخادم إلى المحادثة
                  addMessageToChat(formattedMessage);
                }
                
                // عرض رسالة نجاح
                showAlert('تم إرسال الرسالة بنجاح', 'success');
              } else {
                // عرض رسالة خطأ
                showAlert(data.error || 'حدث خطأ أثناء إرسال الرسالة', 'danger');
              }
            })
            .catch(error => {
              console.error('خطأ في إرسال الرسالة:', error);
              showAlert('فشل في إرسال الرسالة. يرجى المحاولة مرة أخرى.', 'danger');
            })
            .finally(() => {
              // إعادة تفعيل زر الإرسال
              submitButton.disabled = false;
              submitButton.innerHTML = originalButtonText;
              
              // مسح محتوى حقل الرسالة
              messageInput.value = '';
            });
          });
        }
      });
      
      // مسح شارة الإشعارات لهذه المحادثة عند تحميل الصفحة
      fetch(`/crm/conversations/<%= conversation._id %>/mark-as-read`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        }
      })
      .then(response => {
        if (!response.ok) {
          throw new Error(`خطأ في الاستجابة: ${response.status}`);
        }
        return response.json();
      })
      .then(data => {
        if (data.success) {
          console.log('تم تحديث حالة القراءة للمحادثة');
        } else if (data.error) {
          console.error('خطأ:', data.error);
        }
      })
      .catch(error => console.error('خطأ في تحديث حالة القراءة:', error));
      
      // التمرير إلى آخر الرسائل
      const messageContainer = document.querySelector('.message-container');
      if (messageContainer) {
        messageContainer.scrollTop = messageContainer.scrollHeight;
      }
    });
  </script>
</body>
</html>
