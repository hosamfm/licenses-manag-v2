<!DOCTYPE html>
<html lang="ar" dir="rtl">
<head>
  <%- include('../partials/_head') %>
  <title><%= title %></title>
  
  <style>
    /* تنسيقات عامة للـ CRM */
    .crm-container {
      display: flex;
      min-height: calc(100vh - 60px);
    }
    .crm-sidebar {
      width: 250px;
      background-color: #f8f9fa;
      border-left: 1px solid #dee2e6;
      padding: 20px 0;
    }
    .crm-content {
      flex: 1;
      padding: 20px;
      background-color: #f5f5f5;
    }
    .crm-sidebar-nav {
      list-style: none;
      padding: 0;
      margin: 0;
    }
    .crm-sidebar-nav li {
      margin-bottom: 5px;
    }
    .crm-sidebar-nav a {
      display: block;
      padding: 10px 20px;
      color: #6c757d;
      text-decoration: none;
      border-right: 3px solid transparent;
      transition: all 0.2s;
    }
    .crm-sidebar-nav a:hover {
      background-color: #f0f0f0;
      color: #495057;
      border-right-color: #6c757d;
    }
    .crm-sidebar-nav a.active {
      color: #007bff;
      background-color: #e9f2ff;
      border-right-color: #007bff;
    }

    /* تنسيقات واجهة المحادثة */
    .message-container {
      max-height: 450px;
      overflow-y: auto;
      padding: 15px;
      background-color: #f9f9f9;
      border-radius: 5px;
      scroll-behavior: smooth;
    }
    .message {
      margin-bottom: 15px;
      max-width: 80%;
      position: relative;
    }
    .incoming {
      float: right;
      margin-left: auto;
    }
    .outgoing {
      float: left;
      margin-right: auto;
    }
    .message-bubble {
      padding: 10px 15px;
      border-radius: 10px;
      position: relative;
      word-wrap: break-word;
      box-shadow: 0 1px 2px rgba(0,0,0,0.1);
    }
    .incoming-bubble {
      background-color: #e6f2ff;
      border-top-left-radius: 0;
      text-align: right;
    }
    .outgoing-bubble {
      background-color: #dcf8c6;
      border-top-right-radius: 0;
      text-align: left;
    }
    .message-time {
      font-size: 0.75rem;
      color: #888;
      margin-top: 5px;
      display: flex;
      align-items: center;
    }
    .incoming .message-time {
      justify-content: flex-start;
    }
    .outgoing .message-time {
      justify-content: flex-end;
    }
    .message-status {
      display: inline-block;
      margin-right: 5px;
    }
    .clear-both {
      clear: both;
      width: 100%;
      height: 1px;
    }
    .message[data-status="sending"] .message-bubble {
      opacity: 0.85;
    }
    .message[data-status="failed"] .message-bubble {
      border: 1px solid #ff4d4f;
    }
    .reply-form {
      padding: 15px;
      border-top: 1px solid #eee;
      background-color: #fff;
      border-radius: 0 0 8px 8px;
    }
    .sending-indicator {
      display: none;
      color: #007bff;
      align-items: center;
      margin-right: 10px;
      font-size: 0.9rem;
    }
    .sending-indicator i {
      margin-left: 5px;
      animation: spin 1s linear infinite;
    }
    @keyframes spin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }

    /* تنسيقات النوافذ المنبثقة */
    .modal-content {
      border-radius: 8px;
    }
    .modal-header {
      border-bottom: 1px solid #dee2e6;
    }
    .modal-footer {
      border-top: 1px solid #dee2e6;
    }

    /* زر إرسال بالإنتر */
    textarea#replyMessage {
      resize: none; /* منع تغيير حجم الحقل */
    }
    
    /* تنسيقات الردود المقتبسة */
    .replied-message {
      background-color: #f0f0f0;
      padding: 5px 10px;
      border-radius: 5px;
      margin-bottom: 5px;
    }
    .replied-content {
      font-size: 0.85rem;
      color: #666;
    }
    
    /* تنسيقات التفاعلات */
    .message-reactions {
      margin-top: 5px;
      font-size: 0.85rem;
    }
    .reaction-emoji {
      margin-right: 5px;
    }
    
    /* تنسيقات قائمة خيارات الرسالة */
    .message-actions {
      margin-top: 5px;
      font-size: 0.85rem;
    }
    .message-action-btn {
      margin-right: 10px;
    }
  </style>
</head>
<body>
  <%- include('../partials/_header') %>

  <div class="crm-container">
    <!-- القائمة الجانبية -->
    <div class="crm-sidebar">
      <ul class="crm-sidebar-nav">
        <li><a href="/crm"><i class="fas fa-tachometer-alt"></i> لوحة التحكم</a></li>
        <li><a href="/crm/contacts"><i class="fas fa-address-book"></i> جهات الاتصال</a></li>
        <li><a href="/crm/conversations" class="active"><i class="fas fa-comments"></i> المحادثات</a></li>
        <li><a href="/crm/conversations/my"><i class="fas fa-user-circle"></i> محادثاتي</a></li>
        <li><a href="/crm/stats"><i class="fas fa-chart-bar"></i> الإحصائيات</a></li>
        <li class="mt-4">
          <a href="/" class="text-muted">
            <i class="fas fa-arrow-right"></i> العودة للرئيسية
          </a>
        </li>
      </ul>
    </div>

    <!-- المحتوى الرئيسي -->
    <div class="crm-content">
      <% if (flashMessages && flashMessages.error) { %>
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
          <%= flashMessages.error %>
          <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
      <% } %>

      <% if (flashMessages && flashMessages.success) { %>
        <div class="alert alert-success alert-dismissible fade show" role="alert">
          <%= flashMessages.success %>
          <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
      <% } %>

      <!-- التنقل السريع -->
      <nav aria-label="breadcrumb">
        <ol class="breadcrumb">
          <li class="breadcrumb-item"><a href="/crm">لوحة التحكم</a></li>
          <li class="breadcrumb-item"><a href="/crm/conversations">المحادثات</a></li>
          <li class="breadcrumb-item active" aria-current="page">
            <%= conversation.customerName || conversation.phoneNumber %>
          </li>
        </ol>
      </nav>

      <div class="row">
        <!-- تفاصيل المحادثة والإجراءات -->
        <div class="col-lg-4">
          <div class="card conversation-info-card p-3 mb-4">
            <h5 class="card-title pb-2 border-bottom mb-3">تفاصيل المحادثة</h5>
            
            <div class="mb-3">
              <strong>رقم الهاتف:</strong>
              <span dir="ltr"><%= conversation.phoneNumber %></span>
            </div>

            <% if (contact) { %>
              <div class="mb-3">
                <strong>جهة الاتصال:</strong>
                <a href="/crm/contacts/<%= contact._id %>"><%= contact.name %></a>
              </div>
            <% } %>

            <div class="mb-3">
              <strong>القناة:</strong>
              <%= conversation.channelId ? conversation.channelId.name : 'غير معروفة' %>
            </div>

            <div class="mb-3">
              <strong>الحالة:</strong>
              <span class="badge bg-secondary">
                <% if (conversation.status === 'open') { %>مفتوحة<% } %>
                <% if (conversation.status === 'assigned') { %>مسندة<% } %>
                <% if (conversation.status === 'closed') { %>مغلقة<% } %>
              </span>
            </div>

            <div class="mb-3">
              <strong>تاريخ البدء:</strong>
              <%= new Date(conversation.createdAt).toLocaleString('ar-LY') %>
            </div>
            <div class="mb-3">
              <strong>آخر تحديث:</strong>
              <%= new Date(conversation.lastMessageAt || conversation.updatedAt).toLocaleString('ar-LY') %>
            </div>

            <% if (conversation.assignedTo) { %>
              <div class="mb-3">
                <strong>مسندة إلى:</strong>
                <%= conversation.assignedTo.full_name || conversation.assignedTo.username %>
              </div>
            <% } %>

            <% if (conversation.notes) { %>
              <div class="mb-3">
                <strong>ملاحظات داخلية:</strong>
                <p class="p-2 bg-light rounded mt-1"><%= conversation.notes %></p>
              </div>
            <% } %>
          </div>

          <!-- أزرار الإجراءات -->
          <div class="conversation-action-buttons mb-3">
            <% if (conversation.status !== 'closed') { %>
              <button type="button" class="btn btn-warning me-2" data-bs-toggle="modal" data-bs-target="#assignModal">
                <i class="fas fa-user-check me-1"></i> إسناد
              </button>
              <button type="button" class="btn btn-danger" data-bs-toggle="modal" data-bs-target="#closeModal">
                <i class="fas fa-times-circle me-1"></i> إغلاق
              </button>
            <% } else { %>
              <button type="button" class="btn btn-success" data-bs-toggle="modal" data-bs-target="#reopenModal">
                <i class="fas fa-door-open me-1"></i> فتح من جديد
              </button>
            <% } %>
          </div>

          <button type="button" class="btn btn-info w-100 mb-3" data-bs-toggle="modal" data-bs-target="#addNoteModal">
            <i class="fas fa-sticky-note me-1"></i> إضافة ملاحظة
          </button>

          <% if (contact) { %>
            <a href="/crm/contacts/<%= contact._id %>" class="btn btn-outline-primary w-100 mb-3">
              <i class="fas fa-user me-1"></i> عرض جهة الاتصال
            </a>
          <% } else if (conversation.phoneNumber) { %>
            <a href="/crm/contacts/new?phone=<%= conversation.phoneNumber %>" class="btn btn-outline-success w-100">
              <i class="fas fa-user-plus me-1"></i> إضافة جهة اتصال جديدة
            </a>
          <% } %>
        </div>

        <!-- الرسائل والرد -->
        <div class="col-lg-8">
          <div class="card mb-4">
            <div class="card-header d-flex justify-content-between align-items-center">
              <h5 class="mb-0">
                <i class="fas fa-comments me-1"></i> المحادثة مع <%= conversation.customerName || conversation.phoneNumber %>
              </h5>
              <span class="badge bg-primary"><%= messages.length %> رسالة</span>
            </div>
            <div class="card-body p-0">
              <!-- حاوية الرسائل -->
              <div class="message-container p-3" id="messageContainer">
                <% if (messages && messages.length > 0) { %>
                  <% messages.forEach(function(msg, index) { %>
                    <div class="message <%= msg.direction %>"
                         data-message-id="<%= msg._id %>"
                         data-status="<%= msg.status %>"
                         <% if (msg.externalMessageId) { %> data-external-id="<%= msg.externalMessageId %>" <% } %>>
                      
                      <% if (msg.replyToMessageId) { %>
                        <!-- عرض الرسالة المقتبسة في حالة وجود رد -->
                        <div class="replied-message">
                          <% const repliedMsg = messages.find(m => m.externalMessageId === msg.replyToMessageId); %>
                          <% if (repliedMsg) { %>
                            <div class="replied-content">
                              <i class="fas fa-reply"></i>
                              <span><%= repliedMsg.content.length > 50 ? repliedMsg.content.substring(0, 50) + '...' : repliedMsg.content %></span>
                            </div>
                          <% } else { %>
                            <div class="replied-content text-muted">
                              <i class="fas fa-reply"></i>
                              <span>رد على رسالة غير موجودة</span>
                            </div>
                          <% } %>
                        </div>
                      <% } %>
                      
                      <div class="message-bubble <%= msg.direction === 'incoming' ? 'incoming-bubble' : 'outgoing-bubble' %>">
                        <%= msg.content %>
                        <div class="message-time">
                          <%= new Date(msg.timestamp).toLocaleString('ar-LY') %>
                          
                          <% if (msg.direction === 'outgoing') { %>
                            <span class="message-status">
                              <% if (msg.status === 'sending') { %>
                                <i class="fas fa-clock text-secondary" title="جاري الإرسال..."></i>
                              <% } else if (msg.status === 'sent') { %>
                                <i class="fas fa-check text-info" title="تم الإرسال"></i>
                              <% } else if (msg.status === 'delivered') { %>
                                <i class="fas fa-check-double text-primary" title="تم التسليم"></i>
                              <% } else if (msg.status === 'read') { %>
                                <i class="fas fa-check-double text-success" title="تم القراءة"></i>
                              <% } else if (msg.status === 'failed') { %>
                                <i class="fas fa-exclamation-triangle text-danger" title="فشل الإرسال"></i>
                              <% } %>
                            </span>
                          <% } %>
                        </div>
                      </div>
                      
                      <!-- عرض التفاعلات على الرسالة -->
                      <% if (msg.reactions && msg.reactions.length > 0) { %>
                        <div class="message-reactions">
                          <% msg.reactions.forEach(function(reaction) { %>
                            <span class="reaction-emoji" title="تفاعل من <%= reaction.sender %>">
                              <%= reaction.emoji %>
                            </span>
                          <% }); %>
                        </div>
                      <% } %>
                      
                      <!-- قائمة خيارات الرسالة -->
                      <div class="message-actions">
                        <button class="btn btn-sm text-muted message-action-btn reaction-btn" title="تفاعل">
                          <i class="far fa-smile"></i>
                        </button>
                        <button class="btn btn-sm text-muted message-action-btn reply-btn" 
                                data-message-id="<%= msg._id %>" 
                                data-external-id="<%= msg.externalMessageId %>" 
                                title="رد">
                          <i class="fas fa-reply"></i>
                        </button>
                      </div>
                      
                    </div>
                    <div class="clear-both"></div>
                    
                    <% if (index < messages.length - 1 && 
                           new Date(messages[index+1].timestamp) - new Date(msg.timestamp) > 3600000) { %>
                      <div class="message-internal-note text-muted my-2" style="font-size: 0.85rem;">
                        <i class="fas fa-clock me-1"></i>
                        مرت <%= Math.round((new Date(messages[index+1].timestamp) - new Date(msg.timestamp)) / 3600000) %> ساعة
                      </div>
                    <% } %>
                  <% }); %>
                <% } else { %>
                  <div class="text-center text-muted py-5">
                    <i class="fas fa-comment-dots mb-3" style="font-size: 3rem; opacity: 0.2;"></i>
                    <p>لا توجد رسائل</p>
                  </div>
                <% } %>
              </div>
            </div>
          </div>

          <!-- نموذج الرد -->
          <% if (conversation.status !== 'closed') { %>
            <div class="reply-form">
              <form id="replyForm" action="/crm/conversations/<%= conversation._id %>/reply" method="POST">
                <div class="mb-3">
                  <label for="replyMessage" class="form-label">إرسال رد</label>
                  <textarea class="form-control" id="replyMessage" name="content"
                            rows="3" required placeholder="اكتب رسالتك... (Enter للإرسال)"></textarea>
                </div>
                <div class="d-flex justify-content-between align-items-center">
                  <span class="sending-indicator" id="sendingIndicator">
                    <i class="fas fa-circle-notch"></i> جاري الإرسال...
                  </span>
                  <button type="reset" class="btn btn-outline-secondary">مسح</button>
                  <button type="submit" class="btn btn-primary" id="sendButton">
                    <i class="fas fa-paper-plane me-1"></i> إرسال
                  </button>
                </div>
              </form>
            </div>
          <% } else { %>
            <div class="alert alert-secondary">
              <i class="fas fa-lock me-1"></i>
              هذه المحادثة مغلقة، لا يمكن الرد.
            </div>
          <% } %>
        </div>
      </div>
    </div>
  </div>

  <!-- نافذة إسناد المحادثة -->
  <div class="modal fade" id="assignModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title">إسناد المحادثة</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
        </div>
        <div class="modal-body">
          <form action="/crm/conversations/<%= conversation._id %>/assign" method="POST">
            <div class="mb-3">
              <label for="assignedTo" class="form-label">الموظف</label>
              <select class="form-select" id="assignedTo" name="assignedTo" required>
                <option value="" disabled selected>-- اختر الموظف --</option>
              </select>
            </div>
            <div class="modal-footer">
              <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">إغلاق</button>
              <button type="submit" class="btn btn-primary">إسناد</button>
            </div>
          </form>
        </div>
      </div>
    </div>
  </div>

  <!-- نافذة إغلاق المحادثة -->
  <div class="modal fade" id="closeModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title">إغلاق المحادثة</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
        </div>
        <div class="modal-body">
          <form action="/crm/conversations/<%= conversation._id %>/close" method="POST">
            <div class="mb-3">
              <label for="closeReason" class="form-label">سبب الإغلاق</label>
              <select class="form-select" id="closeReason" name="closeReason">
                <option value="completed">تم حل المشكلة</option>
                <option value="inactive">عدم تفاعل العميل</option>
                <option value="spam">رسائل غير مرغوب فيها</option>
                <option value="other">سبب آخر</option>
              </select>
            </div>
            <div class="mb-3">
              <label for="closeNote" class="form-label">ملاحظة (اختياري)</label>
              <textarea class="form-control" id="closeNote" name="closeNote" rows="3"></textarea>
            </div>
            <div class="modal-footer">
              <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">إغلاق</button>
              <button type="submit" class="btn btn-danger">إغلاق المحادثة</button>
            </div>
          </form>
        </div>
      </div>
    </div>
  </div>

  <!-- نافذة إعادة فتح المحادثة -->
  <div class="modal fade" id="reopenModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title">إعادة فتح المحادثة</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
        </div>
        <div class="modal-body">
          <p>هل أنت متأكد أنك تريد إعادة فتح المحادثة؟</p>
          <form action="/crm/conversations/<%= conversation._id %>/reopen" method="POST">
            <div class="mb-3">
              <label for="reopenNote" class="form-label">ملاحظة (اختياري)</label>
              <textarea class="form-control" id="reopenNote" name="reopenNote" rows="3"></textarea>
            </div>
            <div class="modal-footer">
              <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">إغلاق</button>
              <button type="submit" class="btn btn-success">إعادة فتح</button>
            </div>
          </form>
        </div>
      </div>
    </div>
  </div>

  <!-- نافذة إضافة ملاحظة داخلية -->
  <div class="modal fade" id="addNoteModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title">إضافة ملاحظة داخلية</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
        </div>
        <div class="modal-body">
          <form action="/crm/conversations/<%= conversation._id %>/note" method="POST">
            <div class="mb-3">
              <label for="noteContent" class="form-label">الملاحظة</label>
              <textarea class="form-control" id="noteContent" name="noteContent" rows="4" required></textarea>
            </div>
            <div class="modal-footer">
              <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">إغلاق</button>
              <button type="submit" class="btn btn-primary">إضافة</button>
            </div>
          </form>
        </div>
      </div>
    </div>
  </div>

  <%- include('../partials/_footer') %>

  <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
  <script src="https://cdn.socket.io/4.8.1/socket.io.min.js"></script>

  <script>
    document.addEventListener('DOMContentLoaded', function() {
      const replyForm = document.getElementById('replyForm');
      const replyMessage = document.getElementById('replyMessage');
      const sendButton = document.getElementById('sendButton');
      const sendingIndicator = document.getElementById('sendingIndicator');
      const messageContainer = document.getElementById('messageContainer');

      let socket = io();
      let conversationId = '<%= conversation._id %>';
      let replyToMessageId = null; // معرف الرسالة التي يتم الرد عليها
      let replyToInfo = null; // معلومات الرسالة المراد الرد عليها
      let isProcessing = false; // متغير لتتبع ما إذا كانت هناك عملية إرسال جارية
      let messageQueue = []; // طابور للرسائل المنتظرة للإرسال
      
      // الانضمام إلى غرفة المحادثة
      socket.emit('join-conversation', conversationId);
      
      // التمرير إلى آخر الرسائل عند التحميل
      if (messageContainer) {
        messageContainer.scrollTop = messageContainer.scrollHeight;
      }
      
      // الإرسال عند الضغط على Enter (بدون Shift)
      if (replyMessage) {
        replyMessage.addEventListener('keydown', function(e) {
          if (e.key === 'Enter' && !e.shiftKey) {
            e.preventDefault();
            submitForm();
          }
        });
      }
      
      // استماع لأحداث الرسائل الجديدة
      socket.on('new-message', function(data) {
        if (data.direction === 'incoming') {
          playMessageSound();
          addNewMessage(data);
          messageContainer.scrollTop = messageContainer.scrollHeight;
        }
      });

      // استماع لأحداث تحديث الحالة
      socket.on('message_status_update', function(data) {
        console.log('تحديث حالة الرسالة:', data);
        const msgElem = document.querySelector(`.message[data-external-id="${data.externalId}"]`);
        if (msgElem) {
          const statusElem = msgElem.querySelector('.message-status');
          if (statusElem) {
            updateStatusIcon(statusElem, data.status);
          }
          msgElem.setAttribute('data-status', data.status);
        }
      });
      
      // استماع لأحداث تحديث التفاعلات
      socket.on('message_reaction', function(data) {
        console.log('تفاعل جديد على رسالة:', data);
        const msgElem = document.querySelector(`.message[data-external-id="${data.externalId}"]`);
        if (msgElem) {
          // التحقق من وجود قسم التفاعلات
          let reactionsContainer = msgElem.querySelector('.message-reactions');
          if (!reactionsContainer) {
            reactionsContainer = document.createElement('div');
            reactionsContainer.className = 'message-reactions';
            msgElem.appendChild(reactionsContainer);
          }
          
          // إضافة التفاعل الجديد
          const reactionSpan = document.createElement('span');
          reactionSpan.className = 'reaction-emoji';
          reactionSpan.title = `تفاعل من ${data.reaction.sender}`;
          reactionSpan.textContent = data.reaction.emoji;
          
          // تحقق مما إذا كان التفاعل موجودًا بالفعل (نفس المرسل)
          const existingReaction = Array.from(reactionsContainer.querySelectorAll('.reaction-emoji')).find(
            r => r.getAttribute('data-sender') === data.reaction.sender
          );
          
          if (existingReaction) {
            existingReaction.textContent = data.reaction.emoji;
          } else {
            reactionSpan.setAttribute('data-sender', data.reaction.sender);
            reactionsContainer.appendChild(reactionSpan);
          }
        }
      });
      
      // استماع لأحداث الرد على الرسائل
      socket.on('message_reply', function(data) {
        console.log('رد جديد على رسالة:', data);
        
        // إذا كان رد وارد على رسالة أرسلناها
        if (data.message && data.replyToId) {
          // تعيين معرف الرسالة المرد عليها
          data.message.replyToId = data.replyToId;
          
          // استخدام الدالة الموجودة لإضافة رسالة مع اقتباس
          addNewMessageWithReply(data.message);
          
          // تمرير للأسفل
          messageContainer.scrollTop = messageContainer.scrollHeight;
        }
      });
      
      // إضافة رسالة مع إظهار الرسالة المقتبس منها
      function addNewMessageWithReply(messageData) {
        // إنشاء عنصر الرسالة
        const messageDiv = document.createElement('div');
        messageDiv.className = `message ${messageData.direction}`;
        messageDiv.setAttribute('data-message-id', messageData._id || 'temp-' + Date.now());
        messageDiv.setAttribute('data-status', messageData.status || 'sending');
        if (messageData.externalMessageId) {
          messageDiv.setAttribute('data-external-id', messageData.externalMessageId);
        }
        
        // إضافة قسم الاقتباس إذا كان هناك رد
        if (messageData.replyToId) {
          const originalMsgElem = document.querySelector(`.message[data-external-id="${messageData.replyToId}"]`);
          let originalContent = 'رد على رسالة غير موجودة';
          
          if (originalMsgElem) {
            const bubbleElem = originalMsgElem.querySelector('.message-bubble');
            if (bubbleElem) {
              originalContent = bubbleElem.textContent.trim();
              if (originalContent.length > 50) {
                originalContent = originalContent.substring(0, 50) + '...';
              }
            }
          }
          
          const repliedDiv = document.createElement('div');
          repliedDiv.className = 'replied-message';
          repliedDiv.innerHTML = `
            <div class="replied-content">
              <i class="fas fa-reply"></i>
              <span>${originalContent}</span>
            </div>
          `;
          messageDiv.appendChild(repliedDiv);
        }
        
        // إضافة فقاعة الرسالة
        const bubbleDiv = document.createElement('div');
        bubbleDiv.className = `message-bubble ${messageData.direction === 'incoming' ? 'incoming-bubble' : 'outgoing-bubble'}`;
        bubbleDiv.textContent = messageData.content;
        
        // إضافة الوقت والحالة
        const timeDiv = document.createElement('div');
        timeDiv.className = 'message-time';
        
        const msgDate = new Date(messageData.timestamp);
        timeDiv.textContent = msgDate.toLocaleString('ar-LY');
        
        if (messageData.direction === 'outgoing') {
          const statusSpan = document.createElement('span');
          statusSpan.className = 'message-status';
          updateStatusIcon(statusSpan, messageData.status);
          timeDiv.appendChild(statusSpan);
        }
        
        bubbleDiv.appendChild(timeDiv);
        messageDiv.appendChild(bubbleDiv);
        
        // إضافة أزرار الإجراءات
        const actionsDiv = document.createElement('div');
        actionsDiv.className = 'message-actions';
        actionsDiv.innerHTML = `
          <button class="btn btn-sm text-muted message-action-btn reaction-btn" title="تفاعل">
            <i class="far fa-smile"></i>
          </button>
          <button class="btn btn-sm text-muted message-action-btn reply-btn" 
                  data-message-id="${messageData._id}" 
                  data-external-id="${messageData.externalMessageId || ''}" 
                  title="رد">
            <i class="fas fa-reply"></i>
          </button>
        `;
        messageDiv.appendChild(actionsDiv);
        
        // إضافة للحاوية
        const clearDiv = document.createElement('div');
        clearDiv.className = 'clear-both';
        
        messageContainer.appendChild(messageDiv);
        messageContainer.appendChild(clearDiv);
        
        // إضافة أحداث للأزرار الجديدة
        setupMessageButtons(messageDiv);
      }
      
      // تعيين أحداث أزرار التفاعل والرد على كل الرسائل
      function setupMessageButtons() {
        // أزرار التفاعل
        document.querySelectorAll('.reaction-btn').forEach(btn => {
          if (!btn.hasAttribute('data-setup')) {
            btn.setAttribute('data-setup', 'true');
            btn.addEventListener('click', function() {
              const messageElem = this.closest('.message');
              if (messageElem) {
                showReactionPicker(messageElem);
              }
            });
          }
        });
        
        // أزرار الرد
        document.querySelectorAll('.reply-btn').forEach(btn => {
          if (!btn.hasAttribute('data-setup')) {
            btn.setAttribute('data-setup', 'true');
            btn.addEventListener('click', function() {
              const messageElem = this.closest('.message');
              const externalId = this.getAttribute('data-external-id');
              if (messageElem && externalId) {
                setReplyToMessage(messageElem, externalId);
              }
            });
          }
        });
      }
      
      // عند النقر على زر الرد، تعين الرسالة للرد عليها
      function setReplyToMessage(messageElem, externalId) {
        const messageBubble = messageElem.querySelector('.message-bubble');
        if (!externalId || !messageBubble) return;
        
        replyToMessageId = externalId;
        replyToInfo = {
          content: messageBubble.textContent.trim(),
          direction: messageElem.classList.contains('incoming') ? 'incoming' : 'outgoing'
        };
        
        // إظهار قسم الرد وتحديث واجهة المستخدم
        showReplyInterface();
        
        // التركيز على حقل الإدخال
        if (replyMessage) {
          replyMessage.focus();
        }
      }
      
      // إظهار واجهة الرد على رسالة
      function showReplyInterface() {
        // التحقق من وجود وإنشاء قسم معلومات الرد
        let replyInfoElem = document.getElementById('replyInfo');
        if (!replyInfoElem) {
          replyInfoElem = document.createElement('div');
          replyInfoElem.id = 'replyInfo';
          replyInfoElem.className = 'reply-info alert alert-secondary d-flex align-items-center mb-2';
          
          if (replyForm) {
            replyForm.insertBefore(replyInfoElem, replyForm.firstChild);
          }
        }
        
        // تحديث محتوى قسم معلومات الرد
        const content = replyToInfo.content.length > 40 ? replyToInfo.content.substring(0, 40) + '...' : replyToInfo.content;
        replyInfoElem.innerHTML = `
          <div class="flex-grow-1">
            <small class="d-block text-muted">ترد على:</small>
            <span>${content}</span>
          </div>
          <button type="button" class="btn-close ms-2" id="cancelReplyBtn"></button>
        `;
        
        // إضافة حدث إلغاء الرد
        document.getElementById('cancelReplyBtn').addEventListener('click', function() {
          replyToMessageId = null;
          replyToInfo = null;
          replyInfoElem.remove();
        });
      }
      
      // إظهار منتقي التفاعلات
      function showReactionPicker(messageElem) {
        const externalId = messageElem.getAttribute('data-external-id');
        if (!externalId) return;
        
        // إنشاء منتقي التفاعلات
        const picker = document.createElement('div');
        picker.className = 'reaction-picker position-absolute';
        picker.style.backgroundColor = '#fff';
        picker.style.border = '1px solid #ddd';
        picker.style.borderRadius = '8px';
        picker.style.padding = '5px';
        picker.style.boxShadow = '0 2px 10px rgba(0,0,0,0.1)';
        picker.style.zIndex = '100';
        
        // إضافة خيارات التفاعل
        const reactions = ['👍', '❤️', '😂', '😮', '😢', '🙏'];
        
        reactions.forEach(emoji => {
          const emojiBtn = document.createElement('button');
          emojiBtn.className = 'btn btn-sm emoji-btn';
          emojiBtn.style.fontSize = '1.2rem';
          emojiBtn.style.margin = '0 2px';
          emojiBtn.style.padding = '0 5px';
          emojiBtn.textContent = emoji;
          
          emojiBtn.addEventListener('click', function() {
            sendReaction(externalId, emoji);
            picker.remove();
          });
          
          picker.appendChild(emojiBtn);
        });
        
        // إضافة منتقي التفاعلات بعد عنصر الرسالة
        messageElem.style.position = 'relative';
        messageElem.appendChild(picker);
        
        // إغلاق المنتقي عند النقر في أي مكان آخر
        document.addEventListener('click', function closeReactionPicker(e) {
          if (!picker.contains(e.target) && !messageElem.querySelector('.reaction-btn').contains(e.target)) {
            picker.remove();
            document.removeEventListener('click', closeReactionPicker);
          }
        });
      }
      
      // إرسال التفاعل على رسالة
      function sendReaction(messageId, emoji) {
        fetch(`/crm/conversations/<%= conversation._id %>/react`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'X-Requested-With': 'XMLHttpRequest'
          },
          body: JSON.stringify({
            messageId,
            emoji
          })
        })
        .then(response => {
          const contentType = response.headers.get('content-type');
          if (contentType && contentType.includes('application/json')) {
            return response.json();
          }
          throw new Error('الاستجابة ليست بتنسيق JSON');
        })
        .then(data => {
          console.log('تم إرسال التفاعل بنجاح:', data);
        })
        .catch(error => {
          console.error('خطأ في إرسال التفاعل:', error);
        });
      }
      
      // إرسال النموذج
      function submitForm() {
        if (replyForm && replyMessage) {
          const content = replyMessage.value.trim();
          if (!content) return;
          
          // حفظ محتوى الرد وتفريغ صندوق الكتابة فورًا
          const messageContent = content;
          const currentReplyToMessageId = replyToMessageId;
          
          // تفريغ صندوق الكتابة فورًا
          replyMessage.value = '';
          
          // إخفاء واجهة الرد إذا كانت موجودة
          const replyInfoElem = document.getElementById('replyInfo');
          if (replyInfoElem) {
            replyInfoElem.remove();
          }
          
          // إعادة تعيين معلومات الرد
          replyToMessageId = null;
          replyToInfo = null;
          
          // إضافة الرسالة إلى الطابور
          messageQueue.push({
            content: messageContent,
            replyToMessageId: currentReplyToMessageId
          });
          
          // إرسال الرسالة الأولى في الطابور
          processMessageQueue();
        }
      }
      
      // معالجة الطابور
      function processMessageQueue() {
        if (isProcessing || messageQueue.length === 0) return;
        
        isProcessing = true;
        
        const messageData = messageQueue.shift();
        
        // إظهار مؤشر الإرسال
        if (sendingIndicator) {
          sendingIndicator.style.display = 'inline-block';
        }
        
        // إضافة رسالة مؤقتة
        const tempId = 'temp-' + Date.now();
        addTempMessage(messageData.content, tempId, messageData.replyToMessageId);
        
        // تمرير إلى آخر الرسائل
        messageContainer.scrollTop = messageContainer.scrollHeight;
        
        // الإرسال عبر AJAX
        fetch(replyForm.action, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'X-Requested-With': 'XMLHttpRequest'
          },
          body: JSON.stringify({
            content: messageData.content,
            replyToMessageId: messageData.replyToMessageId
          })
        })
        .then(response => {
          const contentType = response.headers.get('content-type');
          if (contentType && contentType.includes('application/json')) {
            return response.json();
          }
          throw new Error('الاستجابة ليست بتنسيق JSON');
        })
        .then(data => {
          console.log('تم إرسال الرد بنجاح:', data);
          
          // إزالة الرسالة المؤقتة
          const tempMsg = document.querySelector(`[data-message-id="${tempId}"]`);
          if (tempMsg) {
            tempMsg.remove();
          }
          
          // إضافة الرسالة الحقيقية مع المعرّف الصحيح
          if (data.success && data.message) {
            addNewMessage(data.message);
            messageContainer.scrollTop = messageContainer.scrollHeight;
          }
          
          // إخفاء مؤشر الإرسال
          if (sendingIndicator) {
            sendingIndicator.style.display = 'none';
          }
          
          // معالجة الرسائل المتبقية في الطابور
          isProcessing = false;
          processMessageQueue();
        })
        .catch(error => {
          console.error('خطأ في إرسال الرسالة:', error);
          
          // تحديث حالة الرسالة المؤقتة إلى فشل
          const tempMsg = document.querySelector(`[data-message-id="${tempId}"]`);
          if (tempMsg) {
            tempMsg.setAttribute('data-status', 'failed');
            const statusElem = tempMsg.querySelector('.message-status');
            if (statusElem) {
              updateStatusIcon(statusElem, 'failed');
            }
          }
          
          // إخفاء مؤشر الإرسال
          if (sendingIndicator) {
            sendingIndicator.style.display = 'none';
          }
          
          // معالجة الرسائل المتبقية في الطابور
          isProcessing = false;
          processMessageQueue();
        });
      }
      
      // إضافة رسالة مؤقتة
      function addTempMessage(content, tempId, currentReplyToId) {
        // إنشاء عنصر الرسالة
        const messageDiv = document.createElement('div');
        messageDiv.className = 'message outgoing temp-message';
        messageDiv.setAttribute('data-status', 'sending');
        messageDiv.setAttribute('data-message-id', tempId);
        
        // إضافة قسم الاقتباس إذا كان هناك رد
        if (currentReplyToId && replyToInfo) {
          const repliedDiv = document.createElement('div');
          repliedDiv.className = 'replied-message';
          repliedDiv.innerHTML = `
            <div class="replied-content">
              <i class="fas fa-reply"></i>
              <span>${replyToInfo.content.length > 40 ? replyToInfo.content.substring(0, 40) + '...' : replyToInfo.content}</span>
            </div>
          `;
          messageDiv.appendChild(repliedDiv);
        }
        
        // إنشاء فقاعة الرسالة
        const bubbleDiv = document.createElement('div');
        bubbleDiv.className = 'message-bubble outgoing-bubble';
        bubbleDiv.textContent = content;
        
        // إضافة الوقت والحالة
        const timeDiv = document.createElement('div');
        timeDiv.className = 'message-time';
        
        const now = new Date();
        timeDiv.textContent = now.toLocaleString('ar-LY');
        
        const statusSpan = document.createElement('span');
        statusSpan.className = 'message-status';
        statusSpan.innerHTML = '<i class="fas fa-clock text-secondary" title="جاري الإرسال..."></i>';
        
        timeDiv.appendChild(statusSpan);
        bubbleDiv.appendChild(timeDiv);
        messageDiv.appendChild(bubbleDiv);
        
        // إضافة للحاوية
        const clearDiv = document.createElement('div');
        clearDiv.className = 'clear-both';
        
        messageContainer.appendChild(messageDiv);
        messageContainer.appendChild(clearDiv);
      }
      
      // إضافة رسالة جديدة
      function addNewMessage(messageData) {
        // إنشاء عنصر الرسالة
        const messageDiv = document.createElement('div');
        messageDiv.className = `message ${messageData.direction}`;
        messageDiv.setAttribute('data-message-id', messageData._id || 'temp-' + Date.now());
        messageDiv.setAttribute('data-status', messageData.status || 'sending');
        if (messageData.externalMessageId) {
          messageDiv.setAttribute('data-external-id', messageData.externalMessageId);
        }
        
        // إنشاء فقاعة الرسالة
        const bubbleDiv = document.createElement('div');
        bubbleDiv.className = `message-bubble ${messageData.direction === 'incoming' ? 'incoming-bubble' : 'outgoing-bubble'}`;
        bubbleDiv.textContent = messageData.content;
        
        // إضافة الوقت والحالة
        const timeDiv = document.createElement('div');
        timeDiv.className = 'message-time';
        
        const msgDate = new Date(messageData.timestamp);
        timeDiv.textContent = msgDate.toLocaleString('ar-LY');
        
        if (messageData.direction === 'outgoing') {
          const statusSpan = document.createElement('span');
          statusSpan.className = 'message-status';
          updateStatusIcon(statusSpan, messageData.status);
          timeDiv.appendChild(statusSpan);
        }
        
        bubbleDiv.appendChild(timeDiv);
        messageDiv.appendChild(bubbleDiv);
        
        // إضافة أزرار الإجراءات
        const actionsDiv = document.createElement('div');
        actionsDiv.className = 'message-actions';
        actionsDiv.innerHTML = `
          <button class="btn btn-sm text-muted message-action-btn reaction-btn" title="تفاعل">
            <i class="far fa-smile"></i>
          </button>
          <button class="btn btn-sm text-muted message-action-btn reply-btn" 
                  data-message-id="${messageData._id}" 
                  data-external-id="${messageData.externalMessageId || ''}" 
                  title="رد">
            <i class="fas fa-reply"></i>
          </button>
        `;
        messageDiv.appendChild(actionsDiv);
        
        // إضافة للحاوية
        const clearDiv = document.createElement('div');
        clearDiv.className = 'clear-both';
        
        messageContainer.appendChild(messageDiv);
        messageContainer.appendChild(clearDiv);
        
        // إضافة أحداث للأزرار الجديدة
        setupMessageButtons();
      }
      
      // تحديث أيقونة الحالة
      function updateStatusIcon(statusElement, status) {
        let icon = '';
        switch(status) {
          case 'sending':
            icon = '<i class="fas fa-clock text-secondary" title="جاري الإرسال..."></i>';
            break;
          case 'sent':
            icon = '<i class="fas fa-check text-info" title="تم الإرسال"></i>';
            break;
          case 'delivered':
            icon = '<i class="fas fa-check-double text-primary" title="تم التسليم"></i>';
            break;
          case 'read':
            icon = '<i class="fas fa-check-double text-success" title="تم القراءة"></i>';
            break;
          case 'failed':
            icon = '<i class="fas fa-exclamation-triangle text-danger" title="فشل الإرسال"></i>';
            break;
        }
        statusElement.innerHTML = icon;
      }
      
      // تشغيل الصوت عند استلام رسالة
      function playMessageSound() {
        const sound = document.getElementById('messageSound');
        if (sound) {
          sound.currentTime = 0;
          sound.play().catch(e => console.log('خطأ في تشغيل الصوت:', e));
        }
      }
      
      // إرسال النموذج عند النقر على زر الإرسال
      if (sendButton && replyForm) {
        sendButton.addEventListener('click', function(e) {
          e.preventDefault();
          submitForm();
        });
      }
      
      // تحميل المستخدمين في نافذة الإسناد
      const assignModal = document.getElementById('assignModal');
      if (assignModal) {
        assignModal.addEventListener('show.bs.modal', function() {
          loadSupportUsers();
        });
      }
      
      // وظيفة جلب قائمة المستخدمين المتاحين للإسناد
      function loadSupportUsers() {
        const assignedToSelect = document.getElementById('assignedTo');
        if (!assignedToSelect) return;
        
        // إظهار رسالة تحميل
        assignedToSelect.innerHTML = '<option value="" disabled selected>جاري التحميل...</option>';
        
        // جلب المستخدمين من API
        fetch('/api/users/support')
          .then(response => response.json())
          .then(data => {
            if (data.success && data.users && data.users.length > 0) {
              // إضافة خيار لإلغاء الإسناد
              let options = '<option value="">-- إلغاء الإسناد --</option>';
              
              // إضافة المستخدمين للقائمة
              data.users.forEach(user => {
                const isSelected = user._id === '<%= conversation.assignedTo ? conversation.assignedTo.toString() : "" %>';
                options += `<option value="${user._id}" ${isSelected ? 'selected' : ''}>${user.full_name || user.username}</option>`;
              });
              
              assignedToSelect.innerHTML = options;
            } else {
              assignedToSelect.innerHTML = '<option value="" disabled selected>لا يوجد موظفين متاحين</option>';
            }
          })
          .catch(error => {
            console.error('خطأ في جلب المستخدمين:', error);
            assignedToSelect.innerHTML = '<option value="" disabled selected>حدث خطأ في التحميل</option>';
          });
      }
      
      // إعداد أزرار التفاعل والرد
      setupMessageButtons();
    });
  </script>

  <!-- يمكن تشغيل الصوت عند وصول رسالة incoming -->
  <audio id="messageSound" src="/sounds/new-message.mp3" preload="auto"></audio>
</body>
</html>
