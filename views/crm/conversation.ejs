<!DOCTYPE html>
<html lang="ar" dir="rtl">
<head>
  <%- include('../partials/_head') %>
  <title><%= title %></title>
  <!-- ربط ملف التنسيقات الخاص بنظام CRM -->
  <link rel="stylesheet" href="/css/crm.css">
  <!-- ربط ملف التنسيقات الخاص بصفحة المحادثة -->
  <link rel="stylesheet" href="/css/conversation.css">
</head>
<body>
  <%- include('../partials/_header') %>

  <div class="crm-container">
    <!-- القائمة الجانبية - استخدام القالب الجزئي الموحد -->
    <%- include('../partials/_crm_sidebar') %>
    
    <!-- المحتوى الرئيسي -->
    <div class="crm-content">
      <% if (flashMessages && flashMessages.error) { %>
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
          <%= flashMessages.error %>
          <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
      <% } %>

      <% if (flashMessages && flashMessages.success) { %>
        <div class="alert alert-success alert-dismissible fade show" role="alert">
          <%= flashMessages.success %>
          <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
      <% } %>

      <!-- التنقل السريع -->
      <nav aria-label="breadcrumb">
        <ol class="breadcrumb">
          <li class="breadcrumb-item"><a href="/crm">لوحة التحكم</a></li>
          <li class="breadcrumb-item"><a href="/crm/conversations">المحادثات</a></li>
          <li class="breadcrumb-item active" aria-current="page">
            <%= conversation.customerName || conversation.phoneNumber %>
          </li>
        </ol>
      </nav>

      <div class="row g-3">
        <!-- تفاصيل المحادثة والإجراءات -->
        <div class="col-lg-4">
          <div class="card conversation-info-card p-3 mb-4">
            <h5 class="card-title pb-2 border-bottom mb-3">تفاصيل المحادثة</h5>
            
            <div class="mb-3">
              <strong>رقم الهاتف:</strong>
              <span dir="ltr"><%= conversation.phoneNumber %></span>
            </div>

            <% if (contact) { %>
              <div class="mb-3">
                <strong>جهة الاتصال:</strong>
                <a href="/crm/contacts/<%= contact._id %>"><%= contact.name %></a>
              </div>
            <% } %>

            <div class="mb-3">
              <strong>القناة:</strong>
              <%= conversation.channelId ? conversation.channelId.name : 'غير معروفة' %>
            </div>

            <div class="mb-3">
              <strong>الحالة:</strong>
              <span class="badge bg-secondary">
                <% if (conversation.status === 'open') { %>مفتوحة<% } %>
                <% if (conversation.status === 'assigned') { %>مسندة<% } %>
                <% if (conversation.status === 'closed') { %>مغلقة<% } %>
              </span>
            </div>

            <div class="mb-3">
              <strong>تاريخ البدء:</strong>
              <%= new Date(conversation.createdAt).toLocaleString('ar-LY') %>
            </div>
            <div class="mb-3">
              <strong>آخر تحديث:</strong>
              <%= new Date(conversation.lastMessageAt || conversation.updatedAt).toLocaleString('ar-LY') %>
            </div>

            <% if (conversation.assignedTo) { %>
              <div class="mb-3">
                <strong>مسندة إلى:</strong>
                <%= conversation.assignedTo.full_name || conversation.assignedTo.username %>
              </div>
            <% } %>

            <% if (conversation.notes) { %>
              <div class="mb-3">
                <strong>ملاحظات داخلية:</strong>
                <p class="p-2 bg-light rounded mt-1"><%= conversation.notes %></p>
              </div>
            <% } %>
          </div>

          <!-- أزرار الإجراءات -->
          <div class="conversation-action-buttons mb-3">
            <% if (conversation.status !== 'closed') { %>
              <button type="button" class="btn btn-warning me-2" data-bs-toggle="modal" data-bs-target="#assignModal">
                <i class="fas fa-user-check me-1"></i> إسناد
              </button>
              <button type="button" class="btn btn-danger" data-bs-toggle="modal" data-bs-target="#closeModal">
                <i class="fas fa-times-circle me-1"></i> إغلاق
              </button>
            <% } else { %>
              <button type="button" class="btn btn-success" data-bs-toggle="modal" data-bs-target="#reopenModal">
                <i class="fas fa-door-open me-1"></i> فتح من جديد
              </button>
            <% } %>
          </div>

          <button type="button" class="btn btn-info w-100 mb-3" data-bs-toggle="modal" data-bs-target="#addNoteModal">
            <i class="fas fa-sticky-note me-1"></i> إضافة ملاحظة
          </button>

          <% if (contact) { %>
            <a href="/crm/contacts/<%= contact._id %>" class="btn btn-outline-primary w-100 mb-3">
              <i class="fas fa-user me-1"></i> عرض جهة الاتصال
            </a>
          <% } else if (conversation.phoneNumber) { %>
            <a href="/crm/contacts/new?phone=<%= conversation.phoneNumber %>" class="btn btn-outline-success w-100">
              <i class="fas fa-user-plus me-1"></i> إضافة جهة اتصال جديدة
            </a>
          <% } %>
        </div>

        <!-- الرسائل والرد -->
        <div class="col-lg-8 d-flex flex-column" style="height: 100%;">
          <!-- زر إظهار تفاصيل المحادثة في الهاتف المحمول -->
          <button class="btn btn-outline-secondary mb-2 d-lg-none conversation-details-toggle" type="button">
            <i class="fas fa-info-circle me-1"></i> إظهار تفاصيل المحادثة
          </button>
          
          <div class="card mb-4" style="flex: 1; display: flex; flex-direction: column;">
            <div class="card-header d-flex justify-content-between align-items-center">
              <h5 class="mb-0">
                <i class="fas fa-comments me-1"></i> المحادثة مع <%= conversation.customerName || conversation.phoneNumber %>
              </h5>
              <span class="badge bg-primary"><%= messages.length %> رسالة</span>
            </div>
            <div class="card-body p-0" style="flex: 1; display: flex; flex-direction: column;">
              <!-- حاوية الرسائل -->
              <div class="message-container" id="messageContainer">
                <% if (messages && messages.length > 0) { %>
                  <% messages.forEach(function(msg, index) { %>
                    <div class="message <%= msg.direction %>"
                         data-message-id="<%= msg._id %>"
                         data-status="<%= msg.status %>"
                         <% if (msg.externalMessageId) { %> data-external-id="<%= msg.externalMessageId %>" <% } %>>
                      
                      <% if (msg.replyToMessageId) { %>
                        <!-- عرض الرسالة المقتبسة في حالة وجود رد -->
                        <div class="replied-message">
                          <% const repliedMsg = messages.find(m => m.externalMessageId === msg.replyToMessageId); %>
                          <% if (repliedMsg) { %>
                            <div class="replied-content">
                              <i class="fas fa-reply"></i>
                              <span><%= repliedMsg.content.length > 50 ? repliedMsg.content.substring(0, 50) + '...' : repliedMsg.content %></span>
                            </div>
                          <% } else { %>
                            <div class="replied-content text-muted">
                              <i class="fas fa-reply"></i>
                              <span>رد على رسالة غير موجودة</span>
                            </div>
                          <% } %>
                        </div>
                      <% } %>
                      
                      <div class="message-bubble <%= msg.direction === 'incoming' ? 'incoming-bubble' : 'outgoing-bubble' %>">
                        <%= msg.content %>
                        <div class="message-time">
                          <%= new Date(msg.timestamp).toLocaleString('ar-LY') %>
                          
                          <% if (msg.direction === 'outgoing') { %>
                            <span class="message-status">
                              <% if (msg.status === 'sending') { %>
                                <i class="fas fa-clock text-secondary" title="جاري الإرسال..."></i>
                              <% } else if (msg.status === 'sent') { %>
                                <i class="fas fa-check text-info" title="تم الإرسال"></i>
                              <% } else if (msg.status === 'delivered') { %>
                                <i class="fas fa-check-double text-primary" title="تم التسليم"></i>
                              <% } else if (msg.status === 'read') { %>
                                <i class="fas fa-check-double text-success" title="تم القراءة"></i>
                              <% } else if (msg.status === 'failed') { %>
                                <i class="fas fa-exclamation-triangle text-danger" title="فشل الإرسال"></i>
                              <% } %>
                            </span>
                          <% } %>
                        </div>
                      </div>
                      
                      <!-- عرض التفاعلات على الرسالة -->
                      <% if (msg.reactions && msg.reactions.length > 0) { %>
                        <div class="message-reactions">
                          <% msg.reactions.forEach(function(reaction) { %>
                            <span class="reaction-emoji" title="تفاعل من <%= reaction.sender %>">
                              <%= reaction.emoji %>
                            </span>
                          <% }); %>
                        </div>
                      <% } %>
                      
                      <!-- قائمة خيارات الرسالة -->
                      <div class="message-actions">
                        <button class="btn btn-sm text-muted message-action-btn reaction-btn" title="تفاعل">
                          <i class="far fa-smile"></i>
                        </button>
                        <button class="btn btn-sm text-muted message-action-btn reply-btn" 
                                data-message-id="<%= msg._id %>" 
                                data-external-id="<%= msg.externalMessageId %>" 
                                title="رد">
                          <i class="fas fa-reply"></i>
                        </button>
                      </div>
                      
                    </div>
                    <div class="clear-both"></div>
                    
                    <% if (index < messages.length - 1 && 
                           new Date(messages[index+1].timestamp) - new Date(msg.timestamp) > 3600000) { %>
                      <div class="message-internal-note text-muted my-2" style="font-size: 0.85rem;">
                        <i class="fas fa-clock me-1"></i>
                        مرت <%= Math.round((new Date(messages[index+1].timestamp) - new Date(msg.timestamp)) / 3600000) %> ساعة
                      </div>
                    <% } %>
                  <% }); %>
                <% } else { %>
                  <div class="text-center text-muted py-5">
                    <i class="fas fa-comment-dots mb-3" style="font-size: 3rem; opacity: 0.2;"></i>
                    <p>لا توجد رسائل</p>
                  </div>
                <% } %>
              </div>
            </div>
          </div>

          <!-- نموذج الرد -->
          <% if (conversation.status !== 'closed') { %>
            <div class="reply-form">
              <form id="replyForm" action="/crm/conversations/<%= conversation._id %>/reply" method="POST">
                <div class="mb-3">
                  <label for="replyMessage" class="form-label">إرسال رد</label>
                  <textarea class="form-control" id="replyMessage" name="content"
                            rows="3" required placeholder="اكتب رسالتك... (Enter للإرسال)"></textarea>
                </div>
                <div class="d-flex justify-content-between align-items-center">
                  <span class="sending-indicator" id="sendingIndicator">
                    <i class="fas fa-circle-notch"></i> جاري الإرسال...
                  </span>
                  <button type="reset" class="btn btn-outline-secondary">مسح</button>
                  <button type="submit" class="btn btn-primary" id="sendButton">
                    <i class="fas fa-paper-plane me-1"></i> إرسال
                  </button>
                </div>
              </form>
            </div>
          <% } else { %>
            <div class="alert alert-secondary">
              <i class="fas fa-lock me-1"></i>
              هذه المحادثة مغلقة، لا يمكن الرد.
            </div>
          <% } %>
        </div>
      </div>
    </div>
  </div>

  <!-- نافذة إسناد المحادثة -->
  <div class="modal fade" id="assignModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title">إسناد المحادثة</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
        </div>
        <div class="modal-body">
          <form action="/crm/conversations/<%= conversation._id %>/assign" method="POST">
            <div class="mb-3">
              <label for="assignedTo" class="form-label">الموظف</label>
              <select class="form-select" id="assignedTo" name="assignedTo" required>
                <option value="" disabled selected>-- اختر الموظف --</option>
              </select>
            </div>
            <div class="modal-footer">
              <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">إغلاق</button>
              <button type="submit" class="btn btn-primary">إسناد</button>
            </div>
          </form>
        </div>
      </div>
    </div>
  </div>

  <!-- نافذة إغلاق المحادثة -->
  <div class="modal fade" id="closeModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title">إغلاق المحادثة</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
        </div>
        <div class="modal-body">
          <form action="/crm/conversations/<%= conversation._id %>/close" method="POST">
            <div class="mb-3">
              <label for="closeReason" class="form-label">سبب الإغلاق</label>
              <select class="form-select" id="closeReason" name="closeReason">
                <option value="completed">تم حل المشكلة</option>
                <option value="inactive">عدم تفاعل العميل</option>
                <option value="spam">رسائل غير مرغوب فيها</option>
                <option value="other">سبب آخر</option>
              </select>
            </div>
            <div class="mb-3">
              <label for="closeNote" class="form-label">ملاحظة (اختياري)</label>
              <textarea class="form-control" id="closeNote" name="closeNote" rows="3"></textarea>
            </div>
            <div class="modal-footer">
              <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">إغلاق</button>
              <button type="submit" class="btn btn-danger">إغلاق المحادثة</button>
            </div>
          </form>
        </div>
      </div>
    </div>
  </div>

  <!-- نافذة إعادة فتح المحادثة -->
  <div class="modal fade" id="reopenModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title">إعادة فتح المحادثة</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
        </div>
        <div class="modal-body">
          <p>هل أنت متأكد أنك تريد إعادة فتح المحادثة؟</p>
          <form action="/crm/conversations/<%= conversation._id %>/reopen" method="POST">
            <div class="mb-3">
              <label for="reopenNote" class="form-label">ملاحظة (اختياري)</label>
              <textarea class="form-control" id="reopenNote" name="reopenNote" rows="3"></textarea>
            </div>
            <div class="modal-footer">
              <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">إغلاق</button>
              <button type="submit" class="btn btn-success">إعادة فتح</button>
            </div>
          </form>
        </div>
      </div>
    </div>
  </div>

  <!-- نافذة إضافة ملاحظة داخلية -->
  <div class="modal fade" id="addNoteModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title">إضافة ملاحظة داخلية</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
        </div>
        <div class="modal-body">
          <form action="/crm/conversations/<%= conversation._id %>/note" method="POST">
            <div class="mb-3">
              <label for="noteContent" class="form-label">الملاحظة</label>
              <textarea class="form-control" id="noteContent" name="noteContent" rows="4" required></textarea>
            </div>
            <div class="modal-footer">
              <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">إغلاق</button>
              <button type="submit" class="btn btn-primary">إضافة</button>
            </div>
          </form>
        </div>
      </div>
    </div>
  </div>

  <%- include('../partials/_footer') %>

  <!-- سكربتات الجافاسكربت -->
  <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
  <script src="https://cdn.socket.io/4.8.1/socket.io.min.js"></script>

  <script>
    document.addEventListener('DOMContentLoaded', function() {
      const replyForm = document.getElementById('replyForm');
      const replyMessage = document.getElementById('replyMessage');
      const sendButton = document.getElementById('sendButton');
      const sendingIndicator = document.getElementById('sendingIndicator');
      const messageContainer = document.getElementById('messageContainer');

      // إعداد اتصال Socket.IO مع إرسال بيانات تعريف
      const socket = io({
        auth: {
          userId: '<%= currentUser._id %>',
          username: '<%= currentUser.username %>'
        }
      });
      
      let conversationId = '<%= conversation._id %>';
      let replyToMessageId = null; // معرف الرسالة التي يتم الرد عليها
      let replyToInfo = null; // معلومات الرسالة المراد الرد عليها
      let isProcessing = false; // متغير لتتبع ما إذا كانت هناك عملية إرسال جارية
      let messageQueue = []; // طابور للرسائل المنتظرة للإرسال
      
      // الانضمام إلى غرفة المحادثة
      socket.emit('join-conversation', conversationId);
      
      // استقبال تأكيد التفاعل
      socket.on('reaction_confirmed', function(data) {
        console.log('تم تأكيد التفاعل:', data);
        // هنا يمكن إضافة تنبيه بسيط أو تأثير مرئي يظهر نجاح التفاعل
      });
      
      // زر تبديل تفاصيل المحادثة في الهاتف المحمول
      const detailsToggleBtn = document.querySelector('.conversation-details-toggle');
      if (detailsToggleBtn) {
        detailsToggleBtn.addEventListener('click', function() {
          const row = document.querySelector('.crm-content > .row');
          row.classList.toggle('show-details');
          
          // تغيير نص الزر حسب الحالة
          if (row.classList.contains('show-details')) {
            this.innerHTML = '<i class="fas fa-times-circle me-1"></i> إخفاء تفاصيل المحادثة';
            this.classList.add('active');
          } else {
            this.innerHTML = '<i class="fas fa-info-circle me-1"></i> إظهار تفاصيل المحادثة';
            this.classList.remove('active');
          }
          
          // تمرير لأسفل بعد ظهور/إخفاء التفاصيل للتأكد من رؤية آخر الرسائل
          setTimeout(scrollToBottom, 100);
        });
      }
      
      // وظيفة للتمرير إلى أسفل الرسائل
      function scrollToBottom() {
        if (messageContainer) {
          messageContainer.scrollTop = messageContainer.scrollHeight;
        }
      }
      
      // التمرير إلى آخر الرسائل عند التحميل (مع تأخير أطول لضمان اكتمال تحميل الصفحة)
      // نحاول عدة مرات للتأكد من أن التمرير يعمل
      if (messageContainer) {
        // محاولة أولى: بعد تحميل DOM مباشرة
        scrollToBottom();
        
        // محاولة ثانية: بعد 100 ميلي ثانية
        setTimeout(scrollToBottom, 100);
        
        // محاولة ثالثة: بعد 500 ميلي ثانية
        setTimeout(scrollToBottom, 500);
        
        // محاولة رابعة: بعد ثانية واحدة (للتأكد)
        setTimeout(scrollToBottom, 1000);
        
        // استمع أيضًا لحدث load للنافذة بالكامل (للصور وغيرها)
        window.addEventListener('load', function() {
          scrollToBottom();
        });
      }
      
      // الإرسال عند الضغط على Enter (بدون Shift)
      if (replyMessage) {
        replyMessage.addEventListener('keydown', function(e) {
          if (e.key === 'Enter' && !e.shiftKey) {
            e.preventDefault();
            submitForm();
          }
        });
      }
      
      // استقبال رسالة جديدة
      socket.on('new-message', function(data) {
        if (data.direction === 'incoming') {
          playMessageSound();
          addNewMessage(data);
          messageContainer.scrollTop = messageContainer.scrollHeight;
        }
      });

      // تحديث حالة الرسالة
      socket.on('message_status_update', function(data) {
        console.log('تحديث حالة الرسالة:', data);
        const msgElem = document.querySelector(`.message[data-external-id='${data.externalId}']`); 
        if (msgElem) {
          const statusElem = msgElem.querySelector('.message-status');
          if (statusElem) {
            updateStatusIcon(statusElem, data.status);
          }
          msgElem.setAttribute('data-status', data.status);
        }
      });
      
      // تحديث تفاعلات الرسائل
      socket.on('message_reaction', function(data) {
        console.log('تفاعل جديد على رسالة:', data);
        const msgElem = document.querySelector(`.message[data-external-id='${data.externalId}']`);
        if (msgElem) {
          // التحقق من وجود قسم التفاعلات
          let reactionsContainer = msgElem.querySelector('.message-reactions');
          if (!reactionsContainer) {
            reactionsContainer = document.createElement('div');
            reactionsContainer.className = 'message-reactions';
            msgElem.appendChild(reactionsContainer);
          }
          
          // إضافة التفاعل الجديد
          const reactionSpan = document.createElement('span');
          reactionSpan.className = 'reaction-emoji';
          reactionSpan.title = `تفاعل من ${data.reaction.sender}`;
          reactionSpan.textContent = data.reaction.emoji;
          
          // التحقق ما إذا كان التفاعل نفسه (نفس المرسل) موجودًا
          const existingReaction = Array.from(reactionsContainer.querySelectorAll('.reaction-emoji')).find(
            r => r.getAttribute('data-sender') === data.reaction.sender
          );
          
          if (existingReaction) {
            existingReaction.textContent = data.reaction.emoji;
          } else {
            reactionSpan.setAttribute('data-sender', data.reaction.sender);
            reactionsContainer.appendChild(reactionSpan);
          }
        }
      });
      
      // استقبال رد على رسالة
      socket.on('message_reply', function(data) {
        console.log('رد جديد على رسالة:', data);
        
        if (data.message && data.replyToId) {
          data.message.replyToId = data.replyToId;
          const originalMsgElem = document.querySelector(`.message[data-external-id='${data.replyToId}']`);
          
          if (originalMsgElem) {
            addNewMessageWithReply(data.message);
          } else {
            // إذا لم تكن الرسالة الأصلية موجودة حاليًا في الواجهة
            const messageDiv = document.createElement('div');
            messageDiv.className = `message ${data.message.direction}`;
            messageDiv.setAttribute('data-message-id', data.message._id || 'temp-' + Date.now());
            messageDiv.setAttribute('data-status', data.message.status || 'sending');
            if (data.message.externalMessageId) {
              messageDiv.setAttribute('data-external-id', data.message.externalMessageId);
            }
            
            // قسم الاقتباس
            const repliedDiv = document.createElement('div');
            repliedDiv.className = 'replied-message';
            repliedDiv.innerHTML = `
              <div class="replied-content">
                <i class="fas fa-reply"></i>
                <span>رد على رسالة سابقة</span>
              </div>
            `;
            messageDiv.appendChild(repliedDiv);
            
            // فقاعة الرسالة
            const bubbleDiv = document.createElement('div');
            bubbleDiv.className = `message-bubble ${data.message.direction === 'incoming' ? 'incoming-bubble' : 'outgoing-bubble'}`;
            bubbleDiv.textContent = data.message.content;
            
            // الوقت والحالة
            const timeDiv = document.createElement('div');
            timeDiv.className = 'message-time';
            
            const msgDate = new Date(data.message.timestamp);
            timeDiv.textContent = msgDate.toLocaleString('ar-LY');
            
            if (data.message.direction === 'outgoing') {
              const statusSpan = document.createElement('span');
              statusSpan.className = 'message-status';
              updateStatusIcon(statusSpan, data.message.status);
              timeDiv.appendChild(statusSpan);
            }
            
            bubbleDiv.appendChild(timeDiv);
            messageDiv.appendChild(bubbleDiv);
            
            // أزرار الإجراءات
            const actionsDiv = document.createElement('div');
            actionsDiv.className = 'message-actions';
            actionsDiv.innerHTML = `
              <button class="btn btn-sm text-muted message-action-btn reaction-btn" title="تفاعل">
                <i class="far fa-smile"></i>
              </button>
              <button class="btn btn-sm text-muted message-action-btn reply-btn" 
                      data-message-id="${data.message._id}" 
                      data-external-id="${data.message.externalMessageId || ''}" 
                      title="رد">
                <i class="fas fa-reply"></i>
              </button>
            `;
            messageDiv.appendChild(actionsDiv);
            
            const clearDiv = document.createElement('div');
            clearDiv.className = 'clear-both';
            
            messageContainer.appendChild(messageDiv);
            messageContainer.appendChild(clearDiv);
            
            setupMessageButtons(messageDiv);
          }
          
          messageContainer.scrollTop = messageContainer.scrollHeight;
        }
      });
      
      // إرسال النموذج (Submit)
      function submitForm() {
        if (replyForm && replyMessage) {
          const content = replyMessage.value.trim();
          if (!content) return;
          
          const messageContent = content;
          const currentReplyToMessageId = replyToMessageId;
          
          // تفريغ النص فورًا
          replyMessage.value = '';
          
          // إخفاء معلومات الرد إن وجدت
          const replyInfoElem = document.getElementById('replyInfo');
          if (replyInfoElem) {
            replyInfoElem.remove();
          }
          
          replyToMessageId = null;
          replyToInfo = null;
          
          // إضافة الرسالة إلى طابور الإرسال
          messageQueue.push({
            content: messageContent,
            replyToMessageId: currentReplyToMessageId
          });
          
          processMessageQueue();
        }
      }
      
      // معالجة طابور الرسائل
      function processMessageQueue() {
        if (isProcessing || messageQueue.length === 0) return;
        isProcessing = true;
        
        const messageData = messageQueue.shift();
        
        // إظهار مؤشر الإرسال
        if (sendingIndicator) {
          sendingIndicator.style.display = 'inline-block';
        }
        
        // رسالة مؤقتة في الواجهة
        const tempId = 'temp-' + Date.now();
        addTempMessage(messageData.content, tempId, messageData.replyToMessageId);
        
        // تمرير لأسفل
        messageContainer.scrollTop = messageContainer.scrollHeight;
        
        // إرسال عبر Fetch
        fetch(replyForm.action, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'X-Requested-With': 'XMLHttpRequest'
          },
          body: JSON.stringify({
            content: messageData.content,
            replyToMessageId: messageData.replyToMessageId
          })
        })
        .then(response => {
          const contentType = response.headers.get('content-type');
          if (contentType && contentType.includes('application/json')) {
            return response.json();
          }
          throw new Error('الاستجابة ليست بتنسيق JSON');
        })
        .then(data => {
          console.log('تم إرسال الرد بنجاح:', data);
          
          // إزالة الرسالة المؤقتة
          const tempMsg = document.querySelector(`[data-message-id="${tempId}"]`);
          if (tempMsg) {
            tempMsg.remove();
          }
          
          // عرض الرسالة الفعلية
          if (data.success && data.message) {
            addNewMessage(data.message);
            messageContainer.scrollTop = messageContainer.scrollHeight;
          }
          
          // إخفاء المؤشر
          if (sendingIndicator) {
            sendingIndicator.style.display = 'none';
          }
          
          // تابع بقية الطابور
          isProcessing = false;
          processMessageQueue();
        })
        .catch(error => {
          console.error('خطأ في إرسال الرسالة:', error);
          
          // تحويل الرسالة المؤقتة إلى فشل
          const tempMsg = document.querySelector(`[data-message-id="${tempId}"]`);
          if (tempMsg) {
            tempMsg.setAttribute('data-status', 'failed');
            const statusElem = tempMsg.querySelector('.message-status');
            if (statusElem) {
              updateStatusIcon(statusElem, 'failed');
            }
          }
          
          if (sendingIndicator) {
            sendingIndicator.style.display = 'none';
          }
          
          isProcessing = false;
          processMessageQueue();
        });
      }
      
      // إنشاء رسالة مؤقتة
      function addTempMessage(content, tempId, currentReplyToId) {
        const messageDiv = document.createElement('div');
        messageDiv.className = 'message outgoing temp-message';
        messageDiv.setAttribute('data-status', 'sending');
        messageDiv.setAttribute('data-message-id', tempId);
        
        // إذا كان هناك رد مقتبس
        if (currentReplyToId && replyToInfo) {
          const repliedDiv = document.createElement('div');
          repliedDiv.className = 'replied-message';
          repliedDiv.innerHTML = `
            <div class="replied-content">
              <i class="fas fa-reply"></i>
              <span>${replyToInfo.content.length > 40 ? replyToInfo.content.substring(0, 40) + '...' : replyToInfo.content}</span>
            </div>
          `;
          messageDiv.appendChild(repliedDiv);
        }
        
        // فقاعة الرسالة
        const bubbleDiv = document.createElement('div');
        bubbleDiv.className = 'message-bubble outgoing-bubble';
        bubbleDiv.textContent = content;
        
        // الوقت والحالة
        const timeDiv = document.createElement('div');
        timeDiv.className = 'message-time';
        
        const now = new Date();
        timeDiv.textContent = now.toLocaleString('ar-LY');
        
        const statusSpan = document.createElement('span');
        statusSpan.className = 'message-status';
        statusSpan.innerHTML = '<i class="fas fa-clock text-secondary" title="جاري الإرسال..."></i>';
        
        timeDiv.appendChild(statusSpan);
        bubbleDiv.appendChild(timeDiv);
        messageDiv.appendChild(bubbleDiv);
        
        const clearDiv = document.createElement('div');
        clearDiv.className = 'clear-both';
        
        messageContainer.appendChild(messageDiv);
        messageContainer.appendChild(clearDiv);
      }
      
      // إضافة رسالة جديدة
      function addNewMessage(messageData) {
        const messageDiv = document.createElement('div');
        messageDiv.className = `message ${messageData.direction}`;
        messageDiv.setAttribute('data-message-id', messageData._id || 'temp-' + Date.now());
        messageDiv.setAttribute('data-status', messageData.status || 'sending');
        
        if (messageData.externalMessageId) {
          messageDiv.setAttribute('data-external-id', messageData.externalMessageId);
        }
        
        // الفقاعة
        const bubbleDiv = document.createElement('div');
        bubbleDiv.className = `message-bubble ${messageData.direction === 'incoming' ? 'incoming-bubble' : 'outgoing-bubble'}`;
        bubbleDiv.textContent = messageData.content;
        
        // الوقت والحالة
        const timeDiv = document.createElement('div');
        timeDiv.className = 'message-time';
        
        const msgDate = new Date(messageData.timestamp);
        timeDiv.textContent = msgDate.toLocaleString('ar-LY');
        
        if (messageData.direction === 'outgoing') {
          const statusSpan = document.createElement('span');
          statusSpan.className = 'message-status';
          updateStatusIcon(statusSpan, messageData.status);
          timeDiv.appendChild(statusSpan);
        }
        
        bubbleDiv.appendChild(timeDiv);
        messageDiv.appendChild(bubbleDiv);
        
        // أزرار التفاعل والرد
        const actionsDiv = document.createElement('div');
        actionsDiv.className = 'message-actions';
        actionsDiv.innerHTML = `
          <button class="btn btn-sm text-muted message-action-btn reaction-btn" title="تفاعل">
            <i class="far fa-smile"></i>
          </button>
          <button class="btn btn-sm text-muted message-action-btn reply-btn" 
                  data-message-id="${messageData._id}" 
                  data-external-id="${messageData.externalMessageId || ''}" 
                  title="رد">
            <i class="fas fa-reply"></i>
          </button>
        `;
        messageDiv.appendChild(actionsDiv);
        
        const clearDiv = document.createElement('div');
        clearDiv.className = 'clear-both';
        
        messageContainer.appendChild(messageDiv);
        messageContainer.appendChild(clearDiv);
        
        setupMessageButtons(messageDiv);
      }
      
      // تحديث أيقونة حالة الرسالة
      function updateStatusIcon(statusElement, status) {
        let icon = '';
        switch(status) {
          case 'sending':
            icon = '<i class="fas fa-clock text-secondary" title="جاري الإرسال..."></i>';
            break;
          case 'sent':
            icon = '<i class="fas fa-check text-info" title="تم الإرسال"></i>';
            break;
          case 'delivered':
            icon = '<i class="fas fa-check-double text-primary" title="تم التسليم"></i>';
            break;
          case 'read':
            icon = '<i class="fas fa-check-double text-success" title="تم القراءة"></i>';
            break;
          case 'failed':
            icon = '<i class="fas fa-exclamation-triangle text-danger" title="فشل الإرسال"></i>';
            break;
        }
        statusElement.innerHTML = icon;
      }
      
      // تشغيل الصوت عند وصول رسالة
      function playMessageSound() {
        const sound = document.getElementById('messageSound');
        if (sound) {
          sound.currentTime = 0;
          sound.play().catch(e => console.log('خطأ في تشغيل الصوت:', e));
        }
      }
      
      // إضافة رسالة جديدة مع مقتبسة
      function addNewMessageWithReply(messageData) {
        const messageDiv = document.createElement('div');
        messageDiv.className = `message ${messageData.direction}`;
        messageDiv.setAttribute('data-message-id', messageData._id || 'temp-' + Date.now());
        messageDiv.setAttribute('data-status', messageData.status || 'sending');
        
        if (messageData.externalMessageId) {
          messageDiv.setAttribute('data-external-id', messageData.externalMessageId);
        }
        
        // قسم الاقتباس
        const repliedDiv = document.createElement('div');
        repliedDiv.className = 'replied-message';
        repliedDiv.innerHTML = `
          <div class="replied-content">
            <i class="fas fa-reply"></i>
            <span>رد على رسالة سابقة</span>
          </div>
        `;
        messageDiv.appendChild(repliedDiv);
        
        // الفقاعة
        const bubbleDiv = document.createElement('div');
        bubbleDiv.className = `message-bubble ${messageData.direction === 'incoming' ? 'incoming-bubble' : 'outgoing-bubble'}`;
        bubbleDiv.textContent = messageData.content;
        
        // الوقت والحالة
        const timeDiv = document.createElement('div');
        timeDiv.className = 'message-time';
        
        const msgDate = new Date(messageData.timestamp);
        timeDiv.textContent = msgDate.toLocaleString('ar-LY');
        
        if (messageData.direction === 'outgoing') {
          const statusSpan = document.createElement('span');
          statusSpan.className = 'message-status';
          updateStatusIcon(statusSpan, messageData.status);
          timeDiv.appendChild(statusSpan);
        }
        
        bubbleDiv.appendChild(timeDiv);
        messageDiv.appendChild(bubbleDiv);
        
        // أزرار التفاعل والرد
        const actionsDiv = document.createElement('div');
        actionsDiv.className = 'message-actions';
        actionsDiv.innerHTML = `
          <button class="btn btn-sm text-muted message-action-btn reaction-btn" title="تفاعل">
            <i class="far fa-smile"></i>
          </button>
          <button class="btn btn-sm text-muted message-action-btn reply-btn"
                  data-message-id="${messageData._id}"
                  data-external-id="${messageData.externalMessageId || ''}"
                  title="رد">
            <i class="fas fa-reply"></i>
          </button>
        `;
        messageDiv.appendChild(actionsDiv);
        
        const clearDiv = document.createElement('div');
        clearDiv.className = 'clear-both';
        
        messageContainer.appendChild(messageDiv);
        messageContainer.appendChild(clearDiv);
        
        setupMessageButtons(messageDiv);
      }
      
      // إظهار نموذج الرد على رسالة محددة
      function showReplyForm(messageId, externalId, messageElem) {
        // التأكد من أن معرف الرسالة وعنصر الرسالة متوفران
        if (!messageElem || !messageId) return;
        
        // تخزين معرف الرسالة للرد عليها
        replyToMessageId = externalId || messageId;
        
        // الحصول على محتوى الرسالة المراد الرد عليها
        const messageBubble = messageElem.querySelector('.message-bubble');
        if (messageBubble) {
          const messageContent = messageBubble.textContent.trim();
          replyToInfo = {
            messageId: messageId,
            externalId: externalId,
            content: messageContent
          };
          
          // إزالة أي معلومات رد سابقة
          const existingReplyInfo = document.getElementById('replyInfo');
          if (existingReplyInfo) {
            existingReplyInfo.remove();
          }
          
          // إضافة إشارة الرد فوق مربع النص
          const replyInfoDiv = document.createElement('div');
          replyInfoDiv.id = 'replyInfo';
          replyInfoDiv.className = 'alert alert-secondary d-flex align-items-center p-2 mb-2';
          replyInfoDiv.innerHTML = `
            <div class="flex-grow-1">
              <small><i class="fas fa-reply me-1"></i> رد على: ${messageContent.length > 40 ? messageContent.substring(0, 40) + '...' : messageContent}</small>
            </div>
            <button type="button" class="btn-close btn-sm" aria-label="إلغاء الرد"></button>
          `;
          
          // إضافة الإشارة قبل مربع النص
          const formGroup = document.querySelector('.reply-form .form-group');
          if (formGroup) {
            formGroup.insertBefore(replyInfoDiv, formGroup.firstChild);
          }
          
          // إضافة حدث لزر إلغاء الرد
          const cancelButton = replyInfoDiv.querySelector('.btn-close');
          if (cancelButton) {
            cancelButton.addEventListener('click', function() {
              replyInfoDiv.remove();
              replyToMessageId = null;
              replyToInfo = null;
            });
          }
          
          // تركيز مربع النص تلقائيًا
          if (replyMessage) {
            replyMessage.focus();
          }
        }
      }
      
      // إظهار منتقي التفاعلات على الرسائل
      function showReactionPicker(messageId, externalId) {
        if (!messageId) return;
        
        // العثور على الرسالة التي سيتم إضافة التفاعل لها
        const messageElem = document.querySelector(`.message[data-message-id="${messageId}"]`) || 
                            document.querySelector(`.message[data-external-id="${externalId}"]`);
        
        if (!messageElem) return;
        
        // التحقق من وجود منتقي تفاعلات حالي وإزالته
        const existingPicker = document.querySelector('.reaction-picker');
        if (existingPicker) {
          existingPicker.remove();
        }
        
        // إنشاء منتقي التفاعلات
        const reactionPicker = document.createElement('div');
        reactionPicker.className = 'reaction-picker card shadow-sm p-2';
        reactionPicker.innerHTML = `
          <div class="d-flex justify-content-between align-items-center mb-2">
            <small class="text-muted">اختر تفاعلاً</small>
            <button type="button" class="btn-close btn-sm" aria-label="إغلاق"></button>
          </div>
          <div class="reactions-container">
            <button class="reaction-btn" data-emoji="👍">👍</button>
            <button class="reaction-btn" data-emoji="❤️">❤️</button>
            <button class="reaction-btn" data-emoji="😂">😂</button>
            <button class="reaction-btn" data-emoji="😮">😮</button>
            <button class="reaction-btn" data-emoji="😢">😢</button>
            <button class="reaction-btn" data-emoji="🙏">🙏</button>
          </div>
        `;
        
        // إضافة المنتقي بعد الرسالة
        messageElem.appendChild(reactionPicker);
        
        // إضافة أحداث لأزرار التفاعل
        const reactionButtons = reactionPicker.querySelectorAll('.reaction-btn');
        reactionButtons.forEach(btn => {
          btn.addEventListener('click', function() {
            const emoji = this.getAttribute('data-emoji');
            addReactionToMessage(messageId, externalId, emoji);
            reactionPicker.remove();
          });
        });
        
        // إضافة حدث لزر الإغلاق
        const closeButton = reactionPicker.querySelector('.btn-close');
        closeButton.addEventListener('click', function() {
          reactionPicker.remove();
        });
        
        // إضافة نمط CSS لمنتقي التفاعلات إذا لم يكن موجوداً
        if (!document.getElementById('reaction-picker-style')) {
          const style = document.createElement('style');
          style.id = 'reaction-picker-style';
          style.innerHTML = `
            .reaction-picker {
              position: absolute;
              top: 100%;
              left: 50%;
              transform: translateX(-50%);
              width: auto;
              min-width: 200px;
              z-index: 1000;
              background-color: white;
              border-radius: 8px;
              box-shadow: 0 3px 10px rgba(0, 0, 0, 0.2) !important;
            }
            .reactions-container {
              display: flex;
              justify-content: space-between;
              flex-wrap: wrap;
            }
            .reaction-picker .reaction-btn {
              border: none;
              background: none;
              font-size: 1.5rem;
              padding: 5px;
              cursor: pointer;
              border-radius: 50%;
              transition: transform 0.2s, background-color 0.2s;
            }
            .reaction-picker .reaction-btn:hover {
              transform: scale(1.2);
              background-color: #f0f0f0;
            }
          `;
          document.head.appendChild(style);
        }
      }
      
      // إضافة تفاعل إلى رسالة
      function addReactionToMessage(messageId, externalId, emoji) {
        // التحقق من وجود هذا التفاعل بالفعل
        const messageElem = document.querySelector(`.message[data-message-id="${messageId}"]`) || 
                            document.querySelector(`.message[data-external-id="${externalId}"]`);
        
        if (!messageElem) return;
        
        // البحث عن قسم التفاعلات أو إنشاؤه إذا لم يكن موجوداً
        let reactionsContainer = messageElem.querySelector('.message-reactions');
        if (!reactionsContainer) {
          reactionsContainer = document.createElement('div');
          reactionsContainer.className = 'message-reactions';
          
          // إضافة حاوية التفاعلات بعد فقاعة الرسالة
          const messageBubble = messageElem.querySelector('.message-bubble');
          if (messageBubble) {
            messageBubble.appendChild(reactionsContainer);
          }
        }
        
        // التحقق مما إذا كان التفاعل موجوداً بالفعل
        const existingReaction = reactionsContainer.querySelector(`.reaction-badge[data-emoji="${emoji}"]`);
        if (existingReaction) {
          // زيادة العداد إذا كان التفاعل موجوداً
          const counterElem = existingReaction.querySelector('.reaction-count');
          if (counterElem) {
            const currentCount = parseInt(counterElem.textContent);
            counterElem.textContent = (currentCount + 1).toString();
          }
        } else {
          // إنشاء تفاعل جديد
          const reactionBadge = document.createElement('span');
          reactionBadge.className = 'reaction-badge';
          reactionBadge.setAttribute('data-emoji', emoji);
          reactionBadge.innerHTML = `${emoji} <span class="reaction-count">1</span>`;
          reactionsContainer.appendChild(reactionBadge);
        }
        
        // إرسال التفاعل إلى الخادم (في التطبيق الفعلي)
        console.log('إرسال تفاعل:', { messageId, externalId, emoji });
        
        // هنا يمكنك إضافة شيفرة لإرسال التفاعل إلى الخادم
        if (socket) {
          socket.emit('add_reaction', {
            messageId: messageId,
            externalId: externalId,
            reaction: emoji,
            conversationId: conversationId
          });
        }
      }
      
      // تفعيل أزرار التفاعل والرد
      function setupMessageButtons(messageElem) {
        if (messageElem) {
          const replyBtn = messageElem.querySelector('.reply-btn');
          const reactionBtn = messageElem.querySelector('.reaction-btn');
          
          if (replyBtn) {
            replyBtn.addEventListener('click', function() {
              const messageId = messageElem.getAttribute('data-message-id');
              const externalId = messageElem.getAttribute('data-external-id');
              showReplyForm(messageId, externalId, messageElem);
            });
          }
          
          if (reactionBtn) {
            reactionBtn.addEventListener('click', function() {
              const messageId = messageElem.getAttribute('data-message-id');
              const externalId = messageElem.getAttribute('data-external-id');
              showReactionPicker(messageId, externalId);
            });
          }
        } else {
          // تفعيل لجميع الرسائل في الصفحة إذا لم يمرر عنصر محدد
          document.querySelectorAll('.reply-btn').forEach(btn => {
            btn.addEventListener('click', function() {
              const messageElem = this.closest('.message');
              const messageId = messageElem.getAttribute('data-message-id');
              const externalId = messageElem.getAttribute('data-external-id');
              showReplyForm(messageId, externalId, messageElem);
            });
          });
          
          document.querySelectorAll('.reaction-btn').forEach(btn => {
            btn.addEventListener('click', function() {
              const messageElem = this.closest('.message');
              const messageId = messageElem.getAttribute('data-message-id');
              const externalId = messageElem.getAttribute('data-external-id');
              showReactionPicker(messageId, externalId);
            });
          });
        }
      }

      // منع إرسال النموذج بالطريقة التقليدية واستخدام AJAX
      if (sendButton && replyForm) {
        sendButton.addEventListener('click', function(e) {
          e.preventDefault();
          submitForm();
        });
      }
      
      // عند فتح نافذة "إسناد المحادثة" (assignModal)
      const assignModal = document.getElementById('assignModal');
      if (assignModal) {
        assignModal.addEventListener('show.bs.modal', function() {
          loadSupportUsers();
        });
      }
      
      // جلب قائمة الموظفين من الـ API
      function loadSupportUsers() {
        const assignedToSelect = document.getElementById('assignedTo');
        if (!assignedToSelect) return;
        
        assignedToSelect.innerHTML = '<option value="" disabled selected>جاري التحميل...</option>';
        
        fetch('/api/users/support')
          .then(response => response.json())
          .then(data => {
            if (data.success && data.users && data.users.length > 0) {
              let options = '<option value="">-- إلغاء الإسناد --</option>';
              
              data.users.forEach(user => {
                const isSelected = user._id === '<%= conversation.assignedTo ? conversation.assignedTo.toString() : "" %>';
                options += `<option value="${user._id}" ${isSelected ? 'selected' : ''}>${user.full_name || user.username}</option>`;
              });
              
              assignedToSelect.innerHTML = options;
            } else {
              assignedToSelect.innerHTML = '<option value="" disabled selected>لا يوجد موظفين متاحين</option>';
            }
          })
          .catch(error => {
            console.error('خطأ في جلب المستخدمين:', error);
            assignedToSelect.innerHTML = '<option value="" disabled selected>حدث خطأ في التحميل</option>';
          });
      }
      
      // تفعيل الأزرار لجميع الرسائل بعد تحميل الصفحة
      setupMessageButtons();
    });
  </script>

  <!-- صوت التنبيه عند وصول رسالة -->
  <audio id="messageSound" src="/sounds/new-message.mp3" preload="auto"></audio>
</body>
</html>
