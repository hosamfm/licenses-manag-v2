<!DOCTYPE html>
<html lang="ar" dir="rtl">
<head>
  <%- include('../partials/_head') %>
  <title>المحادثات</title>
  <!-- ربط ملف التنسيقات الخاص بنظام CRM -->
  <link rel="stylesheet" href="/css/crm.css">
  <link rel="stylesheet" href="/css/conversation.css">
  <!-- إضافة مكتبة Socket.IO - مهم لوظائف المحادثات الفورية -->
  <script src="https://cdn.socket.io/4.8.1/socket.io.min.js"></script>
  
  <!-- تعريف الدوال المطلوبة عالمياً لإرسال الرسائل -->
  <script>
    // دالة إرسال الرد العالمية
    function sendReply(event) {
      if (event) event.preventDefault();
      
      const replyMessage = document.getElementById('replyMessage');
      const sendButton = document.getElementById('sendButton');
      const sendingIndicator = document.getElementById('sendingIndicator');
      const conversationId = document.getElementById('conversationId')?.value;
      
      // التحقق من وجود العناصر
      if (!replyMessage || !sendButton || !sendingIndicator || !conversationId) {
        console.error('عناصر النموذج غير متوفرة:', { 
          replyMessage: !!replyMessage, 
          sendButton: !!sendButton,
          sendingIndicator: !!sendingIndicator,
          conversationId: conversationId 
        });
        return;
      }
      
      // التحقق من الإدخال
      if (!replyMessage.value.trim()) {
        alert('يرجى كتابة نص الرسالة');
        return;
      }
      
      // تعطيل الزر وإظهار مؤشر التحميل
      sendButton.disabled = true;
      sendingIndicator.style.display = 'inline-block';
      
      // إرسال الرسالة للخادم
      fetch(`/crm/conversations/${conversationId}/reply`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'X-Requested-With': 'XMLHttpRequest'
        },
        body: JSON.stringify({
          content: replyMessage.value.trim(),
          replyToMessageId: window.currentReplyToId || null
        })
      })
      .then(response => {
        if (!response.ok) throw new Error('فشل إرسال الرسالة');
        return response.json();
      })
      .then(data => {
        console.log('تم إرسال الرسالة بنجاح:', data);
        
        // مسح النص من النموذج
        replyMessage.value = '';
        
        // إعادة تمكين زر الإرسال وإخفاء المؤشر
        sendButton.disabled = false;
        sendingIndicator.style.display = 'none';
        
        // إزالة مؤشر الرد إن وجد
        const replyIndicator = document.getElementById('replyIndicator');
        if (replyIndicator) replyIndicator.remove();
        
        // إعادة تعيين متغير الرد
        window.currentReplyToId = null;
        
        // إضافة الرسالة المرسلة للمحادثة
        if (data.message) {
          window.addMessageToConversation(data.message);
        }
        
        // تحديث قائمة المحادثات
        refreshConversationsList();
      })
      .catch(error => {
        console.error('خطأ في إرسال الرسالة:', error);
        
        // إعادة تمكين زر الإرسال وإخفاء المؤشر
        sendButton.disabled = false;
        sendingIndicator.style.display = 'none';
        
        // عرض رسالة خطأ
        window.showToast && window.showToast('فشل في إرسال الرسالة، يرجى المحاولة مرة أخرى.', 'danger');
      });
    }
    
    // متغير عالمي للرد على رسالة محددة
    window.currentReplyToId = null;
  </script>
</head>
<body>

  <%- include('../partials/_header') %>

  <div class="crm-container">
    <!-- الشريط الجانبي الموحد -->
    <%- include('../partials/_crm_sidebar') %>

    <!-- المحتوى الرئيسي -->
    <div class="crm-content">

      <!-- رسائل فلاش إن وجدت -->
      <% if (flashMessages && flashMessages.error) { %>
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
          <%= flashMessages.error %>
          <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
      <% } %>
      <% if (flashMessages && flashMessages.success) { %>
        <div class="alert alert-success alert-dismissible fade show" role="alert">
          <%= flashMessages.success %>
          <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
      <% } %>

      <div class="row">

        <!-- العمود الأيمن: قائمة المحادثات -->
        <div class="col-lg-4">
          <h5 class="mb-3">قائمة المحادثات</h5>
          <% if (conversations && conversations.length > 0) { %>
            <div class="list-group" id="conversationList">
              <% conversations.forEach(function(conv) { %>
                <button type="button"
                        class="list-group-item list-group-item-action conversation-item"
                        data-conversation-id="<%= conv._id %>">
                  <div class="d-flex justify-content-between">
                    <strong><%= conv.customerName || conv.phoneNumber %></strong>
                    <% if (conv.unreadCount > 0) { %>
                      <span class="badge bg-danger ms-2"><%= conv.unreadCount %></span>
                    <% } %>
                  </div>
                  <div class="mt-1">
                    <% if (conv.lastMessage) { %>
                      <small class="text-muted">
                        <%= conv.lastMessage.direction === 'incoming' ? 'رسالة واردة: ' : 'رسالة صادرة: ' %>
                        <%= conv.lastMessage.content
                             ? conv.lastMessage.content.substring(0, 30)
                             : 'محتوى وسائط' %>...
                      </small>
                    <% } else { %>
                      <small class="text-muted">لا توجد رسائل</small>
                    <% } %>
                  </div>
                  <small class="text-muted d-block">
                    <%= new Date(conv.lastMessageAt || conv.updatedAt).toLocaleString('ar-LY') %>
                  </small>
                </button>
              <% }) %>
            </div>
          <% } else { %>
            <div class="alert alert-info">لا توجد محادثات متاحة.</div>
          <% } %>
        </div>

        <!-- العمود الأيسر: سيتم حقن تفاصيل المحادثة فيه بواسطة AJAX -->
        <div class="col-lg-8" id="conversationDetailsContainer">
          <div class="alert alert-secondary">
            اختر محادثة من القائمة لعرض تفاصيلها...
          </div>
        </div>

      </div>
    </div>
  </div>

  <%- include('../partials/_footer') %>

  <!-- عنصر الصوت للتنبيه عند وصول رسالة جديدة -->
  <audio id="messageSound" src="/sounds/new-message.mp3" preload="auto"></audio>

  <!-- سكربت جافاسكربت لجلب التفاصيل بالـ AJAX -->
  <script>
    document.addEventListener('DOMContentLoaded', function() {
      // معرف المحادثة الحالية (إذا تم تحديدها)
      let currentConversationId = null;
      
      // تكوين وتهيئة الويب سوكت
      const socket = io();
      
      // الاستماع لأحداث الاتصال
      socket.on('connect', function() {
        console.log('تم الاتصال بالخادم');
      });
      
      // الاستماع لأحداث قطع الاتصال
      socket.on('disconnect', function() {
        console.log('انقطع الاتصال بالخادم');
      });
      
      // الاستماع لأحداث الرسائل الجديدة
      socket.on('new-message', function(data) {
        console.log('رسالة جديدة وصلت:', data);
        
        // تشغيل صوت الإشعار للرسائل الواردة
        if (data.direction === 'incoming') {
          playNotificationSound();
        }
        
        // تحديث قائمة المحادثات
        refreshConversationsList();
        
        // إذا كانت الرسالة تخص المحادثة المفتوحة حالياً، أضفها للمحادثة
        if (data.conversationId === currentConversationId) {
          window.addMessageToConversation(data);
        }
      });
      
      // الاستماع لأحداث تحديث حالة الرسائل
      socket.on('message-status-update', function(data) {
        console.log('تحديث حالة الرسالة:', data);
        
        // إذا كانت الرسالة تنتمي إلى المحادثة الحالية، تحديث حالتها في الواجهة
        if (data.conversationId === currentConversationId) {
          updateMessageStatus(data.messageId, data.status);
        }
      });
      
      // الاستماع لأحداث الردود الجديدة
      socket.on('message_reply', function(data) {
        console.log('رد جديد على رسالة:', data);
        
        // إذا كانت الرسالة تنتمي إلى المحادثة الحالية، تحديث الواجهة
        if (data.conversationId === currentConversationId) {
          refreshConversationDetails();
        } else {
          // تحديث قائمة المحادثات فقط
          refreshConversationsList();
        }
      });
      
      // الاستماع لأحداث التفاعلات الجديدة
      socket.on('message_reaction', function(data) {
        console.log('تفاعل جديد على رسالة:', data);
        
        // إذا كانت الرسالة تنتمي إلى المحادثة الحالية، تحديث الواجهة
        if (data.conversationId === currentConversationId) {
          refreshConversationDetails();
        }
      });
      
      // دالة لتشغيل صوت عند وصول رسائل جديدة
      function playNotificationSound() {
        try {
          const sound = document.getElementById('messageSound');
          if (sound) {
            sound.currentTime = 0;
            sound.play().catch(err => console.error('خطأ تشغيل الصوت:', err));
          }
        } catch (error) {
          console.error('خطأ في تشغيل صوت الإشعار:', error);
        }
      }
      
      // دالة لتحديث حالة الرسالة في الواجهة
      function updateMessageStatus(messageId, newStatus) {
        if (!messageId || !newStatus) return;
        
        // إيجاد الرسالة في الواجهة
        const messageElem = document.querySelector(`.message[data-message-id="${messageId}"]`);
        if (!messageElem) return;
        
        // تحديث السمة
        messageElem.setAttribute('data-status', newStatus);
        
        // تحديث أيقونة الحالة
        const statusIcon = messageElem.querySelector('.message-status i');
        if (statusIcon) {
          // إزالة جميع الأصناف
          statusIcon.className = '';
          
          // إضافة الصنف المناسب للحالة الجديدة
          if (newStatus === 'sending') {
            statusIcon.className = 'fas fa-clock text-secondary';
            statusIcon.title = 'جاري الإرسال...';
          } else if (newStatus === 'sent') {
            statusIcon.className = 'fas fa-check text-silver';
            statusIcon.title = 'تم الإرسال';
          } else if (newStatus === 'delivered') {
            statusIcon.className = 'fas fa-check-double text-silver';
            statusIcon.title = 'تم التسليم';
          } else if (newStatus === 'read') {
            statusIcon.className = 'fas fa-check-double text-primary';
            statusIcon.title = 'تم القراءة';
          } else if (newStatus === 'failed') {
            statusIcon.className = 'fas fa-exclamation-triangle text-danger';
            statusIcon.title = 'فشل الإرسال';
          }
        }
      }
      
      // تحديث قائمة المحادثات بدون إعادة تحميل الصفحة
      function refreshConversationsList() {
        fetch('/crm/conversations/ajax/list', {
          method: 'GET',
          headers: {
            'X-Requested-With': 'XMLHttpRequest'
          }
        })
        .then(response => {
          if (!response.ok) throw new Error('HTTP error ' + response.status);
          return response.json();
        })
        .then(data => {
          if (data.success && data.conversations && data.conversations.length > 0) {
            // إعادة بناء قائمة المحادثات
            const conversationList = document.getElementById('conversationList');
            if (conversationList) {
              // حفظ معرف المحادثة النشطة حالياً (إن وجدت)
              const activeConversation = conversationList.querySelector('.active');
              const activeId = activeConversation ? activeConversation.getAttribute('data-conversation-id') : null;
              
              // إعادة بناء القائمة
              let html = '';
              data.conversations.forEach(conv => {
                const isActive = (conv._id === activeId) ? 'active' : '';
                const hasBadge = (conv.unreadCount > 0) ? `<span class="badge bg-danger ms-2">${conv.unreadCount}</span>` : '';
                
                html += `
                  <button type="button"
                          class="list-group-item list-group-item-action conversation-item ${isActive}"
                          data-conversation-id="${conv._id}">
                    <div class="d-flex justify-content-between">
                      <strong>${conv.customerName || conv.phoneNumber}</strong>
                      ${hasBadge}
                    </div>
                    <div class="mt-1">
                      ${conv.lastMessage ? 
                        `<small class="text-muted">
                          ${conv.lastMessage.direction === 'incoming' ? 'رسالة واردة: ' : 'رسالة صادرة: '}
                          ${conv.lastMessage.content.substring(0, 30)}${conv.lastMessage.content.length > 30 ? '...' : ''}
                        </small>` : 
                        '<small class="text-muted">لا توجد رسائل</small>'
                      }
                    </div>
                  </button>
                `;
              });
              
              // تحديث المحتوى
              conversationList.innerHTML = html;
              
              // إعادة تعيين مستمعات الأحداث
              attachConversationItemsEvents();
            }
          }
        })
        .catch(error => {
          console.error('خطأ في تحديث قائمة المحادثات:', error);
          // في حالة الخطأ 404، قد يكون المستخدم في الواجهة القديمة - نقوم بإعادة التوجيه إلى الواجهة الجديدة
          if (error.message.includes('404')) {
            window.location.href = '/crm/conversations/ajax';
          }
        });
      }
      
      // دالة لتعيين مستمعات أحداث لعناصر قائمة المحادثات
      function attachConversationItemsEvents() {
        const conversationList = document.getElementById('conversationList');
        if (!conversationList) return;
        
        // إضافة مستمع الأحداث للنقر على كل محادثة
        const items = conversationList.querySelectorAll('.conversation-item');
        items.forEach(item => {
          item.addEventListener('click', function() {
            // إزالة الفئة النشطة من جميع العناصر
            items.forEach(i => i.classList.remove('active'));
            
            // إضافة الفئة النشطة للعنصر المحدد
            this.classList.add('active');
            
            // الحصول على معرف المحادثة
            const convId = this.getAttribute('data-conversation-id');
            if (!convId) return;
            
            // تحديث معرف المحادثة الحالية
            currentConversationId = convId;
            
            // إضافة المعرف إلى تاريخ المتصفح
            if (history.pushState) {
              const url = `/crm/conversations/${convId}`;
              history.pushState({ conversationId: convId }, '', url);
            }
            
            // استدعاء AJAX لتحميل التفاصيل
            loadConversationDetails(convId);
          });
        });
      }
      
      // تحميل تفاصيل المحادثة
      function loadConversationDetails(conversationId) {
        if (!conversationId) return;
        
        const detailsContainer = document.getElementById('conversationDetailsContainer');
        if (!detailsContainer) return;
        
        // عرض مؤشر التحميل
        detailsContainer.innerHTML = `
          <div class="text-center p-5">
            <div class="spinner-border text-primary" role="status">
              <span class="visually-hidden">جاري التحميل...</span>
            </div>
            <p class="mt-2">جاري تحميل المحادثة...</p>
          </div>
        `;
        
        // طلب التفاصيل من الخادم
        fetch(`/crm/conversations/ajax/details/${conversationId}`, {
          method: 'GET',
          headers: {
            'X-Requested-With': 'XMLHttpRequest'
          }
        })
        .then(response => {
          if (!response.ok) throw new Error('HTTP error ' + response.status);
          return response.text();
        })
        .then(html => {
          // تحديث المحتوى
          detailsContainer.innerHTML = html;
          
          // تحديث معرف المحادثة الحالية
          currentConversationId = conversationId;
          
          // الانضمام إلى غرفة المحادثة عبر الويب سوكت
          socket.emit('join-conversation', conversationId);
          console.log('تم الانضمام إلى غرفة المحادثة:', conversationId);
          
          // التمرير لأسفل آخر الرسائل
          setTimeout(() => {
            const msgContainer = document.getElementById('messageContainer');
            if (msgContainer) {
              msgContainer.scrollTop = msgContainer.scrollHeight;
            }
          }, 100);

          // تعيين المستمعين للتفاعلات مع الرسائل بعد تحميل المحادثة
          window.attachConversationEventListeners && window.attachConversationEventListeners();
        })
        .catch(err => {
          console.error('خطأ في جلب تفاصيل المحادثة:', err);
          detailsContainer.innerHTML = `
            <div class="alert alert-danger">
              حدث خطأ أثناء جلب تفاصيل المحادثة: ${err.message}
            </div>
          `;
        });
      }

      // تحديث تفاصيل المحادثة (إعادة تحميل)
      window.refreshConversationDetails = function() {
        if (currentConversationId) {
          loadConversationDetails(currentConversationId);
        }
      };
      
      // دالة لإضافة رسالة جديدة للمحادثة الحالية
      window.addMessageToConversation = function(messageData) {
        if (!messageData || !currentConversationId) return;
        
        // التأكد من أن الرسالة تخص المحادثة الحالية
        if (messageData.conversationId !== currentConversationId) return;
        
        // الحصول على حاوية الرسائل
        const messageContainer = document.getElementById('messageContainer');
        if (!messageContainer) return;
        
        // تنسيق التاريخ
        const messageDate = new Date(messageData.createdAt || Date.now());
        const formattedDate = messageDate.toLocaleString('ar-LY');
        
        // إنشاء عنصر الرسالة
        const messageElem = document.createElement('div');
        messageElem.className = `message ${messageData.direction}`;
        messageElem.setAttribute('data-message-id', messageData._id);
        messageElem.setAttribute('data-status', messageData.status || 'sent');
        
        if (messageData.externalId) {
          messageElem.setAttribute('data-external-id', messageData.externalId);
        }
        
        // تحديد HTML الخاص بالرسالة بناءً على نوع الرسالة ونوع المحتوى
        let messageHTML = '';
        const isMedia = messageData.mediaType && messageData.mediaType !== 'text';
        
        if (isMedia) {
          // هنا يمكن إضافة عرض مناسب لنوع الوسائط
          messageHTML = `
            <div class="message-bubble media-message">
              <div class="media-content">
                <i class="fas fa-paperclip me-1"></i>
                محتوى وسائط (${messageData.mediaType})
              </div>
            </div>
          `;
        } else {
          // رسالة نصية عادية
          messageHTML = `
            <div class="message-bubble">
              ${messageData.content || ''}
            </div>
          `;
        }
        
        // إضافة معلومات الرسالة والأزرار
        messageHTML += `
          <div class="message-info">
            <small class="message-time">${formattedDate}</small>
            ${messageData.direction === 'outgoing' ? 
              `<span class="message-status">
                <i class="${messageData.status === 'sent' ? 'fas fa-check' : 
                          messageData.status === 'delivered' ? 'fas fa-check-double text-silver' : 
                          messageData.status === 'read' ? 'fas fa-check-double text-primary' : 
                          'fas fa-clock'}" title="${messageData.status || 'مرسلة'}"></i>
              </span>` : ''}
          </div>
          <div class="message-actions">
            <button type="button" class="btn btn-sm reply-btn" 
                    data-message-id="${messageData._id}" 
                    ${messageData.externalId ? `data-external-id="${messageData.externalId}"` : ''}>
              <i class="fas fa-reply"></i>
            </button>
            <!-- يمكن إضافة أزرار إضافية هنا مثل زر التفاعل إلخ -->
          </div>
        `;
        
        // تعيين المحتوى
        messageElem.innerHTML = messageHTML;
        
        // إضافة الرسالة لحاوية الرسائل
        messageContainer.appendChild(messageElem);
        
        // تمرير المحادثة لأسفل
        messageContainer.scrollTop = messageContainer.scrollHeight;
        
        // إضافة مستمعات الأحداث للرسالة الجديدة
        setupMessageActions(messageElem);
      }
      
      // دالة لإعداد مستمعات الأحداث للرسائل
      function setupMessageActions(messageElem) {
        if (!messageElem) return;
        
        // زر الرد
        const replyButton = messageElem.querySelector('.reply-btn');
        if (replyButton) {
          replyButton.addEventListener('click', function() {
            const messageId = this.getAttribute('data-message-id');
            const externalId = this.getAttribute('data-external-id');
            showReplyForm(messageId, externalId, messageElem);
          });
        }
        
        // يمكن إضافة مستمعات أحداث أخرى مثل زر التفاعل، إخفاء الرسالة، إلخ
      }
      
      // دالة لعرض نموذج الرد على رسالة معينة
      function showReplyForm(messageId, externalId, messageElem) {
        if (!messageElem || !messageId) return;
        
        // تخزين معرف الرسالة للرد عليها
        window.currentReplyToId = messageId;
        
        // عرض مؤشر الرد
        let replyIndicator = document.getElementById('replyIndicator');
        
        if (!replyIndicator) {
          replyIndicator = document.createElement('div');
          replyIndicator.id = 'replyIndicator';
          replyIndicator.className = 'reply-indicator alert alert-info d-flex justify-content-between align-items-center py-2 mb-2';
          
          // الحصول على محتوى الرسالة للعرض
          const messageContent = messageElem.querySelector('.message-bubble').textContent.trim().substring(0, 50);
          
          replyIndicator.innerHTML = `
            <div>
              <i class="fas fa-reply me-1"></i>
              <small>رد على: ${messageContent}${messageContent.length > 50 ? '...' : ''}</small>
            </div>
            <button type="button" class="btn btn-sm text-secondary cancel-reply-btn">
              <i class="fas fa-times"></i>
            </button>
          `;
          
          // إضافة المؤشر قبل حقل الإدخال
          const replyForm = document.getElementById('replyForm');
          if (replyForm) {
            replyForm.insertBefore(replyIndicator, replyForm.firstChild);
          }
          
          // إضافة حدث إلغاء الرد
          const cancelButton = replyIndicator.querySelector('.cancel-reply-btn');
          if (cancelButton) {
            cancelButton.addEventListener('click', function() {
              replyIndicator.remove();
              window.currentReplyToId = null;
            });
          }
        } else {
          // تحديث المحتوى إذا كان موجوداً
          const messageContent = messageElem.querySelector('.message-bubble').textContent.trim().substring(0, 50);
          replyIndicator.querySelector('small').innerHTML = `رد على: ${messageContent}${messageContent.length > 50 ? '...' : ''}`;
        }
        
        // التركيز على حقل الإدخال
        const replyMessage = document.getElementById('replyMessage');
        if (replyMessage) {
          replyMessage.focus();
        }
      }
      
      // عرض إشعارات للمستخدم
      window.showToast = function(message, type = 'info') {
        // التأكد من وجود حاوية الإشعارات
        let toastContainer = document.getElementById('toast-container');
        if (!toastContainer) {
          toastContainer = document.createElement('div');
          toastContainer.id = 'toast-container';
          toastContainer.className = 'toast-container position-fixed bottom-0 end-0 p-3';
          document.body.appendChild(toastContainer);
        }
        
        // إنشاء ID فريد للإشعار
        const toastId = 'toast-' + Date.now();
        
        // إنشاء عنصر الإشعار
        const toastHTML = `
          <div id="${toastId}" class="toast" role="alert" aria-live="assertive" aria-atomic="true">
            <div class="toast-header">
              <span class="bg-${type} toast-icon me-2"></span>
              <strong class="me-auto">${type === 'info' ? 'معلومات' : type === 'success' ? 'نجاح' : 'تنبيه'}</strong>
              <small>${new Date().toLocaleTimeString('ar-LY')}</small>
              <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="إغلاق"></button>
            </div>
            <div class="toast-body">
              ${message}
            </div>
          </div>
        `;
        
        // إضافة الإشعار للحاوية
        toastContainer.insertAdjacentHTML('beforeend', toastHTML);
        
        // تهيئة العنصر باستخدام Bootstrap
        const toastElement = document.getElementById(toastId);
        const toast = new bootstrap.Toast(toastElement, {
          animation: true,
          autohide: true,
          delay: 5000
        });
        
        // عرض الإشعار
        toast.show();
      };
      
      // تهيئة الصفحة عند التحميل
      function initializePage() {
        const conversationList = document.getElementById('conversationList');
        if (!conversationList) return;
        
        // تعيين مستمعات الأحداث للقائمة
        attachConversationItemsEvents();
        
        // محاولة استخراج معرف المحادثة من عنوان URL الحالي
        const urlParts = window.location.pathname.split('/');
        const convIdIndex = urlParts.indexOf('conversations') + 1;
        
        if (convIdIndex > 0 && urlParts.length > convIdIndex && urlParts[convIdIndex] !== 'ajax') {
          const convId = urlParts[convIdIndex];
          
          // تحديد المحادثة نشطة في القائمة
          const item = conversationList.querySelector(`[data-conversation-id="${convId}"]`);
          if (item) {
            item.classList.add('active');
            currentConversationId = convId;
            loadConversationDetails(convId);
          }
        } else {
          // إذا لم يتم تحديد محادثة، يمكن تحديد الأول في القائمة
          const firstConv = conversationList.querySelector('.conversation-item');
          if (firstConv) {
            firstConv.click();
          }
        }
      }
      
      // تنفيذ عند تحميل الصفحة
      initializePage();
      
      // معالجة أحداث التنقل في المتصفح (الرجوع/التقدم)
      window.addEventListener('popstate', function(event) {
        if (event.state && event.state.conversationId) {
          // تحميل المحادثة المحددة
          currentConversationId = event.state.conversationId;
          loadConversationDetails(currentConversationId);
          
          // تحديث القائمة
          const conversationList = document.getElementById('conversationList');
          if (conversationList) {
            const items = conversationList.querySelectorAll('.conversation-item');
            items.forEach(item => {
              item.classList.remove('active');
              if (item.getAttribute('data-conversation-id') === currentConversationId) {
                item.classList.add('active');
              }
            });
          }
        }
      });
      
      // تحديث القائمة كل دقيقة للتأكد من الحصول على أحدث المحادثات
      setInterval(refreshConversationsList, 60000);
    });
  </script>
</body>
</html>
