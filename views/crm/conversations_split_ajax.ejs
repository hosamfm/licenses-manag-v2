<!DOCTYPE html>
<html lang="ar" dir="rtl">
<head>
  <%- include('../partials/_head') %>
  <title>المحادثات</title>
  <!-- إضافة SweetAlert2 -->
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css">
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.all.min.js"></script>
  
  <!-- ربط ملف التنسيقات الخاص بنظام CRM -->
  <link rel="stylesheet" href="/css/crm.css">
  <link rel="stylesheet" href="/css/conversation-new.css">
  
  <style>
    /* أنماط للفلترة المتقدمة */
    .conversation-advanced-filters {
      background-color: #f8f9fa;
      border-radius: 0.5rem;
      padding: 0.75rem;
      box-shadow: 0 1px 3px rgba(0,0,0,0.05);
    }
    
    .conversation-advanced-filters select {
      border-color: #dee2e6;
      color: #495057;
    }
    
    /* أنماط لعناصر المحادثة المسندة للمستخدم الحالي */
    .conversation-item.assigned-to-me {
      border-left: 3px solid #17a2b8;
    }
    
    /* أنماط مختلفة للحالات المختلفة */
    .conversation-item[data-status="closed"] {
      opacity: 0.7;
    }
    
    .conversation-item[data-status="assigned"] {
      background-color: rgba(13, 110, 253, 0.03);
    }
    
    .conversation-item[data-status="open"] {
      background-color: rgba(25, 135, 84, 0.03);
    }
    
    /* تحسين الوضوح عند التمرير فوق محادثة */
    .conversation-item:hover {
      background-color: rgba(13, 110, 253, 0.05);
      transition: background-color 0.2s ease;
    }
    
    /* تنسيق مؤشرات الحالة */
    .status-indicator {
      display: inline-flex;
      width: 24px;
      height: 24px;
      border-radius: 50%;
      justify-content: center;
      align-items: center;
      font-size: 0.8rem;
    }
    
    .status-indicator.open {
      background-color: rgba(25, 135, 84, 0.15);
      color: #198754;
    }
    
    .status-indicator.closed {
      background-color: rgba(108, 117, 125, 0.15);
      color: #6c757d;
    }
    
    .status-indicator.assigned {
      background-color: rgba(13, 110, 253, 0.15);
      color: #0d6efd;
    }
    
    /* حالة عدم وجود محادثات */
    #noConversationsResults {
      text-align: center;
      padding: 2rem;
      border-radius: 0.5rem;
      margin: 1rem;
    }
    
    #noConversationsResults i {
      font-size: 2rem;
      opacity: 0.6;
      margin-bottom: 1rem;
      display: block;
    }
    
    /* مؤشر التحميل */
    #conversationLoadingIndicator {
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      background: rgba(255, 255, 255, 0.9);
      border-radius: 8px;
      padding: 1.5rem;
      box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
      z-index: 10;
    }
    
    /* حالة تحميل القائمة */
    .conversations-list {
      position: relative;
      min-height: 200px;
    }
  </style>
  
  <!-- إضافة مكتبة Tribute.js لدعم المنشن في التعليقات -->
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/tributejs@5.1.3/dist/tribute.min.css">
  <script src="https://cdn.jsdelivr.net/npm/tributejs@5.1.3/dist/tribute.min.js"></script>
  
  <!-- إضافة ملف معالجة التواريخ والأوقات -->
  <script src="/js/date-formatter.js"></script>
  
  <!-- إضافة مكتبة Socket.IO - مهم لوظائف المحادثات الفورية -->
  <script src="https://cdn.socket.io/4.8.1/socket.io.min.js"></script>
  
  <!-- استدعاء ملف مساعد التعليقات الداخلية -->
  <script src="/js/conversation-utils.js"></script>
  <script src="/js/conversation-assignment.js"></script>
  <script src="/js/conversation-notes-utils.js"></script>
  
  <!-- تعريف معلومات المستخدم كمتغيرات عامة -->
  <script>
    
    // تعريف المتغيرات العامة بشكل صحيح
    window.currentUserId = '<%= typeof user !== "undefined" && user && user._id ? user._id : "system" %>';
    window.currentUsername = '<%= typeof user !== "undefined" && user && user.username ? user.username : "مستخدم النظام" %>';
    
  </script>
  
  <!-- استدعاء ملف المساعدة للمحادثات -->
  <script src="/js/conversation-utils.js"></script>
  
  <!-- استدعاء ملف التحميل التزايدي للرسائل -->
  <script src="/js/conversation-pagination.js"></script>
  
<!-- استدعاء ملف خدمة الإشعارات -->
  <script src="/js/notifications.js"></script>
  <script src="/js/socket-utils.js"></script>
</head>
<body>

  <%- include('../partials/_header') %>

  <div class="crm-container">
    <!-- الشريط الجانبي الموحد -->
    <%- include('../partials/_crm_sidebar') %>

    <!-- المحتوى الرئيسي -->
    <div class="crm-content">

      <!-- رسائل فلاش إن وجدت -->
      <% if (flashMessages && flashMessages.error) { %>
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
          <%= flashMessages.error %>
          <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
      <% } %>
      <% if (flashMessages && flashMessages.success) { %>
        <div class="alert alert-success alert-dismissible fade show" role="alert">
          <%= flashMessages.success %>
          <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
      <% } %>

      <div class="row">

        <!-- العمود الأيمن: قائمة المحادثات -->
        <div class="col-lg-4">
          <div class="conversations-sidebar">
            <div class="conversations-header d-flex justify-content-between align-items-center">
              <h5 class="mb-0"><i class="fas fa-comments me-2 text-primary"></i> المحادثات</h5>
              <div class="conversation-filters">
                <button type="button" class="btn btn-sm btn-outline-primary filter-all active" data-filter="all">
                  <i class="fas fa-list"></i> الكل
                </button>
                <button type="button" class="btn btn-sm btn-outline-primary filter-unread" data-filter="unread">
                  <i class="fas fa-envelope"></i> غير المقروءة
                </button>
              </div>
            </div>
            
            <!-- فلترة محسنة للمحادثات -->
            <div class="conversation-advanced-filters mt-3">
              <div class="row g-2">
                <div class="col-6">
                  <select id="assignmentFilter" class="form-select form-select-sm" onchange="filterConversationsByAssignment(this.value)">
                    <option value="all">جميع المحادثات</option>
                    <option value="mine">محادثاتي</option>
                  </select>
                </div>
                <div class="col-6">
                  <select id="statusFilter" class="form-select form-select-sm" onchange="filterConversationsByStatus(this.value)">
                    <option value="all">جميع الحالات</option>
                    <option value="open" selected>مفتوحة</option>
                    <option value="closed">مغلقة</option>
                  </select>
                </div>
              </div>
            </div>
            
            <div class="conversations-search mt-3 mb-3">
              <div class="input-group">
                <span class="input-group-text bg-light border-end-0">
                  <i class="fas fa-search text-muted"></i>
                </span>
                <input type="text" id="conversationSearchInput" class="form-control border-start-0" placeholder="بحث في المحادثات...">
              </div>
            </div>
            
            <% if (conversations && conversations.length > 0) { %>
              <div class="list-group conversations-list shadow-sm" id="conversationList">
                <% conversations.forEach(function(conv) { %>
                  <button type="button"
                          class="list-group-item list-group-item-action conversation-item d-flex flex-column <%= conv.unreadCount > 0 ? 'has-unread' : '' %>"
                          data-conversation-id="<%= conv._id %>">
                    <div class="d-flex justify-content-between align-items-center w-100">
                      <div class="conversation-info">
                        <div class="conversation-name">
                          <i class="<%= conv.channel === 'whatsapp' ? 'fab fa-whatsapp text-success' : 'fas fa-comments text-primary' %> me-2"></i>
                          <span><%= conv.customerName || conv.phoneNumber %></span>
                        </div>
                        <div class="conversation-preview">
                          <% if (conv.lastMessage) { %>
                            <small class="<%= conv.unreadCount > 0 ? 'fw-bold' : 'text-muted' %>">
                              <% if (conv.lastMessage.direction === 'incoming') { %>
                                <i class="fas fa-reply-all text-muted me-1 fa-flip-horizontal"></i>
                              <% } else { %>
                                <i class="fas fa-reply text-muted me-1"></i>
                              <% } %>
                              <%= conv.lastMessage.content
                                   ? conv.lastMessage.content.substring(0, 30)
                                   : (conv.lastMessage.mediaType ? 'محتوى وسائط' : 'رسالة') %>
                              <%= conv.lastMessage.content && conv.lastMessage.content.length > 30 ? '...' : '' %>
                            </small>
                          <% } else { %>
                            <small class="text-muted"><i class="fas fa-info-circle me-1"></i> محادثة جديدة</small>
                          <% } %>
                        </div>
                      </div>
                      <div class="conversation-meta text-end">
                        <% if (conv.unreadCount > 0) { %>
                          <span class="badge bg-danger rounded-pill conversation-badge mb-1"><%= conv.unreadCount %></span>
                        <% } %>
                        <div class="conversation-time small">
                          <%= new Date(conv.lastMessageAt || conv.updatedAt).toLocaleString('ar-LY', {hour: '2-digit', minute: '2-digit'}) %>
                        </div>
                        <% if (conv.status === 'closed') { %>
                          <span class="status-indicator closed" title="محادثة مغلقة"><i class="fas fa-lock"></i></span>
                        <% } else if (conv.status === 'assigned') { %>
                          <span class="status-indicator assigned" title="محادثة مسندة"><i class="fas fa-user-check"></i></span>
                        <% } else { %>
                          <span class="status-indicator open" title="محادثة مفتوحة"><i class="fas fa-door-open"></i></span>
                        <% } %>
                      </div>
                    </div>
                  </button>
                <% }) %>
              </div>
            <% } else { %>
              <div class="alert alert-info">
                <i class="fas fa-info-circle me-2"></i> لا توجد محادثات متاحة.
              </div>
            <% } %>
          </div>
        </div>

        <!-- العمود الأيسر: سيتم حقن تفاصيل المحادثة فيه بواسطة AJAX -->
        <div class="col-lg-8" id="conversationDetailsContainer">
          <div class="conversation-welcome">
            <div class="text-center p-5">
              <i class="fas fa-comments text-primary mb-4" style="font-size: 4rem;"></i>
              <h3 class="mb-3">مرحباً بك في نظام المحادثات</h3>
              <p class="text-muted">اختر محادثة من القائمة للبدء في الرد والتفاعل مع العملاء.</p>
            </div>
          </div>
        </div>

      </div>
    </div>
  </div>

  <%- include('../partials/_footer') %>

  <!-- عنصر الصوت للتنبيه عند وصول رسالة جديدة -->
  <audio id="messageSound" src="/sounds/new-message.mp3" preload="auto"></audio>

  <!-- سكربت جافاسكربت لجلب التفاصيل بالـ AJAX -->
  <script>
    document.addEventListener('DOMContentLoaded', function() {
      // معرف المحادثة الحالية (إذا تم تحديدها)
      let currentConversationId = null;
      
      // تكوين وتهيئة الويب سوكت
      window.socketConnection = io();
      
      // الاستماع لأحداث الاتصال
      window.socketConnection.on('connect', function() {
        // تعيين حالة الاتصال
        window.socketConnected = true;
        console.log('تم الاتصال بالسوكت بنجاح');
        
        // إعداد معالجات أحداث التعيين
        if (typeof window.setupAssignmentListeners === 'function') {
          window.setupAssignmentListeners(window.socketConnection);
        }
      });

      window.socketConnection.on('disconnect', function() {
        // تعيين حالة الاتصال
        window.socketConnected = false;
        console.log('تم قطع الاتصال بالسوكت');
      });
      
      // إضافة مستمع لحدث تحديث المحادثة
      window.socketConnection.on('conversation-update', function(data) {
        // التعامل مع تغيير حالة المحادثة (فتح/إغلاق)
        if (data && data.type === 'status' && data.status) {
          // إذا كانت المحادثة المفتوحة حالياً
          if (data._id === currentConversationId || data.conversationId === currentConversationId) {
            // استخدام الوظيفة الجديدة لتحديث رأس المحادثة
            if (typeof window.updateConversationHeader === 'function') {
              window.updateConversationHeader(data);
            }
          }
        }
        
        // التعامل مع تغيير حالة التعيين
        else if (data && data.type === 'assigned') {
          // إذا كانت المحادثة المحددة حالياً هي المحادثة التي تم تعيينها
          if (data._id === currentConversationId || data.conversationId === currentConversationId) {
            // استخدام الوظيفة الجديدة لتحديث رأس المحادثة بشكل كامل
            if (typeof window.updateConversationHeader === 'function') {
              window.updateConversationHeader(data);
            } else {
              // كود احتياطي في حالة عدم توفر الوظيفة الجديدة
              // تحديث المعلومات في واجهة تفاصيل المحادثة
              const assigneeInfo = document.getElementById('assigneeInfo');
              const assignToMeBtn = document.getElementById('assignToMeBtn');
              
              if (assigneeInfo) {
                if (data.assignee) {
                  // عرض اسم المستخدم المعين
                  const assigneeName = data.assignee.full_name || data.assignee.username || 'مستخدم';
                  assigneeInfo.innerHTML = `<i class="fas fa-user-check me-1"></i> ${assigneeName}`;
                  
                  // إخفاء زر "تعيين لي" إذا كان المستخدم الحالي هو المعين
                  if (assignToMeBtn && data.assignee._id === window.currentUserId) {
                    assignToMeBtn.style.display = 'none';
                  } else if (assignToMeBtn) {
                    assignToMeBtn.style.display = 'inline-block';
                  }
                } else {
                  // إظهار "غير معين" في حالة إلغاء التعيين
                  assigneeInfo.innerHTML = '<i class="fas fa-exclamation-circle me-1"></i> غير معين';
                  
                  // إظهار زر "تعيين لي"
                  if (assignToMeBtn) {
                    assignToMeBtn.style.display = 'inline-block';
                  }
                }
              }
              
              // تحديث حالة المحادثة
              const statusBadge = document.querySelector('.conversation-status-badge');
              if (statusBadge) {
                if (data.assignee) {
                  statusBadge.className = 'badge bg-info ms-2 conversation-status-badge';
                  statusBadge.innerHTML = '<i class="fas fa-user-check me-1"></i> مسندة';
                } else {
                  statusBadge.className = 'badge bg-success ms-2 conversation-status-badge';
                  statusBadge.innerHTML = '<i class="fas fa-door-open me-1"></i> مفتوحة';
                }
              }
            }
          }
        }
        
        // تحديث قائمة المحادثات لعرض التغييرات الجديدة
        refreshConversationsList();
      });
      
      // مستمع لحدث تحديث قائمة المحادثات (حدث جديد خاص بالقائمة)
      window.socketConnection.on('conversation-list-update', function(updatedConversation) {
        if (!updatedConversation || !updatedConversation._id) {
          // تخطي إذا لم تكن البيانات متوفرة
          return;
        }
        
        // إذا كانت المحادثة المحدثة هي المحادثة المفتوحة حاليًا، قم بتحديث رأس المحادثة
        if (currentConversationId === updatedConversation._id) {
          if (typeof window.updateConversationHeader === 'function') {
            window.updateConversationHeader(updatedConversation);
          }
        }
        
        // تحديث عنصر المحادثة في القائمة، أو إضافته إذا لم يكن موجوداً
        updateConversationInList(updatedConversation);
      });
      
      // تنفيذ العمليات المعلقة بعد الاتصال
      if (Array.isArray(window.pendingSocketOperations)) {
        window.pendingSocketOperations.forEach(operation => {
          operation(window.socketConnection);
        });
        window.pendingSocketOperations = [];
      }

      // إعداد مستمعات الإشعارات
      if (typeof window.setupNotificationListeners === 'function') {
        window.setupNotificationListeners(window.socketConnection);
      }
      
      // وظائف تصفية وبحث المحادثات
      const filterButtons = document.querySelectorAll('.conversation-filters button');
      const searchInput = document.getElementById('conversationSearchInput');
      
      // إذا وجدت أزرار الفلترة أضف لها المستمعات
      if (filterButtons.length > 0) {
        filterButtons.forEach(btn => {
          btn.addEventListener('click', () => {
            // إزالة الفئة النشطة من جميع الأزرار
            filterButtons.forEach(b => b.classList.remove('active'));
            
            // إضافة الفئة النشطة للزر المحدد
            btn.classList.add('active');
            
            // تطبيق الفلتر على قائمة المحادثات
            const filterType = btn.dataset.filter;
            
            // تحديث قائمة المحادثات من الخادم
            refreshConversationsList();
          });
        });
      }
      
      // إذا وجد مربع البحث أضف له مستمع
      if (searchInput) {
        searchInput.addEventListener('input', () => {
          // تحديث قائمة المحادثات من الخادم بعد توقف المستخدم عن الكتابة
          if (window.searchTimeout) {
            clearTimeout(window.searchTimeout);
          }
          
          window.searchTimeout = setTimeout(() => {
            refreshConversationsList();
          }, 300); // تأخير 300 مللي ثانية
        });
      }
      
      // دالة الفلترة والبحث في المحادثات
      function filterConversations(filterType, searchTerm) {
        const conversationItems = document.querySelectorAll('#conversationList .conversation-item');
        if (!conversationItems.length) return;
        
        searchTerm = searchTerm.trim().toLowerCase();
        
        conversationItems.forEach(item => {
          // التحقق من انطباق الفلتر
          const hasUnread = item.classList.contains('has-unread');
          const matchesFilter = (filterType === 'all') || (filterType === 'unread' && hasUnread);
          
          // التحقق من انطباق فلتر التعيين
          const assignmentFilter = document.getElementById('assignmentFilter').value;
          const isMine = item.classList.contains('assigned-to-me');
          const matchesAssignment = (assignmentFilter === 'all') || (assignmentFilter === 'mine' && isMine);
          
          // التحقق من انطباق فلتر الحالة
          const statusFilter = document.getElementById('statusFilter').value;
          const itemStatus = item.getAttribute('data-status') || 'open';
          const matchesStatus = (statusFilter === 'all') || (statusFilter === itemStatus);
          
          // التحقق من انطباق البحث
          const conversationText = item.textContent.toLowerCase();
          const matchesSearch = !searchTerm || conversationText.includes(searchTerm);
          
          // إظهار أو إخفاء العنصر بناءً على الفلتر والبحث والتعيين والحالة
          if (matchesFilter && matchesSearch && matchesAssignment && matchesStatus) {
            item.style.display = '';
          } else {
            item.style.display = 'none';
          }
        });
        
        // إظهار رسالة إذا لم تظهر أي محادثة
        const visibleCount = [...conversationItems].filter(item => item.style.display !== 'none').length;
        const noResultsMsg = document.getElementById('noConversationsResults');
        
        if (visibleCount === 0) {
          if (!noResultsMsg) {
            const msgElem = document.createElement('div');
            msgElem.id = 'noConversationsResults';
            msgElem.className = 'alert alert-info m-3';
            msgElem.innerHTML = '<i class="fas fa-search me-2"></i> لا توجد محادثات تطابق البحث.';
            
            const listContainer = document.getElementById('conversationList');
            if (listContainer) {
              listContainer.parentNode.appendChild(msgElem);
            }
          }
        } else {
          if (noResultsMsg) {
            noResultsMsg.remove();
          }
        }
      }
      
      // دالة الفلترة حسب التعيين
      window.filterConversationsByAssignment = function(value) {
        // تحديث قائمة المحادثات من الخادم مع الفلتر الجديد
        refreshConversationsList();
      };
      
      // دالة الفلترة حسب الحالة
      window.filterConversationsByStatus = function(value) {
        // الحصول على الفلتر النشط حاليًا
        const activeFilter = document.querySelector('.conversation-filters button.active');
        const filterType = activeFilter ? activeFilter.dataset.filter : 'all';
        
        // تطبيق الفلتر مع البحث
        const searchInput = document.getElementById('conversationSearchInput');
        filterConversations(filterType, searchInput ? searchInput.value : '');
      };
      
      // الاستماع لأحداث الرسائل الجديدة
      window.socketConnection.on('new-message', function(data) {
        // تشغيل صوت الإشعار للرسائل الواردة
        if (data.direction === 'incoming') {
          window.playNotificationSound();
        }
        
        // إذا كانت الرسالة تخص المحادثة المفتوحة حالياً، أضفها للمحادثة
        if (data.conversationId === currentConversationId) {
          window.addMessageToConversation(data);
          
          // إعادة تهيئة مراقب الرسائل لتتبع الرسائل الجديدة
          if (typeof window.setupMessageReadObserver === 'function') {
            setTimeout(() => {
              window.setupMessageReadObserver();
            }, 100);
          }
        }
        
        // تحديث قائمة المحادثات لعرض آخر رسالة وغيرها
        refreshConversationsList();
      });
      
      // الاستماع لأحداث تحديث حالة الرسائل
      window.socketConnection.on('message-status-update', function(data) {
        // تحقق من وجود معرف المحادثة والتأكد من أنه يطابق المحادثة الحالية
        if (!data.conversationId || data.conversationId !== currentConversationId) {
          return;
        }
        
        // استخدم المعرف الخارجي لتحديث حالة الرسالة
        if (data.externalId) {
          window.updateMessageStatus(data.externalId, data.status);
        } else if (data.messageId) {
          // دعم للإصدارات القديمة التي قد ترسل messageId بدلاً من externalId
          window.updateMessageStatus(data.messageId, data.status);
        }
      });
      
      // الاستماع لأحداث تحديث قراءة الرسائل
      window.socketConnection.on('messages-read-update', function(data) {
        // تحقق من وجود معرف المحادثة والتأكد من أنه يطابق المحادثة الحالية
        if (!data.conversationId || data.conversationId !== currentConversationId) {
          return;
        }
        
        // تحديث حالة الرسائل المقروءة في الواجهة
        if (data.messages && Array.isArray(data.messages)) {
          data.messages.forEach(msg => {
            if (msg.messageId) {
              window.updateMessageStatus(msg.messageId, 'read');
            } else if (msg.externalId) {
              window.updateMessageStatus(msg.externalId, 'read');
            }
          });
        }
      });
      
      // الاستماع لأحداث الردود الجديدة
      window.socketConnection.on('message-reply', function(data) {
        // التحقق من وجود البيانات المطلوبة
        if (!data || !data.message) {
          return;
        }
        
        // إذا وُجدت بيانات الرسالة والرد، استخدم دالة إضافة الرسالة مباشرةً
        if (data.message && data.replyToId) {
          // إضافة معرف المحادثة للرسالة إذا لم يكن موجودًا
          if (!data.message.conversationId) {
            data.message.conversationId = currentConversationId;
          }
          
          // ضمان وجود replyToMessageId في الرسالة
          if (!data.message.replyToMessageId) {
            data.message.replyToMessageId = data.replyToId;
          }
          
          // إضافة الرسالة للواجهة إذا كانت المحادثة الحالية
          if (data.message.conversationId === currentConversationId) {
            window.addMessageToConversation(data.message);
          } else {
            // تحديث قائمة المحادثات فقط إذا كانت محادثة أخرى
            // refreshConversationsList();
          }
        } else {
          // السلوك القديم - إعادة تحميل المحادثة بالكامل كإجراء احتياطي
          if (data.conversationId === currentConversationId) {
            refreshConversationDetails();
          } else {
            // refreshConversationsList();
          }
        }
      });
      
      // الاستماع لأحداث التفاعلات الجديدة
      window.socketConnection.on('message-reaction', function(data) {
        // التحقق من أن البيانات تخص المحادثة الحالية
        if (!data.conversationId || data.conversationId !== currentConversationId) {
          return;
        }
        
        // استخدام الدالة الجديدة لتحديث التفاعل مباشرة بدلاً من إعادة تحميل المحادثة بالكامل
        window.updateMessageReaction(data.externalId, data.reaction);
      });
      
      // الاستماع لأحداث تحديث المعرف الخارجي للرسالة
      window.socketConnection.on('message-external-id-update', function(data) {
        // التحقق من أن البيانات تخص المحادثة الحالية
        if (!data.conversationId || data.conversationId !== currentConversationId) {
          return;
        }
        
        // البحث عن عنصر الرسالة حسب المعرف الداخلي
        const messageElem = document.querySelector(`.message[data-message-id="${data.messageId}"]`);
        
        if (!messageElem) {
          return;
        }
        
        // إضافة المعرف الخارجي للرسالة
        messageElem.setAttribute('data-external-id', data.externalId);
      });
      
      // معالج حدث للملاحظات الداخلية
      window.socketConnection.on('internal-note', function(data) {
        
        // التحقق من أن الملاحظة تنتمي إلى المحادثة الحالية
        if (data.conversationId === currentConversationId) {
          // إضافة الملاحظة الداخلية إلى واجهة المستخدم
          window.addNoteToUI(data.note);
          
          // تشغيل صوت الإشعار للملاحظات الجديدة
          window.playNotificationSound();
          
          // تحديث قائمة المحادثات
          refreshConversationsList();
        }
      });
      
      // دالة تحديث عنصر محادثة واحدة في القائمة
      window.updateConversationInList = function(conversation) {
        if (!conversation || !conversation._id) return;
        
        // الحصول على حاوية قائمة المحادثات
        const conversationList = document.getElementById('conversationList');
        if (!conversationList) return;
        
        // البحث عن عنصر المحادثة في القائمة الحالية
        let conversationItem = conversationList.querySelector(`.conversation-item[data-conversation-id="${conversation._id}"]`);
        const isCurrentlyActive = currentConversationId === conversation._id;
        
        // إعداد بيانات المستخدم المعين (إذا وُجد)
        let assigneeHtml = '';
        if (conversation.assignee) {
          const assigneeName = conversation.assignee.full_name || conversation.assignee.username || 'مستخدم';
          assigneeHtml = `
            <div class="conversation-assignee small text-primary mb-1">
              <i class="fas fa-user-check me-1"></i> ${assigneeName}
            </div>
          `;
        }
        
        // إذا كان العنصر موجود، قم بتحديثه
        if (conversationItem) {
          // الاحتفاظ بحالة النشاط للعنصر
          const wasActive = conversationItem.classList.contains('active');
          
          // تحديث محتوى العنصر
          conversationItem.className = `list-group-item list-group-item-action conversation-item d-flex flex-column ${conversation.unreadCount > 0 ? 'has-unread' : ''} ${wasActive ? 'active' : ''}`;
          
          // إضافة سمة حالة المحادثة
          conversationItem.setAttribute('data-status', conversation.status || 'open');
          
          // إضافة فئة التعيين إذا كان معين
          if (conversation.assignedTo || conversation.assignee) {
            conversationItem.classList.add('assigned');
            
            // إضافة فئة "assigned-to-me" إذا كان معين للمستخدم الحالي
            if (conversation.assignedTo === window.currentUserId || 
                (conversation.assignee && conversation.assignee._id === window.currentUserId)) {
              conversationItem.classList.add('assigned-to-me');
            }
          }
          
          // تحديث HTML الداخلي للعنصر
          conversationItem.innerHTML = `
            <div class="d-flex justify-content-between align-items-center w-100">
              <div class="conversation-info">
                <div class="conversation-name">
                  <i class="${conversation.channel === 'whatsapp' ? 'fab fa-whatsapp text-success' : 'fas fa-comments text-primary'} me-2"></i>
                  <span>${conversation.customerName || conversation.phoneNumber}</span>
                </div>
                ${assigneeHtml}
                <div class="conversation-preview">
                  ${conversation.lastMessage ? `
                    <small class="${conversation.unreadCount > 0 ? 'fw-bold' : 'text-muted'}">
                      ${conversation.lastMessage.direction === 'incoming' ? '<i class="fas fa-reply-all text-muted me-1 fa-flip-horizontal"></i>' : '<i class="fas fa-reply text-muted me-1"></i>'}
                      ${conversation.lastMessage.content
                         ? conversation.lastMessage.content.substring(0, 30) + (conversation.lastMessage.content.length > 30 ? '...' : '')
                         : (conversation.lastMessage.mediaType ? 'محتوى وسائط' : 'رسالة')}
                    </small>
                  ` : `
                    <small class="text-muted"><i class="fas fa-info-circle me-1"></i> محادثة جديدة</small>
                  `}
                </div>
              </div>
              <div class="conversation-meta text-end">
                ${conversation.unreadCount > 0 ? `<span class="badge bg-danger rounded-pill conversation-badge mb-1">${conversation.unreadCount}</span>` : ''}
                <div class="conversation-time small">
                  ${new Date(conversation.lastMessageAt || conversation.updatedAt).toLocaleString('ar-LY', {hour: '2-digit', minute: '2-digit'})}
                </div>
                ${conversation.status === 'closed' ? `<span class="status-indicator closed" title="محادثة مغلقة"><i class="fas fa-lock"></i></span>` 
                  : conversation.status === 'assigned' || conversation.assignee ? `<span class="status-indicator assigned" title="محادثة مسندة"><i class="fas fa-user-check"></i></span>`
                  : `<span class="status-indicator open" title="محادثة مفتوحة"><i class="fas fa-door-open"></i></span>`}
              </div>
            </div>
          `;
          
          // تحريك المحادثة المحدثة إلى أعلى القائمة
          if (conversationList.firstChild && conversationList.firstChild !== conversationItem) {
            conversationList.insertBefore(conversationItem, conversationList.firstChild);
          }
        } 
        // إذا لم يكن العنصر موجود، قم بإنشائه
        else {
          // إنشاء عنصر جديد
          conversationItem = document.createElement('button');
          conversationItem.type = 'button';
          conversationItem.className = `list-group-item list-group-item-action conversation-item d-flex flex-column ${conversation.unreadCount > 0 ? 'has-unread' : ''} ${isCurrentlyActive ? 'active' : ''}`;
          conversationItem.setAttribute('data-conversation-id', conversation._id);
          
          // إضافة سمة حالة المحادثة
          conversationItem.setAttribute('data-status', conversation.status || 'open');
          
          // إضافة فئة التعيين إذا كان معين
          if (conversation.assignedTo || conversation.assignee) {
            conversationItem.classList.add('assigned');
            
            // إضافة فئة "assigned-to-me" إذا كان معين للمستخدم الحالي
            if (conversation.assignedTo === window.currentUserId || 
                (conversation.assignee && conversation.assignee._id === window.currentUserId)) {
              conversationItem.classList.add('assigned-to-me');
            }
          }
          
          // إضافة المحتوى الداخلي
          conversationItem.innerHTML = `
            <div class="d-flex justify-content-between align-items-center w-100">
              <div class="conversation-info">
                <div class="conversation-name">
                  <i class="${conversation.channel === 'whatsapp' ? 'fab fa-whatsapp text-success' : 'fas fa-comments text-primary'} me-2"></i>
                  <span>${conversation.customerName || conversation.phoneNumber}</span>
                </div>
                ${assigneeHtml}
                <div class="conversation-preview">
                  ${conversation.lastMessage ? `
                    <small class="${conversation.unreadCount > 0 ? 'fw-bold' : 'text-muted'}">
                      ${conversation.lastMessage.direction === 'incoming' ? '<i class="fas fa-reply-all text-muted me-1 fa-flip-horizontal"></i>' : '<i class="fas fa-reply text-muted me-1"></i>'}
                      ${conversation.lastMessage.content
                         ? conversation.lastMessage.content.substring(0, 30) + (conversation.lastMessage.content.length > 30 ? '...' : '')
                         : (conversation.lastMessage.mediaType ? 'محتوى وسائط' : 'رسالة')}
                    </small>
                  ` : `
                    <small class="text-muted"><i class="fas fa-info-circle me-1"></i> محادثة جديدة</small>
                  `}
                </div>
              </div>
              <div class="conversation-meta text-end">
                ${conversation.unreadCount > 0 ? `<span class="badge bg-danger rounded-pill conversation-badge mb-1">${conversation.unreadCount}</span>` : ''}
                <div class="conversation-time small">
                  ${new Date(conversation.lastMessageAt || conversation.updatedAt).toLocaleString('ar-LY', {hour: '2-digit', minute: '2-digit'})}
                </div>
                ${conversation.status === 'closed' ? `<span class="status-indicator closed" title="محادثة مغلقة"><i class="fas fa-lock"></i></span>` 
                  : conversation.status === 'assigned' || conversation.assignee ? `<span class="status-indicator assigned" title="محادثة مسندة"><i class="fas fa-user-check"></i></span>`
                  : `<span class="status-indicator open" title="محادثة مفتوحة"><i class="fas fa-door-open"></i></span>`}
              </div>
            </div>
          `;
          
          // إضافة العنصر الجديد في بداية القائمة
          if (conversationList.firstChild) {
            conversationList.insertBefore(conversationItem, conversationList.firstChild);
          } else {
            conversationList.appendChild(conversationItem);
          }
        }
        
        // إعادة تعيين مستمعات الأحداث
        if (conversationItem) {
          // إزالة المستمعات القديمة
          const newItem = conversationItem.cloneNode(true);
          conversationItem.parentNode.replaceChild(newItem, conversationItem);
          conversationItem = newItem;
          
          // إضافة مستمع النقر الجديد
          conversationItem.addEventListener('click', function() {
            // إزالة التنشيط من جميع العناصر
            const items = conversationList.querySelectorAll('.conversation-item');
            items.forEach(item => {
              item.classList.remove('active');
            });
            
            // تنشيط هذا العنصر
            this.classList.add('active');
            
            // تحميل تفاصيل المحادثة
            window.loadConversationDetails(conversation._id);
          });
        }
        
        // إعادة تطبيق الفلتر والبحث الحالي
        const activeFilter = document.querySelector('.conversation-filters button.active');
        const searchInput = document.getElementById('conversationSearchInput');
        
        // إعادة تطبيق الفلترة المتقدمة
        window.filterConversationsByStatus(document.getElementById('statusFilter').value);
        window.filterConversationsByAssignment(document.getElementById('assignmentFilter').value);
        
        if (activeFilter && searchInput) {
          filterConversations(activeFilter.dataset.filter, searchInput.value);
        }
      };

      // تحديث تفاصيل المحادثة
      window.loadConversationDetails = function(conversationId, skipCache = false) {
        if (!conversationId) return;
        
        const detailsContainer = document.getElementById('conversationDetailsContainer');
        if (!detailsContainer) return;
        
        // الانضمام إلى غرفة المحادثة عبر Socket.io للحصول على الإشعارات الفورية
        if (typeof window.joinConversationRoom === 'function') {
          // استخدام الوظيفة المساعدة الجديدة
          window.joinConversationRoom(conversationId);
        } else {
          // الطريقة القديمة كاحتياط
          if (window.socketConnection) {
            // إذا كان الاتصال جاهزًا
            if (window.socketConnected) {

              window.socketConnection.emit('join', { room: `conversation-${conversationId}` });
              
              // مغادرة الغرفة السابقة إذا وجدت
              if (window.previousConversationId && window.previousConversationId !== conversationId) {
                window.socketConnection.emit('leave', { room: `conversation-${window.previousConversationId}` });
              }
            } else {
              // تخزين العملية للتنفيذ لاحقًا عند اكتمال الاتصال
              if (!Array.isArray(window.pendingSocketOperations)) {
                window.pendingSocketOperations = [];
              }
              
              window.pendingSocketOperations.push((socket) => {
                socket.emit('join', { room: `conversation-${conversationId}` });
                
                // مغادرة الغرفة السابقة إذا وجدت
                if (window.previousConversationId && window.previousConversationId !== conversationId) {
                  socket.emit('leave', { room: `conversation-${window.previousConversationId}` });
                }
              });
            }
            
            // تحديث المعرف الحالي في المتغير العام للنافذة
            window.currentConversationId = conversationId;
            
            // حفظ معرف المحادثة الحالية للمرة القادمة
            window.previousConversationId = conversationId;
          } else {
          }
        }
        
        // عرض مؤشر التحميل
        detailsContainer.innerHTML = `
          <div class="text-center p-5">
            <div class="spinner-border text-primary" role="status">
              <span class="visually-hidden">جاري التحميل...</span>
            </div>
            <p class="mt-2">جاري تحميل المحادثة...</p>
          </div>
        `;
        
        // إنشاء رابط مع إضافة معلمة لتخطي الكاش عند الحاجة
        const url = new URL(`/crm/conversations/ajax/details/${conversationId}`, window.location.origin);
        
        // إضافة معلمة لتجاوز الكاش عند الحاجة
        if (skipCache) {
          url.searchParams.append('t', new Date().getTime());
        }
        
        // طلب التفاصيل من الخادم
        fetch(url.toString(), {
          method: 'GET',
          headers: {
            'X-Requested-With': 'XMLHttpRequest',
            'Cache-Control': skipCache ? 'no-cache, no-store, must-revalidate' : 'default'
          }
        })
        .then(response => {
          if (!response.ok) throw new Error('HTTP error ' + response.status);
          return response.text();
        })
        .then(html => {
          // تحديث المحتوى
          detailsContainer.innerHTML = html;
          
          // تحديث معرف المحادثة الحالية
          currentConversationId = conversationId;
          
          // التمرير لأسفل آخر الرسائل
          setTimeout(() => {
            const msgContainer = document.getElementById('messageContainer');
            if (msgContainer) {
              msgContainer.scrollTop = msgContainer.scrollHeight;
            }
            
            // إعداد مراقب الرسائل غير المقروءة
            if (window.setupMessageReadObserver) {
              window.setupMessageReadObserver();
            }
          }, 100);

          // تعيين المستمعين للتفاعلات مع الرسائل بعد تحميل المحادثة
          window.attachConversationEventListeners && window.attachConversationEventListeners();
          
          // تهيئة نظام تحميل الرسائل التزايدي
          if (window.conversationPagination) {
            window.conversationPagination.initialize({
              conversationId: conversationId
            });
          }
          
          // تنسيق التواريخ بعد تحميل المحادثة
          if (typeof window.formatAllMessageTimes === 'function') {
            setTimeout(window.formatAllMessageTimes, 500);
          }
        })
        .catch(err => {
          detailsContainer.innerHTML = `
            <div class="alert alert-danger">
              حدث خطأ أثناء جلب تفاصيل المحادثة: ${err.message}
            </div>
          `;
        });
      }

      // تحديث تفاصيل المحادثة (إعادة تحميل)
      window.refreshConversationDetails = function() {
        if (currentConversationId) {
          loadConversationDetails(currentConversationId, true);
        }
      };
      
      // دالة لإضافة رسالة جديدة للمحادثة الحالية
      window.addMessageToConversation = function(messageData) {
        if (!messageData || !currentConversationId) return;
        
        // التأكد من أن الرسالة تخص المحادثة الحالية
        if (messageData.conversationId !== currentConversationId) return;
        
        // الحصول على حاوية الرسائل
        const messageContainer = document.getElementById('messageContainer');
        if (!messageContainer) return;
        
        // التحقق من وجود الرسالة مسبقاً (لمنع إضافتها مرتين)
        const messageExists = document.querySelector(`.message[data-message-id="${messageData._id}"]`);
        if (messageExists) {
          return;
        }
        
        // إنشاء HTML للرسالة مطابق تمامًا لبنية القالب في _conversation_details_ajax.ejs
        let messageHTML = `
          <div class="message ${messageData.direction}" 
              data-message-id="${messageData._id}" 
              data-status="${messageData.status || 'sent'}"
              ${messageData.externalMessageId ? `data-external-id="${messageData.externalMessageId}"` : ''}>
        `;
        
        // إضافة قسم الرد على رسالة (إذا كان موجودًا)
        if (messageData.replyToMessageId) {
          // البحث عن الرسالة المرد عليها
          const repliedMsg = document.querySelector(`.message[data-external-id="${messageData.replyToMessageId}"], .message[data-message-id="${messageData.replyToMessageId}"]`);
          
          messageHTML += `
            <div class="replied-message">
              <div class="replied-content">
                <i class="fas fa-reply"></i>
                <span>${repliedMsg ? 
                  (repliedMsg.querySelector('.message-bubble').textContent.trim().substring(0, 50) + 
                   (repliedMsg.querySelector('.message-bubble').textContent.trim().length > 50 ? '...' : '')) : 
                  `رد على رسالة غير موجودة<small class="text-muted d-block">(المعرف: ${messageData.replyToMessageId.substring(0, 10)}...)</small>`}</span>
              </div>
            </div>
          `;
        }
        
        // إضافة فقاعة الرسالة مع دعم الوسائط
        messageHTML += `
          <div class="message-bubble ${messageData.direction === 'incoming' ? 'incoming-bubble' : 'outgoing-bubble'} ${messageData.mediaType ? 'message-with-media' : ''}">
            ${messageData.direction === 'outgoing' ? `
            <!-- إضافة اسم المرسل فقط للرسائل الصادرة -->
            <div class="message-sender">
              ${messageData.metadata && messageData.metadata.senderInfo 
                ? messageData.metadata.senderInfo.username || messageData.metadata.senderInfo.full_name || 'مجهول'
                : messageData.sentByUsername || 'مجهول'}
            </div>
            ` : ''}
            <div class="message-content">
        `;
        
        // إضافة الوسائط حسب النوع
        if (messageData.mediaType) {
          if (messageData.mediaType === 'image') {
            messageHTML += `
              <div class="media-container">
                <img src="/whatsapp/media/content/${messageData._id}" class="media-image" alt="صورة" onclick="window.openMediaPreview(this.src, 'image')">
              </div>
            `;
          } else if (messageData.mediaType === 'video') {
            messageHTML += `
              <div class="media-container">
                <video controls class="media-video">
                  <source src="/whatsapp/media/content/${messageData._id}" type="video/mp4">
                  المتصفح لا يدعم عرض الفيديو
                </video>
              </div>
            `;
          } else if (messageData.mediaType === 'audio') {
            messageHTML += `
              <div class="media-container">
                <audio controls class="media-audio">
                  <source src="/whatsapp/media/content/${messageData._id}" type="audio/ogg">
                  المتصفح لا يدعم تشغيل الملفات الصوتية
                </audio>
              </div>
            `;
          } else if (messageData.mediaType === 'document') {
            messageHTML += `
              <div class="document-container">
                <div class="document-icon">
                  <i class="fas fa-file-alt"></i>
                </div>
                <div class="document-info">
                  <div class="document-name">${messageData.fileName || 'مستند'}</div>
                  <div class="document-size">${messageData.fileSize ? (Math.round(messageData.fileSize / 1024) + ' كيلوبايت') : ''}</div>
                </div>
                <a href="/whatsapp/media/content/${messageData._id}" target="_blank" class="document-download">
                  <i class="fas fa-download"></i>
                </a>
              </div>
            `;
          } else if (messageData.mediaType === 'sticker') {
            messageHTML += `
              <div class="media-container">
                <img src="/whatsapp/media/content/${messageData._id}" class="media-sticker" alt="ملصق">
              </div>
            `;
          } else if (messageData.mediaType === 'location') {
            messageHTML += `
              <div class="location-container">
                <div class="location-icon">
                  <i class="fas fa-map-marker-alt"></i>
                </div>
                <div class="location-info">
                  <div class="location-name">موقع جغرافي</div>
                  <div class="location-coordinates">${messageData.content || 'إحداثيات غير متوفرة'}</div>
                </div>
              </div>
            `;
          }
        }
        
        // إضافة نص الرسالة (إذا كان موجودًا)
        if (messageData.content && messageData.content.trim() !== '') {
          messageHTML += `
            <div class="message-text ${messageData.mediaType ? 'with-media' : ''}">
              ${messageData.content}
            </div>
          `;
        }
        
        // إضافة معلومات الوقت والحالة
        messageHTML += `
          <div class="message-meta">
            <span class="message-time" title="${new Date(messageData.timestamp || messageData.createdAt || Date.now()).toLocaleString()}"
                  data-timestamp="${new Date(messageData.timestamp || messageData.createdAt || Date.now()).getTime()}"
                  data-date="${new Date(messageData.timestamp || messageData.createdAt || Date.now()).toISOString().split('T')[0]}">
              ${new Date(messageData.timestamp || messageData.createdAt || Date.now()).toLocaleString('ar-LY', { hour: '2-digit', minute: '2-digit' })}
            </span>
            
            ${messageData.direction === 'outgoing' ? `
              <span class="message-status" title="حالة الرسالة: ${messageData.status || 'sent'}">
                ${messageData.status === 'sent' ? '<i class="fas fa-check text-secondary"></i>' : ''}
                ${messageData.status === 'delivered' ? '<i class="fas fa-check-double text-secondary"></i>' : ''}
                ${messageData.status === 'read' ? '<i class="fas fa-check-double text-primary"></i>' : ''}
                ${messageData.status === 'failed' ? '<i class="fas fa-exclamation-circle text-danger"></i>' : ''}
                ${(!messageData.status || messageData.status === 'sending') ? '<i class="fas fa-clock text-secondary"></i>' : ''}
              </span>
            ` : ''}
          </div>
        `;
        
        // إغلاق فقاعة الرسالة
        messageHTML += `</div>`;
        
        // إضافة قسم التفاعلات (إذا وجدت)
        if (messageData.reactions && messageData.reactions.length > 0) {
          messageHTML += `
            <div class="message-reactions">
              ${messageData.reactions.map(reaction => `
                <span class="reaction-emoji" title="تفاعل من ${reaction.sender}">
                  ${reaction.emoji}
                </span>
              `).join('')}
            </div>
          `;
        }
        
        // إضافة قسم أزرار التفاعل مع الرسالة
        messageHTML += `
          <div class="message-actions">
            <button type="button" class="btn btn-sm text-muted message-action-btn reaction-btn" title="تفاعل" onclick="window.showReactionPicker('${messageData._id}', '${messageData.externalMessageId || ''}', this)">
              <i class="far fa-smile"></i>
            </button>
            <button type="button" class="btn btn-sm text-muted message-action-btn reply-btn" 
                    data-message-id="${messageData._id}" 
                    data-external-id="${messageData.externalMessageId || ''}" 
                    title="رد" onclick="window.showReplyForm('${messageData._id}', '${messageData.externalMessageId || ''}', this.closest('.message'))">
              <i class="fas fa-reply"></i>
            </button>
          </div>
        `;
        
        // إغلاق عنصر الرسالة
        messageHTML += `</div><div class="clear-both"></div>`;
        
        // إضافة الرسالة لحاوية الرسائل
        messageContainer.insertAdjacentHTML('beforeend', messageHTML);
        
        // تمرير المحادثة لأسفل
        messageContainer.scrollTop = messageContainer.scrollHeight;
        
        // تشغيل صوت الإشعار للرسائل الواردة
        if (messageData.direction === 'incoming') {
          window.playNotificationSound();
        }
        
        // تعليق مستمعات الأحداث للرسالة الجديدة
        const newMessage = messageContainer.querySelector(`.message[data-message-id="${messageData._id}"]`);
        if (newMessage) {
          window.setupMessageActions(newMessage);
        }
      };
      
      // وظيفة لإضافة ملاحظة داخلية إلى واجهة المستخدم مباشرة
      window.addNoteToUI = function(note) {
        const messageContainerWrapper = document.querySelector('#messageContainer .message-container-wrapper'); // استهداف الحاوية الجديدة
        if (!messageContainerWrapper) {
          return;
        }
        
        // التحقق من وجود الملاحظة مسبقاً (لمنع إضافتها مرتين)
        const noteExists = messageContainerWrapper.querySelector(`.message[data-message-id="${note._id}"]`);
        if (noteExists) {
          return;
        }
        
        // إنشاء عنصر جديد للملاحظة
        const noteElement = document.createElement('div');
        noteElement.className = 'message internal'; // استخدام الكلاس 'internal' فقط
        noteElement.setAttribute('data-message-id', note._id);
        noteElement.setAttribute('data-status', 'note');

        // بناء HTML الداخلي باستخدام القالب الجزئي (يتطلب تعديل طريقة الاستدعاء لتناسب JS)
        // هنا، سنبني HTML يدوياً بشكل مشابه للقالب الجزئي
        let senderName = 'مستخدم غير معروف';
        if (note.metadata && note.metadata.senderInfo) {
          senderName = note.metadata.senderInfo.full_name || note.metadata.senderInfo.username || senderName;
        }
        
        let noteContent = note.content || '';
        if (note.mentions && note.mentions.length > 0) {
          note.mentions.forEach(mention => {
            const username = mention.username;
            const mentionRegex = new RegExp(`@${username}\\b`, 'g');
            const mentionFullName = mention.user && mention.user.full_name ? mention.user.full_name : username;
            noteContent = noteContent.replace(
              mentionRegex,
              `<span class="user-mention" data-user-id="${mention.user && mention.user._id ? mention.user._id : ''}" title="${mentionFullName}">@${username}</span>`
            );
          });
        }
        
        const timestamp = new Date(note.timestamp || note.createdAt);
        const timeString = timestamp.toLocaleString('ar-LY', { hour: '2-digit', minute: '2-digit' });
        const fullTimeString = timestamp.toLocaleString();
        const timestampMs = timestamp.getTime();
        const dateStr = timestamp.toISOString().split('T')[0];

        noteElement.innerHTML = `
          <div class="message-bubble internal-note-bubble">
            <div class="internal-note-header">
              <i class="fas fa-sticky-note me-1"></i>
              <strong>ملاحظة داخلية</strong>
              <span class="from-user ms-2 text-muted">- ${senderName}</span>
            </div>
            <div class="internal-note-content">
              ${noteContent.replace(/\n/g, '<br>')}
            </div>
            <div class="message-meta">
              <span class="message-time" title="${fullTimeString}" 
                    data-timestamp="${timestampMs}"
                    data-date="${dateStr}">
                ${timeString}
              </span>
            </div>
          </div>
        `;
        
        // إضافة الملاحظة إلى الحاوية
        messageContainerWrapper.appendChild(noteElement);
        
        // التمرير إلى أسفل لعرض الملاحظة الجديدة
        const mainContainer = document.getElementById('messageContainer');
        if (mainContainer) {
          mainContainer.scrollTop = mainContainer.scrollHeight;
        }
      };
      
      // تهيئة الصفحة عند التحميل
      function initializePage() {
        const conversationList = document.getElementById('conversationList');
        if (!conversationList) return;
        
        // تعيين مستمعات الأحداث للقائمة الأولية المعروضة بواسطة EJS
        const initialItems = conversationList.querySelectorAll('.conversation-item');
        if (initialItems.length > 0 && typeof window.attachSingleConversationItemEvent === 'function') {
            initialItems.forEach(item => {
                window.attachSingleConversationItemEvent(item);
            });
        }
        
        // محاولة استخراج معرف المحادثة من عنوان URL الحالي
        const pathParts = window.location.pathname.split('/');
        const convIdIndex = pathParts.indexOf('conversations') + 1;
        
        if (convIdIndex > 0 && pathParts.length > convIdIndex && pathParts[convIdIndex] !== 'ajax') {
          const convId = pathParts[convIdIndex];
          
          // تحديد المحادثة نشطة في القائمة
          const item = conversationList.querySelector(`[data-conversation-id="${convId}"]`);
          if (item) {
            item.classList.add('active');
            currentConversationId = convId;
            loadConversationDetails(convId);
          }
        } else {
          // إذا لم يتم تحديد محادثة، يمكن تحديد الأول في القائمة
          const firstConv = conversationList.querySelector('.conversation-item');
          if (firstConv) {
            firstConv.click();
          }
        }
        
        // تطبيق الفلترة المتقدمة عند تحميل الصفحة
        setTimeout(() => {
          // التحقق مما إذا كان هناك معلمة myConversations في العنوان
          const urlParams = new URLSearchParams(window.location.search);
          const myConversations = urlParams.get('myConversations');
          
          if (myConversations === 'true') {
            // تحديد "محادثاتي" في قائمة التعيين
            const assignmentFilter = document.getElementById('assignmentFilter');
            if (assignmentFilter) {
              assignmentFilter.value = 'mine';
            }
          }
          
          // تطبيق الفلترة الافتراضية (المحادثات المفتوحة افتراضيًا)
          window.filterConversationsByStatus(document.getElementById('statusFilter').value);
          window.filterConversationsByAssignment(document.getElementById('assignmentFilter').value);
        }, 200);
      }
      
      // تنفيذ عند تحميل الصفحة
      initializePage();
      
      // معالجة أحداث التنقل في المتصفح (الرجوع/التقدم)
      window.addEventListener('popstate', function(event) {
        if (event.state && event.state.conversationId) {
          // تحميل المحادثة المحددة
          currentConversationId = event.state.conversationId;
          loadConversationDetails(currentConversationId);
          
          // تحديث القائمة
          const conversationList = document.getElementById('conversationList');
          if (conversationList) {
            const items = conversationList.querySelectorAll('.conversation-item');
            items.forEach(item => {
              item.classList.remove('active');
              if (item.getAttribute('data-conversation-id') === currentConversationId) {
                item.classList.add('active');
              }
            });
          }
        }
      });
      
      // تفويض الأحداث لأزرار الإغلاق وإعادة الفتح
      const detailsContainer = document.getElementById('conversationDetailsContainer');
      if (detailsContainer) {
        detailsContainer.addEventListener('click', function(event) {
          
          // معالجة زر الإغلاق
          if (event.target.matches('.close-conversation-btn')) {
            const conversationId = event.target.dataset.conversationId;
            Swal.fire({
              title: 'إغلاق المحادثة',
              text: 'يرجى إدخال سبب إغلاق المحادثة (اختياري)',
              input: 'text',
              inputAttributes: {
                autocapitalize: 'off',
                maxlength: 100
              },
              showCancelButton: true,
              confirmButtonText: 'إغلاق المحادثة',
              confirmButtonColor: '#d33',
              cancelButtonText: 'إلغاء',
              showLoaderOnConfirm: true,
              preConfirm: (reason) => {
                return window.closeConversation(conversationId, reason)
                  .then(response => {
                    if (!response.success) {
                      throw new Error(response.error || 'فشل إغلاق المحادثة');
                    }
                    return response;
                  })
                  .catch(error => {
                    Swal.showValidationMessage(`فشل: ${error.message}`);
                  });
              },
              allowOutsideClick: () => !Swal.isLoading()
            }).then((result) => {
              if (result.isConfirmed) {
                Swal.fire('تم!', 'تم إغلاق المحادثة بنجاح.', 'success');
                // تحديث الواجهة (اختياري، يمكن الاعتماد على إشعارات السوكت)
                refreshConversationDetails(); 
              }
            });
          }

          // معالجة زر إعادة الفتح
          if (event.target.matches('.reopen-conversation-btn')) {
            const conversationId = event.target.dataset.conversationId;
            Swal.fire({
              title: 'إعادة فتح المحادثة',
              text: 'هل أنت متأكد؟',
              icon: 'question',
              showCancelButton: true,
              confirmButtonText: 'إعادة فتح',
              confirmButtonColor: '#3085d6',
              cancelButtonText: 'إلغاء',
              showLoaderOnConfirm: true,
              preConfirm: () => {
                return window.reopenConversation(conversationId)
                  .then(response => {
                    if (!response.success) {
                      throw new Error(response.error || 'فشل إعادة فتح المحادثة');
                    }
                    return response;
                  })
                  .catch(error => {
                    Swal.showValidationMessage(`فشل: ${error.message}`);
                  });
              },
              allowOutsideClick: () => !Swal.isLoading()
            }).then((result) => {
              if (result.isConfirmed) {
                Swal.fire('تم!', 'تم إعادة فتح المحادثة بنجاح.', 'success');
                // تحديث الواجهة (اختياري، يمكن الاعتماد على إشعارات السوكت)
                refreshConversationDetails(); 
              }
            });
          }
        });
      }

      // تحديث قائمة المحادثات فقط
      window.refreshConversationsList = function() {
        console.log('تحديث قائمة المحادثات...');
        
        // إظهار مؤشر التحميل
        const loadingIndicator = document.getElementById('conversationsLoadingIndicator');
        if (!loadingIndicator) {
          // إنشاء مؤشر تحميل إذا لم يكن موجوداً
          const indicator = document.createElement('div');
          indicator.id = 'conversationsLoadingIndicator';
          indicator.className = 'd-flex justify-content-center align-items-center';
          indicator.style.position = 'absolute';
          indicator.style.top = '50%';
          indicator.style.left = '50%';
          indicator.style.transform = 'translate(-50%, -50%)';
          indicator.style.zIndex = '999';
          indicator.style.background = 'rgba(255, 255, 255, 0.8)';
          indicator.style.borderRadius = '8px';
          indicator.style.padding = '20px';
          indicator.innerHTML = `
            <div class="spinner-border text-primary me-2" role="status"></div>
            <span>جاري تحميل المحادثات...</span>
          `;
          
          const listContainer = document.querySelector('.conversations-list');
          if (listContainer) {
            listContainer.style.position = 'relative';
            listContainer.appendChild(indicator);
          }
        } else {
          loadingIndicator.style.display = 'flex';
        }
        
        // إخفاء رسالة "لا توجد محادثات"
        const noConversationsMsg = document.getElementById('noConversationsMessage');
        if (noConversationsMsg) {
          noConversationsMsg.style.display = 'none';
        }
        
        // الحصول على قيم الفلاتر الحالية
        const assignmentFilter = document.getElementById('assignmentFilter').value;
        const statusFilter = document.getElementById('statusFilter').value;
        const searchInput = document.getElementById('conversationSearchInput').value || '';
        const unreadOnlyActive = document.querySelector('.conversation-filters button[data-filter="unread"].active') !== null;
        
        console.log('فلاتر المحادثات:', { assignmentFilter, statusFilter, searchInput, unreadOnly: unreadOnlyActive });
        
        // بناء URL مع معلمات البحث والفلترة
        const url = new URL('/crm/conversations/ajax/list', window.location.origin);
        
        // إضافة معلمات التصفية
        if (statusFilter && statusFilter !== 'all') {
          url.searchParams.append('status', statusFilter);
        }
        
        if (assignmentFilter && assignmentFilter === 'mine') {
          url.searchParams.append('assignedToMe', 'true');
        }
        
        if (unreadOnlyActive) {
          url.searchParams.append('unreadOnly', 'true');
        }
        
        if (searchInput && searchInput.trim() !== '') {
          url.searchParams.append('search', searchInput.trim());
        }
        
        console.log('URL الطلب:', url.toString());
        
        // جلب البيانات من الخادم
        fetch(url.toString())
          .then(response => {
            if (!response.ok) {
              throw new Error('فشل جلب المحادثات: ' + response.status);
            }
            return response.text();
          })
          .then(html => {
            // تحديث قائمة المحادثات
            const conversationsList = document.getElementById('conversationList');
            if (conversationsList) {
              conversationsList.innerHTML = html;
              
              // إعادة تهيئة أحداث النقر على المحادثات
              setupConversationClickHandlers();
              
              // التحقق من وجود محادثات
              const hasConversations = conversationsList.querySelector('.conversation-item') !== null;
              
              // إخفاء مؤشر التحميل
              const loadingIndicator = document.getElementById('conversationsLoadingIndicator');
              if (loadingIndicator) {
                loadingIndicator.style.display = 'none';
              }
              
              // إظهار/إخفاء رسالة عدم وجود محادثات
              let noConversationsMsg = document.getElementById('noConversationsMessage');
              if (!hasConversations) {
                if (!noConversationsMsg) {
                  noConversationsMsg = document.createElement('div');
                  noConversationsMsg.id = 'noConversationsMessage';
                  noConversationsMsg.className = 'text-center p-4';
                  noConversationsMsg.innerHTML = `
                    <div class="py-5">
                      <i class="fas fa-search text-muted fa-3x mb-3"></i>
                      <h5>لا توجد محادثات تطابق البحث</h5>
                      <p class="text-muted">جرب تغيير معايير الفلترة أو البحث</p>
                      <button class="btn btn-outline-primary btn-sm mt-2" onclick="resetConversationFilters()">
                        <i class="fas fa-redo me-1"></i> إعادة تعيين الفلاتر
                      </button>
                    </div>
                  `;
                  
                  const conversationsListContainer = document.querySelector('.conversations-list');
                  if (conversationsListContainer) {
                    conversationsListContainer.appendChild(noConversationsMsg);
                  }
                } else {
                  noConversationsMsg.style.display = 'block';
                }
              } else if (noConversationsMsg) {
                noConversationsMsg.style.display = 'none';
              }
            }
          })
          .catch(error => {
            console.error('خطأ أثناء تحديث المحادثات:', error);
            
            // إخفاء مؤشر التحميل عند الخطأ
            const loadingIndicator = document.getElementById('conversationsLoadingIndicator');
            if (loadingIndicator) {
              loadingIndicator.style.display = 'none';
            }
            
            // عرض رسالة الخطأ
            let noConversationsMsg = document.getElementById('noConversationsMessage');
            if (!noConversationsMsg) {
              noConversationsMsg = document.createElement('div');
              noConversationsMsg.id = 'noConversationsMessage';
              noConversationsMsg.className = 'text-center p-4';
              
              const conversationsListContainer = document.querySelector('.conversations-list');
              if (conversationsListContainer) {
                conversationsListContainer.appendChild(noConversationsMsg);
              }
            }
            
            if (noConversationsMsg) {
              noConversationsMsg.style.display = 'block';
              noConversationsMsg.innerHTML = `
                <div class="py-5">
                  <i class="fas fa-exclamation-triangle text-warning fa-3x mb-3"></i>
                  <h5>حدث خطأ أثناء تحميل المحادثات</h5>
                  <p class="text-muted">يرجى المحاولة مرة أخرى</p>
                  <button class="btn btn-primary btn-sm mt-2" onclick="refreshConversationsList()">
                    <i class="fas fa-sync me-1"></i> إعادة المحاولة
                  </button>
                </div>
              `;
            }
          });
      };
      
      // دالة إعادة تعيين فلاتر المحادثات
      window.resetConversationFilters = function() {
        // إعادة تعيين حقل البحث
        const searchInput = document.getElementById('conversationSearchInput');
        if (searchInput) {
          searchInput.value = '';
        }
        
        // إعادة تعيين فلتر التعيين
        const assignmentFilter = document.getElementById('assignmentFilter');
        if (assignmentFilter) {
          assignmentFilter.value = 'all';
        }
        
        // إعادة تعيين فلتر الحالة
        const statusFilter = document.getElementById('statusFilter');
        if (statusFilter) {
          statusFilter.value = 'all';
        }
        
        // إعادة تعيين زر الرسائل غير المقروءة
        const filterButtons = document.querySelectorAll('.conversation-filters button');
        filterButtons.forEach(btn => {
          if (btn.dataset.filter === 'all') {
            btn.classList.add('active');
          } else {
            btn.classList.remove('active');
          }
        });
        
        // تحديث قائمة المحادثات
        refreshConversationsList();
      };

      // إعداد أحداث النقر على المحادثات
      window.setupConversationClickHandlers = function() {
        const conversationItems = document.querySelectorAll('.conversation-item');
        
        conversationItems.forEach(item => {
          item.addEventListener('click', function() {
            // إزالة الفئة النشطة من جميع العناصر
            conversationItems.forEach(i => i.classList.remove('active'));
            
            // إضافة الفئة النشطة لهذا العنصر
            this.classList.add('active');
            
            // الحصول على معرف المحادثة
            const conversationId = this.getAttribute('data-conversation-id');
            
            // تعيين المحادثة الحالية
            currentConversationId = conversationId;
            
            // تحميل تفاصيل المحادثة
            loadConversationDetails(conversationId);
          });
        });
      };
    });
  </script>
</body>
</html>
