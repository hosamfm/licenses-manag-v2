<!DOCTYPE html>
<html lang="ar" dir="rtl">
<head>
  <%- include('../partials/_head') %>
  <title>المحادثات</title>
  <!-- ربط ملف التنسيقات الخاص بنظام CRM -->
  <link rel="stylesheet" href="/css/crm.css">
  <link rel="stylesheet" href="/css/conversation.css">
  <!-- إضافة مكتبة Socket.IO - مهم لوظائف المحادثات الفورية -->
  <script src="https://cdn.socket.io/4.8.1/socket.io.min.js"></script>
  
  <!-- تعريف معلومات المستخدم كمتغيرات عامة -->
  <script>
    window.currentUserId = "<%= typeof user !== 'undefined' && user ? user._id : 'system' %>";
    window.currentUsername = "<%= typeof user !== 'undefined' && user ? user.username : 'مستخدم النظام' %>";
  </script>
  
  <!-- استدعاء ملف المساعدة للمحادثات -->
  <script src="/js/conversation-utils.js"></script>
</head>
<body>

  <%- include('../partials/_header') %>

  <div class="crm-container">
    <!-- الشريط الجانبي الموحد -->
    <%- include('../partials/_crm_sidebar') %>

    <!-- المحتوى الرئيسي -->
    <div class="crm-content">

      <!-- رسائل فلاش إن وجدت -->
      <% if (flashMessages && flashMessages.error) { %>
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
          <%= flashMessages.error %>
          <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
      <% } %>
      <% if (flashMessages && flashMessages.success) { %>
        <div class="alert alert-success alert-dismissible fade show" role="alert">
          <%= flashMessages.success %>
          <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
      <% } %>

      <div class="row">

        <!-- العمود الأيمن: قائمة المحادثات -->
        <div class="col-lg-4">
          <h5 class="mb-3">قائمة المحادثات</h5>
          <% if (conversations && conversations.length > 0) { %>
            <div class="list-group" id="conversationList">
              <% conversations.forEach(function(conv) { %>
                <button type="button"
                        class="list-group-item list-group-item-action conversation-item"
                        data-conversation-id="<%= conv._id %>">
                  <div class="d-flex justify-content-between">
                    <strong><%= conv.customerName || conv.phoneNumber %></strong>
                    <% if (conv.unreadCount > 0) { %>
                      <span class="badge bg-danger ms-2"><%= conv.unreadCount %></span>
                    <% } %>
                  </div>
                  <div class="mt-1">
                    <% if (conv.lastMessage) { %>
                      <small class="text-muted">
                        <%= conv.lastMessage.direction === 'incoming' ? 'رسالة واردة: ' : 'رسالة صادرة: ' %>
                        <%= conv.lastMessage.content
                             ? conv.lastMessage.content.substring(0, 30)
                             : 'محتوى وسائط' %>...
                      </small>
                    <% } else { %>
                      <small class="text-muted">لا توجد رسائل</small>
                    <% } %>
                  </div>
                  <small class="text-muted d-block">
                    <%= new Date(conv.lastMessageAt || conv.updatedAt).toLocaleString('ar-LY') %>
                  </small>
                </button>
              <% }) %>
            </div>
          <% } else { %>
            <div class="alert alert-info">لا توجد محادثات متاحة.</div>
          <% } %>
        </div>

        <!-- العمود الأيسر: سيتم حقن تفاصيل المحادثة فيه بواسطة AJAX -->
        <div class="col-lg-8" id="conversationDetailsContainer">
          <div class="alert alert-secondary">
            اختر محادثة من القائمة لعرض تفاصيلها...
          </div>
        </div>

      </div>
    </div>
  </div>

  <%- include('../partials/_footer') %>

  <!-- عنصر الصوت للتنبيه عند وصول رسالة جديدة -->
  <audio id="messageSound" src="/sounds/new-message.mp3" preload="auto"></audio>

  <!-- سكربت جافاسكربت لجلب التفاصيل بالـ AJAX -->
  <script>
    document.addEventListener('DOMContentLoaded', function() {
      // معرف المحادثة الحالية (إذا تم تحديدها)
      let currentConversationId = null;
      
      // تكوين وتهيئة الويب سوكت
      const socket = io();
      
      // الاستماع لأحداث الاتصال
      socket.on('connect', function() {
        console.log('تم الاتصال بالخادم');
      });
      
      // الاستماع لأحداث قطع الاتصال
      socket.on('disconnect', function() {
        console.log('انقطع الاتصال بالخادم');
      });
      
      // الاستماع لأحداث الرسائل الجديدة
      socket.on('new-message', function(data) {
        console.log('رسالة جديدة وصلت:', data);
        
        // تشغيل صوت الإشعار للرسائل الواردة
        if (data.direction === 'incoming') {
          window.playNotificationSound();
        }
        
        // تحديث قائمة المحادثات
        refreshConversationsList();
        
        // إذا كانت الرسالة تخص المحادثة المفتوحة حالياً، أضفها للمحادثة
        if (data.conversationId === currentConversationId) {
          window.addMessageToConversation(data);
        }
      });
      
      // الاستماع لأحداث تحديث حالة الرسائل
      socket.on('message-status-update', function(data) {
        console.log('تحديث حالة الرسالة:', data);
        
        // تحقق من وجود معرف المحادثة والتأكد من أنه يطابق المحادثة الحالية
        if (!data.conversationId || data.conversationId !== currentConversationId) {
          console.log('تجاهل تحديث الحالة لأنه لا يخص المحادثة الحالية');
          return;
        }
        
        // استخدم المعرف الخارجي لتحديث حالة الرسالة
        if (data.externalId) {
          window.updateMessageStatus(data.externalId, data.status);
        } else if (data.messageId) {
          // دعم للإصدارات القديمة التي قد ترسل messageId بدلاً من externalId
          window.updateMessageStatus(data.messageId, data.status);
        }
      });
      
      // الاستماع لأحداث الردود الجديدة
      socket.on('message_reply', function(data) {
        console.log('رد جديد على رسالة:', data);
        
        // إذا كانت الرسالة تنتمي إلى المحادثة الحالية، تحديث الواجهة
        if (data.conversationId === currentConversationId) {
          refreshConversationDetails();
        } else {
          // تحديث قائمة المحادثات فقط
          refreshConversationsList();
        }
      });
      
      // الاستماع لأحداث التفاعلات الجديدة
      socket.on('message-reaction', function(data) {
        console.log('تفاعل جديد على رسالة:', data);
        
        // التحقق من أن البيانات تخص المحادثة الحالية
        if (!data.conversationId || data.conversationId !== currentConversationId) {
          console.log('تجاهل تحديث التفاعل لأنه لا يخص المحادثة الحالية');
          return;
        }
        
        // استخدام الدالة الجديدة لتحديث التفاعل مباشرة بدلاً من إعادة تحميل المحادثة بالكامل
        window.updateMessageReaction(data.externalId, data.reaction);
      });
      
      // دعم للإشعارات القديمة بتنسيق الشرطة السفلية (_)
      socket.on('message_reaction', function(data) {
        console.log('تم استلام تفاعل بالتنسيق القديم:', data);
        
        // إعادة توجيه إلى المستمع الجديد إذا كان يحتوي على المعلومات الكافية
        if (data && data.externalId && data.reaction) {
          // إضافة معرف المحادثة إذا كان مفقوداً
          if (!data.conversationId) {
            data.conversationId = currentConversationId;
          }
          
          // استخدام الدالة الجديدة
          window.updateMessageReaction(data.externalId, data.reaction);
        } else {
          // السلوك القديم كإجراء احتياطي - إعادة تحميل المحادثة بالكامل
          refreshConversationDetails();
        }
      });
      
      // الاستماع لأحداث تحديث المعرف الخارجي للرسالة
      socket.on('message-external-id-update', function(data) {
        console.log('تحديث المعرف الخارجي للرسالة:', data);
        
        // التحقق من أن البيانات تخص المحادثة الحالية
        if (!data.conversationId || data.conversationId !== currentConversationId) {
          console.log('تجاهل تحديث المعرف الخارجي لأنه لا يخص المحادثة الحالية');
          return;
        }
        
        // البحث عن عنصر الرسالة حسب المعرف الداخلي
        const messageElem = document.querySelector(`.message[data-message-id="${data.messageId}"]`);
        
        if (!messageElem) {
          console.warn('لم يتم العثور على الرسالة لتحديث المعرف الخارجي. المعرف الداخلي:', data.messageId);
          return;
        }
        
        // إضافة المعرف الخارجي للرسالة
        messageElem.setAttribute('data-external-id', data.externalId);
        console.log('تم تحديث المعرف الخارجي للرسالة بنجاح:', {
          messageId: data.messageId,
          externalId: data.externalId
        });
      });
      
      // تحديث قائمة المحادثات بدون إعادة تحميل الصفحة
      function refreshConversationsList() {
        fetch('/crm/conversations/ajax/list', {
          method: 'GET',
          headers: {
            'X-Requested-With': 'XMLHttpRequest'
          }
        })
        .then(response => {
          if (!response.ok) throw new Error('HTTP error ' + response.status);
          return response.json();
        })
        .then(data => {
          if (data.success && data.conversations && data.conversations.length > 0) {
            // إعادة بناء قائمة المحادثات
            const conversationList = document.getElementById('conversationList');
            if (conversationList) {
              // حفظ معرف المحادثة النشطة حالياً (إن وجدت)
              const activeConversation = conversationList.querySelector('.active');
              const activeId = activeConversation ? activeConversation.getAttribute('data-conversation-id') : null;
              
              // إعادة بناء القائمة
              let html = '';
              data.conversations.forEach(conv => {
                const isActive = (conv._id === activeId) ? 'active' : '';
                const hasBadge = (conv.unreadCount > 0) ? `<span class="badge bg-danger ms-2">${conv.unreadCount}</span>` : '';
                
                html += `
                  <button type="button"
                          class="list-group-item list-group-item-action conversation-item ${isActive}"
                          data-conversation-id="${conv._id}">
                    <div class="d-flex justify-content-between">
                      <strong>${conv.customerName || conv.phoneNumber}</strong>
                      ${hasBadge}
                    </div>
                    <div class="mt-1">
                      ${conv.lastMessage ? 
                        `<small class="text-muted">
                          ${conv.lastMessage.direction === 'incoming' ? 'رسالة واردة: ' : 'رسالة صادرة: '}
                          ${conv.lastMessage.content.substring(0, 30)}${conv.lastMessage.content.length > 30 ? '...' : ''}
                        </small>` : 
                        '<small class="text-muted">لا توجد رسائل</small>'
                      }
                    </div>
                  </button>
                `;
              });
              
              // تحديث المحتوى
              conversationList.innerHTML = html;
              
              // إعادة تعيين مستمعات الأحداث
              attachConversationItemsEvents();
            }
          }
        })
        .catch(error => {
          console.error('خطأ في تحديث قائمة المحادثات:', error);
          // في حالة الخطأ 404، قد يكون المستخدم في الواجهة القديمة - نقوم بإعادة التوجيه إلى الواجهة الجديدة
          if (error.message.includes('404')) {
            window.location.href = '/crm/conversations/ajax';
          }
        });
      }
      
      // دالة لتعيين مستمعات أحداث لعناصر قائمة المحادثات
      function attachConversationItemsEvents() {
        const conversationList = document.getElementById('conversationList');
        if (!conversationList) return;
        
        // إضافة مستمع الأحداث للنقر على كل محادثة
        const items = conversationList.querySelectorAll('.conversation-item');
        items.forEach(item => {
          item.addEventListener('click', function() {
            // إزالة الفئة النشطة من جميع العناصر
            items.forEach(i => i.classList.remove('active'));
            
            // إضافة الفئة النشطة للعنصر المحدد
            this.classList.add('active');
            
            // الحصول على معرف المحادثة
            const convId = this.getAttribute('data-conversation-id');
            if (!convId) return;
            
            // تحديث معرف المحادثة الحالية
            currentConversationId = convId;
            
            // إضافة المعرف إلى تاريخ المتصفح
            if (history.pushState) {
              const url = `/crm/conversations/${convId}`;
              history.pushState({ conversationId: convId }, '', url);
            }
            
            // استدعاء AJAX لتحميل التفاصيل
            loadConversationDetails(convId);
          });
        });
      }
      
      // تحميل تفاصيل المحادثة
      function loadConversationDetails(conversationId) {
        if (!conversationId) return;
        
        const detailsContainer = document.getElementById('conversationDetailsContainer');
        if (!detailsContainer) return;
        
        // عرض مؤشر التحميل
        detailsContainer.innerHTML = `
          <div class="text-center p-5">
            <div class="spinner-border text-primary" role="status">
              <span class="visually-hidden">جاري التحميل...</span>
            </div>
            <p class="mt-2">جاري تحميل المحادثة...</p>
          </div>
        `;
        
        // طلب التفاصيل من الخادم
        fetch(`/crm/conversations/ajax/details/${conversationId}`, {
          method: 'GET',
          headers: {
            'X-Requested-With': 'XMLHttpRequest'
          }
        })
        .then(response => {
          if (!response.ok) throw new Error('HTTP error ' + response.status);
          return response.text();
        })
        .then(html => {
          // تحديث المحتوى
          detailsContainer.innerHTML = html;
          
          // تحديث معرف المحادثة الحالية
          currentConversationId = conversationId;
          
          // الانضمام إلى غرفة المحادثة عبر الويب سوكت
          socket.emit('join-conversation', conversationId);
          console.log('تم الانضمام إلى غرفة المحادثة:', conversationId);
          
          // التمرير لأسفل آخر الرسائل
          setTimeout(() => {
            const msgContainer = document.getElementById('messageContainer');
            if (msgContainer) {
              msgContainer.scrollTop = msgContainer.scrollHeight;
            }
          }, 100);

          // تعيين المستمعين للتفاعلات مع الرسائل بعد تحميل المحادثة
          window.attachConversationEventListeners && window.attachConversationEventListeners();
        })
        .catch(err => {
          console.error('خطأ في جلب تفاصيل المحادثة:', err);
          detailsContainer.innerHTML = `
            <div class="alert alert-danger">
              حدث خطأ أثناء جلب تفاصيل المحادثة: ${err.message}
            </div>
          `;
        });
      }

      // تحديث تفاصيل المحادثة (إعادة تحميل)
      window.refreshConversationDetails = function() {
        if (currentConversationId) {
          loadConversationDetails(currentConversationId);
        }
      };
      
      // دالة لإضافة رسالة جديدة للمحادثة الحالية
      window.addMessageToConversation = function(messageData) {
        if (!messageData || !currentConversationId) return;
        
        // التأكد من أن الرسالة تخص المحادثة الحالية
        if (messageData.conversationId !== currentConversationId) return;
        
        // الحصول على حاوية الرسائل
        const messageContainer = document.getElementById('messageContainer');
        if (!messageContainer) return;
        
        // التحقق من وجود الرسالة مسبقاً (لمنع إضافتها مرتين)
        const messageExists = document.querySelector(`.message[data-message-id="${messageData._id}"]`);
        if (messageExists) {
          console.log('الرسالة موجودة بالفعل، تخطي إضافتها مرة أخرى:', messageData._id);
          return;
        }
        
        // تنسيق التاريخ
        const messageDate = new Date(messageData.timestamp || messageData.createdAt || Date.now());
        const formattedDate = messageDate.toLocaleString('ar-LY');
        
        // إنشاء عنصر الرسالة
        const messageElem = document.createElement('div');
        messageElem.className = `message ${messageData.direction}`;
        messageElem.setAttribute('data-message-id', messageData._id);
        messageElem.setAttribute('data-status', messageData.status || 'sent');
        
        if (messageData.externalId) {
          messageElem.setAttribute('data-external-id', messageData.externalId);
        }
        
        // تحديد HTML الخاص بالرسالة بناءً على نوع الرسالة ونوع المحتوى
        let messageHTML = '';
        const isMedia = messageData.mediaType && messageData.mediaType !== 'text';
        
        if (isMedia) {
          // هنا يمكن إضافة عرض مناسب لنوع الوسائط
          messageHTML = `
            <div class="message-bubble media-message">
              <div class="media-content">
                <i class="fas fa-paperclip me-1"></i>
                محتوى وسائط (${messageData.mediaType})
              </div>
            </div>
          `;
        } else {
          // رسالة نصية عادية
          messageHTML = `
            <div class="message-bubble">
              ${messageData.content || ''}
            </div>
          `;
        }
        
        // إضافة معلومات الرسالة والأزرار
        messageHTML += `
          <div class="message-info">
            <small class="message-time">${formattedDate}</small>
            ${messageData.direction === 'outgoing' ? 
              `<span class="message-status">
                <i class="${messageData.status === 'sent' ? 'fas fa-check' : 
                          messageData.status === 'delivered' ? 'fas fa-check-double text-silver' : 
                          messageData.status === 'read' ? 'fas fa-check-double text-primary' : 
                          'fas fa-clock'}" title="${messageData.status || 'مرسلة'}"></i>
              </span>` : ''}
          </div>
          <div class="message-actions">
            <button type="button" class="btn btn-sm reply-btn" 
                    data-message-id="${messageData._id}" 
                    ${messageData.externalId ? `data-external-id="${messageData.externalId}"` : ''}>
              <i class="fas fa-reply"></i>
            </button>
            <!-- يمكن إضافة أزرار إضافية هنا مثل زر التفاعل إلخ -->
          </div>
        `;
        
        // تعيين المحتوى
        messageElem.innerHTML = messageHTML;
        
        // إضافة الرسالة لحاوية الرسائل
        messageContainer.appendChild(messageElem);
        
        // تمرير المحادثة لأسفل
        messageContainer.scrollTop = messageContainer.scrollHeight;
        
        // إضافة مستمعات الأحداث للرسالة الجديدة
        window.setupMessageActions(messageElem);
      }
      
      // تهيئة الصفحة عند التحميل
      function initializePage() {
        const conversationList = document.getElementById('conversationList');
        if (!conversationList) return;
        
        // تعيين مستمعات الأحداث للقائمة
        attachConversationItemsEvents();
        
        // محاولة استخراج معرف المحادثة من عنوان URL الحالي
        const urlParts = window.location.pathname.split('/');
        const convIdIndex = urlParts.indexOf('conversations') + 1;
        
        if (convIdIndex > 0 && urlParts.length > convIdIndex && urlParts[convIdIndex] !== 'ajax') {
          const convId = urlParts[convIdIndex];
          
          // تحديد المحادثة نشطة في القائمة
          const item = conversationList.querySelector(`[data-conversation-id="${convId}"]`);
          if (item) {
            item.classList.add('active');
            currentConversationId = convId;
            loadConversationDetails(convId);
          }
        } else {
          // إذا لم يتم تحديد محادثة، يمكن تحديد الأول في القائمة
          const firstConv = conversationList.querySelector('.conversation-item');
          if (firstConv) {
            firstConv.click();
          }
        }
      }
      
      // تنفيذ عند تحميل الصفحة
      initializePage();
      
      // معالجة أحداث التنقل في المتصفح (الرجوع/التقدم)
      window.addEventListener('popstate', function(event) {
        if (event.state && event.state.conversationId) {
          // تحميل المحادثة المحددة
          currentConversationId = event.state.conversationId;
          loadConversationDetails(currentConversationId);
          
          // تحديث القائمة
          const conversationList = document.getElementById('conversationList');
          if (conversationList) {
            const items = conversationList.querySelectorAll('.conversation-item');
            items.forEach(item => {
              item.classList.remove('active');
              if (item.getAttribute('data-conversation-id') === currentConversationId) {
                item.classList.add('active');
              }
            });
          }
        }
      });
      
      // تحديث القائمة كل دقيقة للتأكد من الحصول على أحدث المحادثات
      setInterval(refreshConversationsList, 60000);
    });
  </script>
</body>
</html>
