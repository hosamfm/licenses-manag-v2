<!DOCTYPE html>
<html lang="ar" dir="rtl">
<head>
  <%- include('../partials/_head') %>
  <title>المحادثات</title>
  <!-- إضافة SweetAlert2 -->
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css">
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.all.min.js"></script>
  
  <!-- ربط ملف التنسيقات الخاص بنظام CRM -->
  <link rel="stylesheet" href="/css/crm.css">
  <link rel="stylesheet" href="/css/conversation-new.css">
  
  <!-- إضافة مكتبة Tribute.js لدعم المنشن في التعليقات -->
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/tributejs@5.1.3/dist/tribute.min.css">
  <script src="https://cdn.jsdelivr.net/npm/tributejs@5.1.3/dist/tribute.min.js"></script>
  
  <!-- إضافة ملف معالجة Socket.IO - مهم لوظائف المحادثات الفورية -->
  <script src="https://cdn.socket.io/4.8.1/socket.io.min.js"></script>
  
  <!-- استدعاء ملفات المساعدة -->
  <%- include('./partials/_head_chat_modules') %>
  <script src="/js/contact-helper.js"></script>
  <script src="/js/notifications.js"></script>
  <script src="/js/socket-utils.js"></script>
  <script src="/js/conversations-page.js"></script>
  
  <!-- تعريف معلومات المستخدم كمتغيرات عامة -->
  <script>
    // تعريف المتغيرات العامة بشكل صحيح
    window.currentUserId = '<%= typeof user !== "undefined" && user && user._id ? user._id : "system" %>';
    window.currentUsername = '<%= typeof user !== "undefined" && user && user.username ? user.username : "مستخدم النظام" %>';
    
    // تهيئة كائن الفلاتر الافتراضية
    window.currentFilters = {
      status: 'open',     // افتراضي: المحادثات المفتوحة
      assignment: 'all',  // افتراضي: كل المحادثات
      searchTerm: ''
    };

    // متغير لتتبع معرف المحادثة المفتوحة حاليًا
    window.currentConversationId = null;

    // كائن اتصال Socket.io العام
    window.socketConnection = null;
    window.socketConnected = false;

    // مستمع لتهيئة الاتصال بعد تحميل الصفحة
    document.addEventListener('DOMContentLoaded', function() {
      window.socketConnection = io();

      window.socketConnection.on('connect', function() {
        window.socketConnected = true;
        console.log('تم الاتصال بالسوكت بنجاح (conversations_split_ajax)');
      });

      window.socketConnection.on('disconnect', function() {
        window.socketConnected = false;
        console.log('تم قطع الاتصال بالسوكت (conversations_split_ajax)');
      });

      // إعداد مستمعات الإشعارات العامة
      if (typeof window.setupNotificationListeners === 'function') {
         window.setupNotificationListeners(window.socketConnection);
      }
    });
  </script>
</head>
<!-- إضافة فئة page-fills-height للتحكم في الهامش السفلي -->
<body class="page-fills-height">
  <%- include('../partials/_header') %>

  <div class="crm-container">
    <!-- الشريط الجانبي الموحد -->
    <%- include('../partials/_crm_sidebar') %>

    <!-- المحتوى الرئيسي -->
    <div class="crm-content">
      <!-- رسائل فلاش إن وجدت -->
      <% if (flashMessages && flashMessages.error) { %>
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
          <%= flashMessages.error %>
          <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
      <% } %>
      <% if (flashMessages && flashMessages.success) { %>
        <div class="alert alert-success alert-dismissible fade show" role="alert">
          <%= flashMessages.success %>
          <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
      <% } %>

      <div class="row conversations-view-container">
        <!-- العمود الأيمن: قائمة المحادثات -->
        <div class="col-lg-4 conversations-list-column mobile-hidden">
          <div class="conversations-sidebar h-100">
            <div class="conversations-header">
              <h5><i class="fas fa-comments me-2 text-primary"></i> المحادثات</h5>
            </div>
            
            <!-- منطقة الفلاتر والبحث -->
            <div class="conversation-filters-search">
              <div class="input-group search-container">
                <span class="input-group-text">
                  <i class="fas fa-search text-muted"></i>
                </span>
                <input type="text" id="conversationSearchInput" class="form-control" placeholder="بحث في المحادثات..." aria-label="بحث في المحادثات" autocomplete="off">
                <button class="btn btn-outline-secondary d-none" type="button" id="clearSearchBtn" title="مسح البحث">
                  <i class="fas fa-times"></i>
                </button>
              </div>
              <div class="conversation-filters">
                <div class="filter-status">
                  <select class="form-select form-select-sm" id="filterStatus">
                    <option value="open" selected>المفتوحة</option>
                    <option value="closed">المغلقة</option>
                    <option value="all">الكل</option>
                  </select>
                </div>
                <div class="filter-assignment">
                  <select class="form-select form-select-sm" id="filterAssignment">
                    <option value="all" selected>الكل</option>
                    <option value="mine">محادثاتي</option>
                    <option value="unassigned">غير مسندة</option>
                  </select>
                </div>
              </div>
            </div>
            
            <!-- حاوية قائمة المحادثات -->
            <div class="conversations-list" id="conversationList">
              <!-- عرض مؤشر تحميل أولي -->
              <div id="conversationListLoader" class="conversation-list-loader">
                <div class="spinner-border spinner-border-sm text-primary" role="status">
                  <span class="visually-hidden">جاري التحميل...</span>
                </div>
                <p class="loading-text">جاري تحميل المحادثات...</p>
              </div>
              
              <!-- رسالة عدم وجود محادثات -->
              <div id="noConversationsMessage" class="no-conversations-message d-none">
                 <i class="fas fa-info-circle"></i> لا توجد محادثات تطابق الفلتر الحالي.
              </div>
            </div>
          </div>
        </div>

        <!-- العمود الأيسر: تفاصيل المحادثة -->
        <div class="col-lg-8 conversation-details-column">
          <!-- إضافة زر تبديل قائمة المحادثات هنا، مرئي فقط على الجوال -->
          <button class="btn btn-sm btn-outline-secondary d-lg-none conversation-list-toggler" type="button" id="conversationListToggler" aria-label="Toggle Conversation List">
            <i class="fas fa-list"></i> عرض المحادثات
          </button>
          <div class="conversation-details-container" id="conversationDetailsContainer">
            <div class="conversation-welcome">
              <i class="fas fa-comments welcome-icon"></i>
              <h4>حدد محادثة</h4>
              <p>اختر محادثة من القائمة على اليمين لعرضها.</p>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <%- include('../partials/_footer') %>

  <!-- عنصر الصوت للتنبيه عند وصول رسالة جديدة -->
  <audio id="messageSound" src="/sounds/new-message.mp3" preload="auto"></audio>
  
  <!-- نافذة منبثقة لعرض معلومات جهة الاتصال -->
  <div class="modal fade" id="contactInfoModal" tabindex="-1" aria-labelledby="contactInfoModalLabel" aria-hidden="true">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="contactInfoModalLabel">معلومات جهة الاتصال</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="إغلاق"></button>
        </div>
        <div class="modal-body" id="contactInfoContent">
          <!-- سيتم ملء هذا المحتوى بواسطة الجافاسكريبت -->
        </div>
        <div class="modal-footer">
          <a href="#" class="btn btn-primary" id="viewContactDetailsBtn" style="display: none;">
            <i class="fas fa-external-link-alt me-1"></i>
            عرض تفاصيل الملف الكامل
          </a>
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">إغلاق</button>
        </div>
      </div>
    </div>
  </div>

  <script>
    // دالة عامة لفتح نافذة معلومات جهة الاتصال
    // تخزين مؤقت لبيانات جهات الاتصال التي تم جلبها سابقًا
    window.contactsCache = {};
    
    window.openContactInfoModal = function(contactId) {
      if (!contactId) return;
      
      // عرض النافذة المنبثقة فورًا
      $('#contactInfoModal').modal('show');
      
      // محاولة استرداد أي بيانات متوفرة عن العميل من صفحة المحادثة الحالية
      let initialName = '';
      let initialPhone = '';
      
      // البحث عن العنصر الذي تم النقر عليه للحصول على أي معلومات أولية
      const nameElement = document.querySelector('.customer-name a[data-contact-id="'+contactId+'"]');
      if (nameElement) {
        initialName = nameElement.textContent.trim().replace(/\s*ⓘ\s*$/, '');
      }
      
      // البحث عن رقم الهاتف في المحادثة إن وجد
      const phoneElement = document.querySelector('.phoneNumber[data-contact-id="'+contactId+'"]');
      if (phoneElement) {
        initialPhone = phoneElement.textContent.trim();
      }
      
      // عرض البيانات المتوفرة مبدئيًا
      if (initialName) {
        $('#contactInfoContent').html(`
          <div class="text-center mb-3">
            <div class="avatar-lg mx-auto">
              <i class="fas fa-user-circle fa-4x text-primary"></i>
            </div>
            <h4 class="mt-2">${initialName}</h4>
          </div>
          <div class="contact-info-details">
            ${initialPhone ? `
            <div class="mb-2 row">
              <div class="col-sm-4 text-muted">رقم الهاتف:</div>
              <div class="col-sm-8 fw-bold" dir="ltr">${initialPhone}</div>
            </div>` : ''}
            <div class="text-center">
              <div class="spinner-border spinner-border-sm text-primary" role="status">
                <span class="visually-hidden">جاري تحميل التفاصيل...</span>
              </div>
              <small class="text-muted ms-2">جاري تحميل المعلومات الإضافية...</small>
            </div>
          </div>
        `);
      } else {
        // إذا لم تتوفر بيانات أولية، عرض مؤشر التحميل
        $('#contactInfoContent').html(`
          <div class="text-center p-4">
            <div class="spinner-border text-primary" role="status">
              <span class="visually-hidden">جاري التحميل...</span>
            </div>
            <p class="mt-2">جاري تحميل معلومات جهة الاتصال...</p>
          </div>
        `);
      }
      
      // تحديث زر عرض التفاصيل على الفور
      $('#viewContactDetailsBtn').attr('href', `/crm/contacts/${contactId}`).show();
      
      // التحقق من وجود البيانات في التخزين المؤقت
      if (window.contactsCache[contactId]) {
        // استخدام البيانات المخزنة مؤقتًا
        updateContactModalContent(window.contactsCache[contactId]);
        return;
      }
      
      // جلب معلومات جهة الاتصال من الخادم
      fetch(`/api/contacts/${contactId}`)
        .then(response => response.ok ? response.json() : Promise.reject('فشل جلب بيانات جهة الاتصال'))
        .then(data => {
          if (data.success && data.contact) {
            // تخزين البيانات في الذاكرة المؤقتة
            window.contactsCache[contactId] = data.contact;
            // تحديث محتوى النافذة
            updateContactModalContent(data.contact);
          } else {
            handleContactFetchError('تعذر تحميل معلومات جهة الاتصال. يرجى المحاولة مرة أخرى.');
          }
        })
        .catch(error => {
          console.error('خطأ في جلب معلومات جهة الاتصال:', error);
          handleContactFetchError('حدث خطأ أثناء جلب معلومات جهة الاتصال. يرجى المحاولة مرة أخرى.');
        });
    };
    
    // دالة لتحديث محتوى النافذة المنبثقة
    function updateContactModalContent(contact) {
      $('#contactInfoContent').html(`
        <div class="text-center mb-3">
          <div class="avatar-lg mx-auto">
            <i class="fas fa-user-circle fa-4x text-primary"></i>
          </div>
          <h4 class="mt-2">${contact.name}</h4>
        </div>
        
        <div class="contact-info-details">
          <div class="mb-2 row">
            <div class="col-sm-4 text-muted">رقم الهاتف:</div>
            <div class="col-sm-8 fw-bold" dir="ltr">${contact.phoneNumber}</div>
          </div>
          
          <div class="mb-2 row">
            <div class="col-sm-4 text-muted">البريد الإلكتروني:</div>
            <div class="col-sm-8">${contact.email || 'غير محدد'}</div>
          </div>
          
          <div class="mb-2 row">
            <div class="col-sm-4 text-muted">الشركة:</div>
            <div class="col-sm-8">${contact.company || 'غير محدد'}</div>
          </div>
        </div>
      `);
    }
    
    // دالة لمعالجة أخطاء جلب البيانات
    function handleContactFetchError(errorMessage) {
      // إضافة رسالة خطأ مع الاحتفاظ بأي معلومات أولية معروضة
      const currentContent = $('#contactInfoContent').html();
      if (currentContent.includes('spinner-border')) {
        $('#contactInfoContent').html(`
          <div class="alert alert-danger">
            <i class="fas fa-exclamation-circle me-2"></i>
            ${errorMessage}
          </div>
        `);
      } else {
        // إذا كانت هناك بيانات معروضة بالفعل، إضافة رسالة خطأ في الأسفل
        $('#contactInfoContent').append(`
          <div class="alert alert-warning mt-3">
            <i class="fas fa-exclamation-circle me-2"></i>
            <small>${errorMessage}</small>
          </div>
        `);
      }
    }
    
    // إضافة مستمع الحدث للنقر على رابط معلومات جهة الاتصال
    $(document).on('click', '.contact-info-link', function(e) {
      e.preventDefault();
      const contactId = $(this).data('contact-id');
      window.openContactInfoModal(contactId);
    });

    // تحسينات للبحث في المحادثات
    document.addEventListener('DOMContentLoaded', function() {
      // ---------- تعريف العناصر الأساسية ----------
      const searchInput = document.getElementById('conversationSearchInput');
      const clearSearchBtn = document.getElementById('clearSearchBtn');
      const conversationList = document.getElementById('conversationList');
      const conversationListLoader = document.getElementById('conversationListLoader');
      const noConversationsMessage = document.getElementById('noConversationsMessage');
      const filterStatus = document.getElementById('filterStatus');
      const filterAssignment = document.getElementById('filterAssignment');
      
      // التحقق من وجود العناصر الأساسية للبحث
      if (!conversationList) {
        console.error('عنصر قائمة المحادثات (conversationList) غير موجود في الصفحة');
        return;
      }
      
      // ---------- متغيرات عامة لإدارة التحديثات ----------
      let searchTimeout = null;         // مؤقت لتأخير البحث
      let isUpdating = false;           // قفل لمنع التحديثات المتزامنة
      let lastRequestId = 0;            // معرف الطلب الأخير
      let currentFilters = {            // حالة الفلاتر الحالية
        status: filterStatus ? filterStatus.value : 'open',
        assignment: filterAssignment ? filterAssignment.value : 'all',
        search: searchInput ? searchInput.value.trim() : ''
      };
      
      // ---------- وظائف إدارة حالة واجهة المستخدم ----------
      
      /**
       * تحديث حالة الفلاتر الحالية وحفظها
       */
      function updateCurrentFilters() {
        currentFilters = {
          status: filterStatus ? filterStatus.value : 'open',
          assignment: filterAssignment ? filterAssignment.value : 'all',
          search: searchInput ? searchInput.value.trim() : ''
        };
        
        // تحديث زر مسح البحث
        if (clearSearchBtn) {
          if (currentFilters.search) {
            clearSearchBtn.classList.remove('d-none');
          } else {
            clearSearchBtn.classList.add('d-none');
          }
        }
        
        // يمكن إضافة حفظ الفلاتر في localStorage هنا إذا لزم الأمر
      }
      
      /**
       * إظهار حالة التحميل
       */
      function showLoading() {
        if (conversationListLoader) {
          conversationListLoader.classList.remove('d-none');
        }
        if (noConversationsMessage) {
          noConversationsMessage.classList.add('d-none');
        }
      }
      
      /**
       * إخفاء حالة التحميل
       */
      function hideLoading() {
        if (conversationListLoader) {
          conversationListLoader.classList.add('d-none');
        }
      }
      
      /**
       * عرض رسالة عدم وجود محادثات
       */
      function showNoConversationsMessage(customMessage = null) {
        if (noConversationsMessage) {
          if (customMessage) {
            noConversationsMessage.textContent = customMessage;
          } else {
            noConversationsMessage.textContent = 'لا توجد محادثات تطابق الفلتر الحالي.';
          }
          noConversationsMessage.classList.remove('d-none');
        }
      }
      
      /**
       * مسح محتويات قائمة المحادثات (العناصر فقط)
       */
      function clearConversationList() {
        if (conversationList) {
          const elements = conversationList.querySelectorAll('.conversation-item');
          elements.forEach(el => el.remove());
        }
      }
      
      // ---------- الوظائف الرئيسية لتحديث المحادثات ----------
      
      /**
       * جلب قائمة المحادثات من الخادم حسب الفلاتر الحالية
       * @returns {Promise} وعد بنتيجة الطلب
       */
      function fetchConversations() {
        // إنشاء معرف فريد للطلب الحالي
        const requestId = ++lastRequestId;
        
        // بناء معلمات الطلب
        const params = new URLSearchParams();
        
        if (currentFilters.search) {
          params.append('search', currentFilters.search);
        }
        
        params.append('status', currentFilters.status);
        params.append('assignment', currentFilters.assignment);
        
        // إرسال الطلب
        return fetch(`/crm/conversations/ajax/list?${params.toString()}`)
          .then(response => {
            if (!response.ok) {
              throw new Error(`خطأ في الطلب: ${response.status}`);
            }
            return response.json();
          })
          .then(data => {
            // تجاهل النتائج إذا كان هناك طلب أحدث
            if (requestId < lastRequestId) {
              console.log('تم تجاهل استجابة قديمة', requestId, lastRequestId);
              return { skipped: true };
            }
            
            return data;
          });
      }
      
      /**
       * إنشاء عنصر محادثة للعرض في القائمة
       * @param {Object} conversation بيانات المحادثة
       * @returns {HTMLElement} عنصر DOM للمحادثة
       */
      function createConversationItem(conversation) {
        // إنشاء عنصر المحادثة
        const item = document.createElement('div');
        item.className = 'conversation-item';
        item.dataset.id = conversation._id;
        
        // تطبيق الفئات المناسبة
        if (conversation.status === 'closed') {
          item.classList.add('closed');
        }
        
        if (conversation.unreadCount > 0) {
          item.classList.add('has-unread');
        }
        
        // تحديد المعلومات المعروضة
        const displayName = conversation.displayName || conversation.customerName || conversation.phoneNumber;
        const lastMessageTime = conversation.lastMessageAt ? new Date(conversation.lastMessageAt) : new Date(conversation.createdAt);
        const timeString = formatConversationTime(lastMessageTime);
        
        // معلومات من تم تعيين المحادثة له
        let assignedInfo = '';
        if (conversation.assignedTo) {
          const assigneeName = conversation.assignedTo.full_name || conversation.assignedTo.username;
          assignedInfo = `<small class="assigned-info"><i class="fas fa-user-check"></i> ${assigneeName}</small>`;
        }
        
        // محتوى آخر رسالة (مع تأمين من XSS)
        let lastMessagePreview = '';
        if (conversation.lastMessage && conversation.lastMessage.content) {
          const contentText = conversation.lastMessage.content.substring(0, 40);
          lastMessagePreview = document.createElement('div');
          lastMessagePreview.textContent = contentText + (conversation.lastMessage.content.length > 40 ? '...' : '');
          lastMessagePreview = lastMessagePreview.innerHTML;
        } else if (conversation.lastMessage) {
          lastMessagePreview = 'مرفق وسائط';
        } else {
          lastMessagePreview = 'محادثة جديدة';
        }
        
        // بناء محتوى العنصر
        item.innerHTML = `
          <div class="conversation-item-header">
            <h6 class="customer-name">${displayName}</h6>
            <span class="conversation-time">${timeString}</span>
          </div>
          <div class="conversation-item-body">
            <p class="last-message">${lastMessagePreview}</p>
            ${assignedInfo}
          </div>
          ${conversation.unreadCount > 0 ? `<span class="unread-badge">${conversation.unreadCount}</span>` : ''}
        `;
        
        // إضافة مستمع حدث للنقر
        item.addEventListener('click', function() {
          // تحديد العنصر النشط
          document.querySelectorAll('.conversation-item.active').forEach(el => {
            el.classList.remove('active');
          });
          
          this.classList.add('active');
          
          // تحميل تفاصيل المحادثة
          loadConversationDetails(conversation._id);
          
          // إخفاء قائمة المحادثات على الأجهزة المحمولة
          const listColumn = document.querySelector('.conversations-list-column');
          if (listColumn) {
            listColumn.classList.add('mobile-hidden');
          }
        });
        
        return item;
      }
      
      /**
       * معالجة نتائج المحادثات وعرضها
       * @param {Object} data البيانات المستلمة من الخادم
       */
      function processConversationResults(data) {
        // التعامل مع البيانات التي تم تجاهلها
        if (data.skipped) {
          return;
        }
        
        // تنظيف القائمة قبل إضافة العناصر الجديدة
        clearConversationList();
        
        // إضافة المحادثات إلى القائمة
        if (data.success && data.conversations && data.conversations.length > 0) {
          const fragment = document.createDocumentFragment();
          
          data.conversations.forEach(conversation => {
            const item = createConversationItem(conversation);
            fragment.appendChild(item);
          });
          
          conversationList.appendChild(fragment);
        } else {
          // عرض رسالة عدم وجود محادثات
          showNoConversationsMessage();
        }
        
        // تحديد المحادثة النشطة إذا كانت محددة مسبقًا
        if (window.currentConversationId) {
          const activeItem = conversationList.querySelector(`.conversation-item[data-id="${window.currentConversationId}"]`);
          if (activeItem) {
            activeItem.classList.add('active');
          }
        }
      }
      
      /**
       * تنفيذ تحديث قائمة المحادثات (الدالة الرئيسية)
       * يستخدم قفل لمنع التحديثات المتزامنة
       */
      function updateConversationsList() {
        // منع التحديثات المتزامنة
        if (isUpdating) {
          console.log('جاري تحديث القائمة بالفعل، تم تجاهل الطلب');
          return;
        }
        
        // تعيين قفل التحديث
        isUpdating = true;
        
        // تحديث الفلاتر الحالية
        updateCurrentFilters();
        
        // إظهار مؤشر التحميل
        showLoading();
        
        // جلب البيانات من الخادم
        fetchConversations()
          .then(data => {
            // معالجة نتائج الطلب
            processConversationResults(data);
          })
          .catch(error => {
            console.error('خطأ في تحديث قائمة المحادثات:', error);
            
            // عرض رسالة الخطأ
            showNoConversationsMessage('حدث خطأ أثناء تحميل المحادثات. يرجى المحاولة مرة أخرى.');
          })
          .finally(() => {
            // إخفاء مؤشر التحميل
            hideLoading();
            
            // إزالة قفل التحديث
            isUpdating = false;
          });
      }
      
      /**
       * تحميل تفاصيل محادثة محددة
       * @param {string} conversationId معرف المحادثة
       */
      function loadConversationDetails(conversationId) {
        const detailsContainer = document.getElementById('conversationDetailsContainer');
        if (!detailsContainer) {
          console.error('عنصر تفاصيل المحادثة غير موجود');
          return;
        }
        
        // عرض مؤشر التحميل
        detailsContainer.innerHTML = `
          <div class="conversation-loading-details">
            <div class="spinner-border text-primary" role="status">
              <span class="visually-hidden">جاري التحميل...</span>
            </div>
            <p>جاري تحميل تفاصيل المحادثة...</p>
          </div>
        `;
        
        // طلب تفاصيل المحادثة
        fetch(`/crm/conversations/ajax/details/${conversationId}`)
          .then(response => {
            if (!response.ok) {
              throw new Error('فشل تحميل تفاصيل المحادثة');
            }
            return response.text();
          })
          .then(html => {
            // عرض المحتوى المستلم
            detailsContainer.innerHTML = html;
            
            // تحديث عنوان المتصفح
            try {
              const currentUrl = new URL(window.location.href);
              currentUrl.searchParams.set('selected', conversationId);
              window.history.replaceState({}, '', currentUrl.toString());
            } catch (e) {
              console.error('خطأ في تحديث عنوان المتصفح:', e);
            }
            
            // حفظ المحادثة النشطة
            window.currentConversationId = conversationId;
            
            // الانضمام إلى غرفة Socket.io
            if (window.socketConnected && window.socketConnection) {
              window.socketConnection.emit('join-conversation', { conversationId });
            }
          })
          .catch(error => {
            console.error('خطأ في تحميل تفاصيل المحادثة:', error);
            detailsContainer.innerHTML = `
              <div class="alert alert-danger">
                <i class="fas fa-exclamation-circle me-2"></i>
                حدث خطأ أثناء تحميل تفاصيل المحادثة. يرجى المحاولة مرة أخرى.
              </div>
            `;
          });
      }
      
      /**
       * تنسيق وقت آخر رسالة
       * @param {Date} date تاريخ الرسالة
       * @returns {string} النص المنسق للوقت
       */
      function formatConversationTime(date) {
        const now = new Date();
        const diff = now - date;
        
        try {
          // أقل من يوم واحد
          if (diff < 86400000) {
            return date.toLocaleTimeString('ar-SA', { hour: '2-digit', minute: '2-digit' });
          }
          
          // أقل من أسبوع
          if (diff < 604800000) {
            const days = ['الأحد', 'الاثنين', 'الثلاثاء', 'الأربعاء', 'الخميس', 'الجمعة', 'السبت'];
            return days[date.getDay()];
          }
          
          // تاريخ كامل
          return date.toLocaleDateString('ar-SA', { year: 'numeric', month: 'short', day: 'numeric' });
        } catch (e) {
          console.error('خطأ في تنسيق التاريخ:', e);
          return '';
        }
      }
      
      // ---------- تهيئة مستمعات الأحداث ----------
      
      // مستمع حدث البحث (مع تأخير)
      if (searchInput) {
        searchInput.addEventListener('input', function() {
          clearTimeout(searchTimeout);
          searchTimeout = setTimeout(updateConversationsList, 500);
        });
      }
      
      // مستمع حدث زر مسح البحث
      if (clearSearchBtn) {
        clearSearchBtn.addEventListener('click', function() {
          if (searchInput) {
            searchInput.value = '';
            this.classList.add('d-none');
            updateConversationsList();
          }
        });
      }
      
      // مستمعات أحداث الفلاتر
      if (filterStatus) {
        filterStatus.addEventListener('change', updateConversationsList);
      }
      
      if (filterAssignment) {
        filterAssignment.addEventListener('change', updateConversationsList);
      }
      
      // زر تبديل عرض قائمة المحادثات على الأجهزة المحمولة
      const listToggler = document.getElementById('conversationListToggler');
      if (listToggler) {
        listToggler.addEventListener('click', function() {
          const listColumn = document.querySelector('.conversations-list-column');
          if (listColumn) {
            listColumn.classList.toggle('mobile-hidden');
          }
        });
      }
      
      // ---------- استدعاء التحديث الأولي ----------
      
      // تحديث قائمة المحادثات عند تحميل الصفحة
      // استخدام setTimeout للتأكد من تحميل كل العناصر
      setTimeout(updateConversationsList, 0);
      
      // ---------- تفعيل تحديثات Socket.io للمحادثات ----------
      
      // مستمع لتحديثات المحادثات عبر Socket.io
      if (window.socketConnection) {
        // استماع لتحديث محادثة
        window.socketConnection.on('conversation_update', function(data) {
          // تحديث قائمة المحادثات في حالة تغيير الحالة أو الإسناد
          if (data && (data.type === 'status_changed' || data.type === 'assigned')) {
            updateConversationsList();
          }
        });
        
        // استماع لوصول رسالة جديدة
        window.socketConnection.on('new_message', function(data) {
          // تحديث قائمة المحادثات لإظهار الرسالة الجديدة
          updateConversationsList();
        });
      }
    });
  </script>
</body>
</html>
